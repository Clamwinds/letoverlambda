{"version":3,"sources":["mongoasync.js"],"names":[],"mappings":";;;;;;AAIA,IAAI,KAAK,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AAC/B,IAAI,SAAS,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;AACrC,IAAI,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC;AAC5B,IAAI,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AACvB,IAAI,WAAW,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,WAAW,CAAC;AACjD,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC/B,IAAI,QAAQ,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC;AAC3C,IAAI,GAAG,GAAG,gCAAgC,CAAC;AAC3C,OAAO,CAAC,gBAAgB,CAAC,CAAC;;AAE1B,IAAI,WAAW,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AACzC,SAAe,UAAU;QAGb,YAAY,EAOZ,YAAY,EAMZ,MAAM,EAEN,MAAM;;;;;;AAfN,4BAAY,GAAG,KAAK,CAAC,MAAM,CAAC;AAC5B,8BAAU,EAAE,UAAU;;AAEtB,8BAAU,EAAE,sBAAY;AACpB,+BAAO,UAAU,CAAC;qBACrB;iBACJ,CAAC;AACE,4BAAY,GAAG,IAAI,YAAY,CAAC;AAChC,2BAAO,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAC1D,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;iBACvF,CAAC;;gDACI,SAAS,CAAC,OAAO,CAAC,gBAAgB,CAAC;;;;gDAEtB,YAAY,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,EAAE;;;AAAlE,sBAAM;;gDACJ,SAAS,CAAC,UAAU,EAAE;;;;gDACT,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC;;;AAAtC,sBAAM;;;;;;;CAGb;;AAEL,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC,CAAC","file":"mongoasync-compiled.js","sourcesContent":["/*** Created by calmwinds on 1/4/16.*/\n\n// Using this to explore async/await with mongodb\n// there's an issue w/ my stuff or theres.\nvar Mongo = require('mongodb');\nvar Mongorito = require('mongorito');\nvar Model = Mongorito.Model;\nvar co = require('co');\nvar MongoClient = require('mongodb').MongoClient;\nvar assert = require('assert');\nvar ObjectId = require('mongodb').ObjectID;\nvar url = 'mongodb://localhost:27017/test';\nrequire(\"babel-polyfill\");\n\nvar regenerator = require('regenerator');\nasync function myFunction() {\n   // let result = await somethingThatReturnsAPromise();\n\n        var zipcodeClass = Model.extend({\n            collection: 'zipcodes',\n\n            collection: function () {\n                return 'zipcodes';\n            }\n        });\n        var zipcodeclass = new zipcodeClass({\n            zipcode: [\"94025\", \"94027\", \"94301\", \"94305\", \"94303\", \"94306\",\n                \"94306\", \"94085\", \"94043\", \"94035\", \"94041\", \"94040\", \"94022\", \"94049\", \"94086\"]\n        });\n        await Mongorito.connect('localhost/test');\n\n        var posts1 = await zipcodeClass.where('zipcode').in([\"94022\"]).count();\n        await Mongorito.disconnect();\n        var result = await Promise.resolve(posts1);\n\n\n    }\n\nconsole.log(myFunction());\n"]}