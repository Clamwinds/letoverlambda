{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;;;;;;kBAsCQ,WAAW;;;QAIH,YAAY,GAAZ,YAAY;;;;IAXhB,KAAK;;;;;;;;;;;;AASjB,KAAK,CAAC,cAAc,CAAC,OAAO,GAAG,CAAC,CAAA;;AAEzB,SAAS,YAAY,CAAC,KAAK,EAAE,OAAO,EAAE;AAC3C,MAAI,CAAC,GAAG,WAXF,WAAW,CAWO,KAAK,EAAE,OAAO,CAAC,CAAA;AACvC,GAAC,CAAC,IAAI,EAAE,CAAA;AACR,SAAO,CAAC,CAAC,aAAa,EAAE,CAAA;CACzB;;AAED,KAAK,CAAC,YAAY,GAAG,YAAY,CAAA;AACjC,KAAK,CAAC,WAAW,UAjBT,WAAW,AAiBY,CAAA","file":"index-compiled.js","sourcesContent":["// Acorn: Loose parser\n//\n// This module provides an alternative parser (`parse_dammit`) that\n// exposes that same interface as `parse`, but will try to parse\n// anything as JavaScript, repairing syntax error the best it can.\n// There are circumstances in which it will raise an error and give\n// up, but they are very rare. The resulting AST will be a mostly\n// valid JavaScript AST (as per the [Mozilla parser API][api], except\n// that:\n//\n// - Return outside functions is allowed\n//\n// - Label consistency (no conflicts, break only to existing labels)\n//   is not enforced.\n//\n// - Bogus Identifier nodes with a name of `\"âœ–\"` are inserted whenever\n//   the parser got too confused to return anything meaningful.\n//\n// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\n//\n// The expected use for this is to *first* try `acorn.parse`, and only\n// if that fails switch to `parse_dammit`. The loose parser might\n// parse badly indented code incorrectly, so **don't** use it as\n// your default parser.\n//\n// Quite a lot of acorn.js is duplicated here. The alternative was to\n// add a *lot* of extra cruft to that file, making it less readable\n// and slower. Copying and editing the code allowed me to make\n// invasive changes and simplifications without creating a complicated\n// tangle.\n\nimport * as acorn from \"..\"\nimport {LooseParser} from \"./state\"\nimport \"./tokenize\"\nimport \"./parseutil\"\nimport \"./statement\"\nimport \"./expression\"\n\nexport {LooseParser} from \"./state\"\n\nacorn.defaultOptions.tabSize = 4\n\nexport function parse_dammit(input, options) {\n  let p = new LooseParser(input, options)\n  p.next()\n  return p.parseTopLevel()\n}\n\nacorn.parse_dammit = parse_dammit\nacorn.LooseParser = LooseParser\n"]}