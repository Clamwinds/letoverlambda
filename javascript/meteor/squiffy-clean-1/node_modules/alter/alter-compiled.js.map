{"version":3,"sources":["alter.js"],"names":[],"mappings":";;;;;;AAIA,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC/B,IAAI,UAAU,GAAG,OAAO,CAAC,QAAQ,CAAC;;;AAAC,AAGnC,SAAS,KAAK,CAAC,GAAG,EAAE,SAAS,EAAE;AAC3B,gBAAY,CAAC;;AAEb,QAAI,OAAO,GAAG,KAAK,CAAC,OAAO,IAAI,UAAS,CAAC,EAAE;AACvC,eAAO,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,gBAAgB,CAAC;KACjE,CAAC,CAAC;;AAEH,UAAM,CAAC,OAAO,GAAG,KAAK,QAAQ,CAAC,CAAC;AAChC,UAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;;;AAAC,AAG3B,QAAI,eAAe,GAAG,UAAU,CAAC,SAAS,EAAE,UAAS,CAAC,EAAE,CAAC,EAAE;AACvD,eAAO,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC;KAC5B,CAAC,CAAC;;AAEH,QAAI,IAAI,GAAG,EAAE,CAAC;;AAEd,QAAI,GAAG,GAAG,CAAC,CAAC;AACZ,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAe,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC7C,YAAI,IAAI,GAAG,eAAe,CAAC,CAAC,CAAC,CAAC;;AAE9B,cAAM,CAAC,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC;AAC1B,cAAM,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC;AAC/B,YAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;AACtC,YAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACpB,WAAG,GAAG,IAAI,CAAC,GAAG,CAAC;KAClB;AACD,QAAI,GAAG,GAAG,GAAG,CAAC,MAAM,EAAE;AAClB,YAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;KAC7B;;AAED,WAAO,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;CACxB;;AAED,IAAI,OAAO,MAAM,KAAK,WAAW,IAAI,OAAO,MAAM,CAAC,OAAO,KAAK,WAAW,EAAE;AACxE,UAAM,CAAC,OAAO,GAAG,KAAK,CAAC;CAC1B","file":"alter-compiled.js","sourcesContent":["// alter.js\n// MIT licensed, see LICENSE file\n// Copyright (c) 2013 Olov Lassus <olov.lassus@gmail.com>\n\nvar assert = require(\"assert\");\nvar stableSort = require(\"stable\");\n\n// fragments is a list of {start: index, end: index, str: string to replace with}\nfunction alter(str, fragments) {\n    \"use strict\";\n\n    var isArray = Array.isArray || function(v) {\n        return Object.prototype.toString.call(v) === \"[object Array]\";\n    };;\n\n    assert(typeof str === \"string\");\n    assert(isArray(fragments));\n\n    // stableSort isn't in-place so no need to copy array first\n    var sortedFragments = stableSort(fragments, function(a, b) {\n        return a.start - b.start;\n    });\n\n    var outs = [];\n\n    var pos = 0;\n    for (var i = 0; i < sortedFragments.length; i++) {\n        var frag = sortedFragments[i];\n\n        assert(pos <= frag.start);\n        assert(frag.start <= frag.end);\n        outs.push(str.slice(pos, frag.start));\n        outs.push(frag.str);\n        pos = frag.end;\n    }\n    if (pos < str.length) {\n        outs.push(str.slice(pos));\n    }\n\n    return outs.join(\"\");\n}\n\nif (typeof module !== \"undefined\" && typeof module.exports !== \"undefined\") {\n    module.exports = alter;\n}\n"]}