{"version":3,"sources":["completion.js"],"names":[],"mappings":"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","file":"completion-compiled.js","sourcesContent":["var fs = require('fs')\nvar path = require('path')\n\n// add bash completions to your\n//  yargs-powered applications.\nmodule.exports = function (yargs, usage) {\n  var self = {\n    completionKey: 'get-yargs-completions'\n  }\n\n  // get a list of completion commands.\n  self.getCompletion = function (done) {\n    var completions = []\n    var current = process.argv[process.argv.length - 1]\n    var previous = process.argv.slice(process.argv.indexOf('--' + self.completionKey) + 1)\n    var argv = yargs.parse(previous)\n\n    // a custom completion function can be provided\n    // to completion().\n    if (completionFunction) {\n      if (completionFunction.length < 3) {\n        // synchronous completion function.\n        return done(completionFunction(current, argv))\n      } else {\n        // asynchronous completion function\n        return completionFunction(current, argv, function (completions) {\n          done(completions)\n        })\n      }\n    }\n\n    var handlers = yargs.getCommandHandlers()\n    for (var i = 0, ii = previous.length; i < ii; ++i) {\n      if (handlers[previous[i]]) {\n        return handlers[previous[i]](yargs.reset())\n      }\n    }\n\n    if (!current.match(/^-/)) {\n      usage.getCommands().forEach(function (command) {\n        if (previous.indexOf(command[0]) === -1) {\n          completions.push(command[0])\n        }\n      })\n    }\n\n    if (current.match(/^-/)) {\n      Object.keys(yargs.getOptions().key).forEach(function (key) {\n        completions.push('--' + key)\n      })\n    }\n\n    done(completions)\n  }\n\n  // generate the completion script to add to your .bashrc.\n  self.generateCompletionScript = function ($0) {\n    var script = fs.readFileSync(\n      path.resolve(__dirname, '../completion.sh.hbs'),\n      'utf-8'\n    )\n    var name = path.basename($0)\n\n    // add ./to applications not yet installed as bin.\n    if ($0.match(/\\.js$/)) $0 = './' + $0\n\n    script = script.replace(/{{app_name}}/g, name)\n    return script.replace(/{{app_path}}/g, $0)\n  }\n\n  // register a function to perform your own custom\n  // completions., this function can be either\n  // synchrnous or asynchronous.\n  var completionFunction = null\n  self.registerFunction = function (fn) {\n    completionFunction = fn\n  }\n\n  return self\n}\n"]}