{"version":3,"sources":["both.js"],"names":[],"mappings":";;AAAA,IAAI,IAAI,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC;AAC/B,IAAI,SAAS,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;AAC/B,IAAI,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AACvB,IAAI,GAAG,GAAG,EAAE,CAAC,YAAY,CAAC,SAAS,GAAG,gBAAgB,CAAC,CAAC;;AAExD,IAAI,CAAC,MAAM,EAAE,UAAU,CAAC,EAAE;AACtB,QAAI,OAAO,GAAG,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAClC,KAAC,CAAC,SAAS,CAAC,OAAO,CAAC,OAAO,EAAE,CAAE,GAAG,EAAE,GAAG,CAAE,CAAC,CAAC;AAC3C,KAAC,CAAC,SAAS,CAAC,OAAO,CAAC,WAAW,EAAE,CAAE,SAAS,EAAE,SAAS,CAAE,CAAC,CAAC;AAC3D,KAAC,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,cAAc,CAAC,CAAC;AACvC,KAAC,CAAC,GAAG,EAAE,CAAC;CACX,CAAC,CAAC;;AAEH,IAAI,CAAC,mCAAmC,EAAE,UAAU,CAAC,EAAE;AACnD,QAAI,OAAO,GAAG,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;AACnD,KAAC,CAAC,SAAS,CAAC,OAAO,CAAC,OAAO,EAAE,CAAE,GAAG,EAAE,GAAG,CAAE,CAAC,CAAC;AAC3C,KAAC,CAAC,SAAS,CAAC,OAAO,CAAC,WAAW,EAAE,CAAE,SAAS,EAAE,SAAS,CAAE,CAAC,CAAC;AAC3D,KAAC,CAAC,SAAS,CACT,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;AAC7B,YAAI,GAAG,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;AACzB,eAAO,GAAG,CAAC,KAAK,IAAI,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC;KACpC,CAAC,EACF,CAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAE,EACtB,6BAA6B,CAAC,CAAC;AACjC,KAAC,CAAC,GAAG,EAAE,CAAC;CACX,CAAC,CAAC","file":"both-compiled.js","sourcesContent":["var test = require('tap').test;\nvar detective = require('../');\nvar fs = require('fs');\nvar src = fs.readFileSync(__dirname + '/files/both.js');\n\ntest('both', function (t) {\n    var modules = detective.find(src);\n    t.deepEqual(modules.strings, [ 'a', 'b' ]);\n    t.deepEqual(modules.expressions, [ \"'c' + x\", \"'d' + y\" ]);\n    t.notOk(modules.nodes, 'has no nodes');\n    t.end();\n});\n\ntest('both with nodes specified in opts', function (t) {\n    var modules = detective.find(src, { nodes: true });\n    t.deepEqual(modules.strings, [ 'a', 'b' ]);\n    t.deepEqual(modules.expressions, [ \"'c' + x\", \"'d' + y\" ]);\n    t.deepEqual(\n      modules.nodes.map(function (n) { \n        var arg = n.arguments[0];\n        return arg.value || arg.left.value; \n      }),\n      [ 'a', 'b', 'c', 'd' ],\n      'has a node for each require');\n    t.end();\n});\n"]}