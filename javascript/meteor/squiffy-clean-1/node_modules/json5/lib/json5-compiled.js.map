{"version":3,"sources":["json5.js"],"names":[],"mappings":"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","file":"json5-compiled.js","sourcesContent":["// json5.js\n// Modern JSON. See README.md for details.\n//\n// This file is based directly off of Douglas Crockford's json_parse.js:\n// https://github.com/douglascrockford/JSON-js/blob/master/json_parse.js\n\nvar JSON5 = (typeof exports === 'object' ? exports : {});\n\nJSON5.parse = (function () {\n    \"use strict\";\n\n// This is a function that can parse a JSON5 text, producing a JavaScript\n// data structure. It is a simple, recursive descent parser. It does not use\n// eval or regular expressions, so it can be used as a model for implementing\n// a JSON5 parser in other languages.\n\n// We are defining the function inside of another function to avoid creating\n// global variables.\n\n    var at,     // The index of the current character\n        ch,     // The current character\n        escapee = {\n            \"'\":  \"'\",\n            '\"':  '\"',\n            '\\\\': '\\\\',\n            '/':  '/',\n            '\\n': '',       // Replace escaped newlines in strings w/ empty string\n            b:    '\\b',\n            f:    '\\f',\n            n:    '\\n',\n            r:    '\\r',\n            t:    '\\t'\n        },\n        ws = [\n            ' ',\n            '\\t',\n            '\\r',\n            '\\n',\n            '\\v',\n            '\\f',\n            '\\xA0',\n            '\\uFEFF'\n        ],\n        text,\n\n        error = function (m) {\n\n// Call error when something is wrong.\n\n            var error = new SyntaxError();\n            error.message = m;\n            error.at = at;\n            error.text = text;\n            throw error;\n        },\n\n        next = function (c) {\n\n// If a c parameter is provided, verify that it matches the current character.\n\n            if (c && c !== ch) {\n                error(\"Expected '\" + c + \"' instead of '\" + ch + \"'\");\n            }\n\n// Get the next character. When there are no more characters,\n// return the empty string.\n\n            ch = text.charAt(at);\n            at += 1;\n            return ch;\n        },\n\n        peek = function () {\n\n// Get the next character without consuming it or\n// assigning it to the ch varaible.\n\n            return text.charAt(at);\n        },\n\n        identifier = function () {\n\n// Parse an identifier. Normally, reserved words are disallowed here, but we\n// only use this for unquoted object keys, where reserved words are allowed,\n// so we don't check for those here. References:\n// - http://es5.github.com/#x7.6\n// - https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Core_Language_Features#Variables\n// - http://docstore.mik.ua/orelly/webprog/jscript/ch02_07.htm\n// TODO Identifiers can have Unicode \"letters\" in them; add support for those.\n\n            var key = ch;\n\n            // Identifiers must start with a letter, _ or $.\n            if ((ch !== '_' && ch !== '$') &&\n                    (ch < 'a' || ch > 'z') &&\n                    (ch < 'A' || ch > 'Z')) {\n                error(\"Bad identifier\");\n            }\n\n            // Subsequent characters can contain digits.\n            while (next() && (\n                    ch === '_' || ch === '$' ||\n                    (ch >= 'a' && ch <= 'z') ||\n                    (ch >= 'A' && ch <= 'Z') ||\n                    (ch >= '0' && ch <= '9'))) {\n                key += ch;\n            }\n\n            return key;\n        },\n\n        number = function () {\n\n// Parse a number value.\n\n            var number,\n                sign = '',\n                string = '',\n                base = 10;\n\n            if (ch === '-' || ch === '+') {\n                sign = ch;\n                next(ch);\n            }\n\n            // support for Infinity (could tweak to allow other words):\n            if (ch === 'I') {\n                number = word();\n                if (typeof number !== 'number' || isNaN(number)) {\n                    error('Unexpected word for number');\n                }\n                return (sign === '-') ? -number : number;\n            }\n\n            // support for NaN\n            if (ch === 'N' ) {\n              number = word();\n              if (!isNaN(number)) {\n                error('expected word to be NaN');\n              }\n              // ignore sign as -NaN also is NaN\n              return number;\n            }\n\n            if (ch === '0') {\n                string += ch;\n                next();\n                if (ch === 'x' || ch === 'X') {\n                    string += ch;\n                    next();\n                    base = 16;\n                } else if (ch >= '0' && ch <= '9') {\n                    error('Octal literal');\n                }\n            }\n\n            switch (base) {\n            case 10:\n                while (ch >= '0' && ch <= '9' ) {\n                    string += ch;\n                    next();\n                }\n                if (ch === '.') {\n                    string += '.';\n                    while (next() && ch >= '0' && ch <= '9') {\n                        string += ch;\n                    }\n                }\n                if (ch === 'e' || ch === 'E') {\n                    string += ch;\n                    next();\n                    if (ch === '-' || ch === '+') {\n                        string += ch;\n                        next();\n                    }\n                    while (ch >= '0' && ch <= '9') {\n                        string += ch;\n                        next();\n                    }\n                }\n                break;\n            case 16:\n                while (ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'F' || ch >= 'a' && ch <= 'f') {\n                    string += ch;\n                    next();\n                }\n                break;\n            }\n\n            if(sign === '-') {\n                number = -string;\n            } else {\n                number = +string;\n            }\n            \n            if (!isFinite(number)) {\n                error(\"Bad number\");\n            } else {\n                return number;\n            }\n        },\n\n        string = function () {\n\n// Parse a string value.\n\n            var hex,\n                i,\n                string = '',\n                delim,      // double quote or single quote\n                uffff;\n\n// When parsing for string values, we must look for ' or \" and \\ characters.\n\n            if (ch === '\"' || ch === \"'\") {\n                delim = ch;\n                while (next()) {\n                    if (ch === delim) {\n                        next();\n                        return string;\n                    } else if (ch === '\\\\') {\n                        next();\n                        if (ch === 'u') {\n                            uffff = 0;\n                            for (i = 0; i < 4; i += 1) {\n                                hex = parseInt(next(), 16);\n                                if (!isFinite(hex)) {\n                                    break;\n                                }\n                                uffff = uffff * 16 + hex;\n                            }\n                            string += String.fromCharCode(uffff);\n                        } else if (ch === '\\r') {\n                            if (peek() === '\\n') {\n                                next();\n                            }\n                        } else if (typeof escapee[ch] === 'string') {\n                            string += escapee[ch];\n                        } else {\n                            break;\n                        }\n                    } else if (ch === '\\n') {\n                        // unescaped newlines are invalid; see:\n                        // https://github.com/aseemk/json5/issues/24\n                        // TODO this feels special-cased; are there other\n                        // invalid unescaped chars?\n                        break;\n                    } else {\n                        string += ch;\n                    }\n                }\n            }\n            error(\"Bad string\");\n        },\n\n        inlineComment = function () {\n\n// Skip an inline comment, assuming this is one. The current character should\n// be the second / character in the // pair that begins this inline comment.\n// To finish the inline comment, we look for a newline or the end of the text.\n\n            if (ch !== '/') {\n                error(\"Not an inline comment\");\n            }\n\n            do {\n                next();\n                if (ch === '\\n' || ch === '\\r') {\n                    next();\n                    return;\n                }\n            } while (ch);\n        },\n\n        blockComment = function () {\n\n// Skip a block comment, assuming this is one. The current character should be\n// the * character in the /* pair that begins this block comment.\n// To finish the block comment, we look for an ending */ pair of characters,\n// but we also watch for the end of text before the comment is terminated.\n\n            if (ch !== '*') {\n                error(\"Not a block comment\");\n            }\n\n            do {\n                next();\n                while (ch === '*') {\n                    next('*');\n                    if (ch === '/') {\n                        next('/');\n                        return;\n                    }\n                }\n            } while (ch);\n\n            error(\"Unterminated block comment\");\n        },\n\n        comment = function () {\n\n// Skip a comment, whether inline or block-level, assuming this is one.\n// Comments always begin with a / character.\n\n            if (ch !== '/') {\n                error(\"Not a comment\");\n            }\n\n            next('/');\n\n            if (ch === '/') {\n                inlineComment();\n            } else if (ch === '*') {\n                blockComment();\n            } else {\n                error(\"Unrecognized comment\");\n            }\n        },\n\n        white = function () {\n\n// Skip whitespace and comments.\n// Note that we're detecting comments by only a single / character.\n// This works since regular expressions are not valid JSON(5), but this will\n// break if there are other valid values that begin with a / character!\n\n            while (ch) {\n                if (ch === '/') {\n                    comment();\n                } else if (ws.indexOf(ch) >= 0) {\n                    next();\n                } else {\n                    return;\n                }\n            }\n        },\n\n        word = function () {\n\n// true, false, or null.\n\n            switch (ch) {\n            case 't':\n                next('t');\n                next('r');\n                next('u');\n                next('e');\n                return true;\n            case 'f':\n                next('f');\n                next('a');\n                next('l');\n                next('s');\n                next('e');\n                return false;\n            case 'n':\n                next('n');\n                next('u');\n                next('l');\n                next('l');\n                return null;\n            case 'I':\n                next('I');\n                next('n');\n                next('f');\n                next('i');\n                next('n');\n                next('i');\n                next('t');\n                next('y');\n                return Infinity;\n            case 'N':\n              next( 'N' );\n              next( 'a' );\n              next( 'N' );\n              return NaN;\n            }\n            error(\"Unexpected '\" + ch + \"'\");\n        },\n\n        value,  // Place holder for the value function.\n\n        array = function () {\n\n// Parse an array value.\n\n            var array = [];\n\n            if (ch === '[') {\n                next('[');\n                white();\n                while (ch) {\n                    if (ch === ']') {\n                        next(']');\n                        return array;   // Potentially empty array\n                    }\n                    // ES5 allows omitting elements in arrays, e.g. [,] and\n                    // [,null]. We don't allow this in JSON5.\n                    if (ch === ',') {\n                        error(\"Missing array element\");\n                    } else {\n                        array.push(value());\n                    }\n                    white();\n                    // If there's no comma after this value, this needs to\n                    // be the end of the array.\n                    if (ch !== ',') {\n                        next(']');\n                        return array;\n                    }\n                    next(',');\n                    white();\n                }\n            }\n            error(\"Bad array\");\n        },\n\n        object = function () {\n\n// Parse an object value.\n\n            var key,\n                object = {};\n\n            if (ch === '{') {\n                next('{');\n                white();\n                while (ch) {\n                    if (ch === '}') {\n                        next('}');\n                        return object;   // Potentially empty object\n                    }\n\n                    // Keys can be unquoted. If they are, they need to be\n                    // valid JS identifiers.\n                    if (ch === '\"' || ch === \"'\") {\n                        key = string();\n                    } else {\n                        key = identifier();\n                    }\n\n                    white();\n                    next(':');\n                    object[key] = value();\n                    white();\n                    // If there's no comma after this pair, this needs to be\n                    // the end of the object.\n                    if (ch !== ',') {\n                        next('}');\n                        return object;\n                    }\n                    next(',');\n                    white();\n                }\n            }\n            error(\"Bad object\");\n        };\n\n    value = function () {\n\n// Parse a JSON value. It could be an object, an array, a string, a number,\n// or a word.\n\n        white();\n        switch (ch) {\n        case '{':\n            return object();\n        case '[':\n            return array();\n        case '\"':\n        case \"'\":\n            return string();\n        case '-':\n        case '+':\n        case '.':\n            return number();\n        default:\n            return ch >= '0' && ch <= '9' ? number() : word();\n        }\n    };\n\n// Return the json_parse function. It will have access to all of the above\n// functions and variables.\n\n    return function (source, reviver) {\n        var result;\n\n        text = String(source);\n        at = 0;\n        ch = ' ';\n        result = value();\n        white();\n        if (ch) {\n            error(\"Syntax error\");\n        }\n\n// If there is a reviver function, we recursively walk the new structure,\n// passing each name/value pair to the reviver function for possible\n// transformation, starting with a temporary root object that holds the result\n// in an empty key. If there is not a reviver function, we simply return the\n// result.\n\n        return typeof reviver === 'function' ? (function walk(holder, key) {\n            var k, v, value = holder[key];\n            if (value && typeof value === 'object') {\n                for (k in value) {\n                    if (Object.prototype.hasOwnProperty.call(value, k)) {\n                        v = walk(value, k);\n                        if (v !== undefined) {\n                            value[k] = v;\n                        } else {\n                            delete value[k];\n                        }\n                    }\n                }\n            }\n            return reviver.call(holder, key, value);\n        }({'': result}, '')) : result;\n    };\n}());\n\n// JSON5 stringify will not quote keys where appropriate\nJSON5.stringify = function (obj, replacer, space) {\n    if (replacer && (typeof(replacer) !== \"function\" && !isArray(replacer))) {\n        throw new Error('Replacer must be a function or an array');\n    }\n    var getReplacedValueOrUndefined = function(holder, key, isTopLevel) {\n        var value = holder[key];\n\n        // Replace the value with its toJSON value first, if possible\n        if (value && value.toJSON && typeof value.toJSON === \"function\") {\n            value = value.toJSON();\n        }\n\n        // If the user-supplied replacer if a function, call it. If it's an array, check objects' string keys for\n        // presence in the array (removing the key/value pair from the resulting JSON if the key is missing).\n        if (typeof(replacer) === \"function\") {\n            return replacer.call(holder, key, value);\n        } else if(replacer) {\n            if (isTopLevel || isArray(holder) || replacer.indexOf(key) >= 0) {\n                return value;\n            } else {\n                return undefined;\n            }\n        } else {\n            return value;\n        }\n    };\n\n    function isWordChar(char) {\n        return (char >= 'a' && char <= 'z') ||\n            (char >= 'A' && char <= 'Z') ||\n            (char >= '0' && char <= '9') ||\n            char === '_' || char === '$';\n    }\n\n    function isWordStart(char) {\n        return (char >= 'a' && char <= 'z') ||\n            (char >= 'A' && char <= 'Z') ||\n            char === '_' || char === '$';\n    }\n\n    function isWord(key) {\n        if (typeof key !== 'string') {\n            return false;\n        }\n        if (!isWordStart(key[0])) {\n            return false;\n        }\n        var i = 1, length = key.length;\n        while (i < length) {\n            if (!isWordChar(key[i])) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n\n    // export for use in tests\n    JSON5.isWord = isWord;\n\n    // polyfills\n    function isArray(obj) {\n        if (Array.isArray) {\n            return Array.isArray(obj);\n        } else {\n            return Object.prototype.toString.call(obj) === '[object Array]';\n        }\n    }\n\n    function isDate(obj) {\n        return Object.prototype.toString.call(obj) === '[object Date]';\n    }\n\n    isNaN = isNaN || function(val) {\n        return typeof val === 'number' && val !== val;\n    };\n\n    var objStack = [];\n    function checkForCircular(obj) {\n        for (var i = 0; i < objStack.length; i++) {\n            if (objStack[i] === obj) {\n                throw new TypeError(\"Converting circular structure to JSON\");\n            }\n        }\n    }\n\n    function makeIndent(str, num, noNewLine) {\n        if (!str) {\n            return \"\";\n        }\n        // indentation no more than 10 chars\n        if (str.length > 10) {\n            str = str.substring(0, 10);\n        }\n\n        var indent = noNewLine ? \"\" : \"\\n\";\n        for (var i = 0; i < num; i++) {\n            indent += str;\n        }\n\n        return indent;\n    }\n\n    var indentStr;\n    if (space) {\n        if (typeof space === \"string\") {\n            indentStr = space;\n        } else if (typeof space === \"number\" && space >= 0) {\n            indentStr = makeIndent(\" \", space, true);\n        } else {\n            // ignore space parameter\n        }\n    }\n\n    // Copied from Crokford's implementation of JSON\n    // See https://github.com/douglascrockford/JSON-js/blob/e39db4b7e6249f04a195e7dd0840e610cc9e941e/json2.js#L195\n    // Begin\n    var cx = /[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n        escapable = /[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n        meta = { // table of character substitutions\n        '\\b': '\\\\b',\n        '\\t': '\\\\t',\n        '\\n': '\\\\n',\n        '\\f': '\\\\f',\n        '\\r': '\\\\r',\n        '\"' : '\\\\\"',\n        '\\\\': '\\\\\\\\'\n    };\n    function escapeString(string) {\n\n// If the string contains no control characters, no quote characters, and no\n// backslash characters, then we can safely slap some quotes around it.\n// Otherwise we must also replace the offending characters with safe escape\n// sequences.\n        escapable.lastIndex = 0;\n        return escapable.test(string) ? '\"' + string.replace(escapable, function (a) {\n            var c = meta[a];\n            return typeof c === 'string' ?\n                c :\n                '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n        }) + '\"' : '\"' + string + '\"';\n    }\n    // End\n\n    function internalStringify(holder, key, isTopLevel) {\n        var buffer, res;\n\n        // Replace the value, if necessary\n        var obj_part = getReplacedValueOrUndefined(holder, key, isTopLevel);\n\n        if (obj_part && !isDate(obj_part)) {\n            // unbox objects\n            // don't unbox dates, since will turn it into number\n            obj_part = obj_part.valueOf();\n        }\n        switch(typeof obj_part) {\n            case \"boolean\":\n                return obj_part.toString();\n\n            case \"number\":\n                if (isNaN(obj_part) || !isFinite(obj_part)) {\n                    return \"null\";\n                }\n                return obj_part.toString();\n\n            case \"string\":\n                return escapeString(obj_part.toString());\n\n            case \"object\":\n                if (obj_part === null) {\n                    return \"null\";\n                } else if (isArray(obj_part)) {\n                    checkForCircular(obj_part);\n                    buffer = \"[\";\n                    objStack.push(obj_part);\n\n                    for (var i = 0; i < obj_part.length; i++) {\n                        res = internalStringify(obj_part, i, false);\n                        buffer += makeIndent(indentStr, objStack.length);\n                        if (res === null || typeof res === \"undefined\") {\n                            buffer += \"null\";\n                        } else {\n                            buffer += res;\n                        }\n                        if (i < obj_part.length-1) {\n                            buffer += \",\";\n                        } else if (indentStr) {\n                            buffer += \"\\n\";\n                        }\n                    }\n                    objStack.pop();\n                    buffer += makeIndent(indentStr, objStack.length, true) + \"]\";\n                } else {\n                    checkForCircular(obj_part);\n                    buffer = \"{\";\n                    var nonEmpty = false;\n                    objStack.push(obj_part);\n                    for (var prop in obj_part) {\n                        if (obj_part.hasOwnProperty(prop)) {\n                            var value = internalStringify(obj_part, prop, false);\n                            isTopLevel = false;\n                            if (typeof value !== \"undefined\" && value !== null) {\n                                buffer += makeIndent(indentStr, objStack.length);\n                                nonEmpty = true;\n                                var key = isWord(prop) ? prop : escapeString(prop);\n                                buffer += key + \":\" + (indentStr ? ' ' : '') + value + \",\";\n                            }\n                        }\n                    }\n                    objStack.pop();\n                    if (nonEmpty) {\n                        buffer = buffer.substring(0, buffer.length-1) + makeIndent(indentStr, objStack.length) + \"}\";\n                    } else {\n                        buffer = '{}';\n                    }\n                }\n                return buffer;\n            default:\n                // functions and undefined should be ignored\n                return undefined;\n        }\n    }\n\n    // special case...when undefined is used inside of\n    // a compound object/array, return null.\n    // but when top-level, return undefined\n    var topLevelHolder = {\"\":obj};\n    if (obj === undefined) {\n        return getReplacedValueOrUndefined(topLevelHolder, '', true);\n    }\n    return internalStringify(topLevelHolder, '', true);\n};\n"]}