{"version":3,"sources":["parse.js"],"names":[],"mappings":";;;;;AAGA,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC/B,IAAI,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AACvB,IAAI,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AAC1B,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC;;;;;;;;;;;;AAAC,AAY3B,IAAI,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;AACtD,IAAI,IAAI,GAAG,EAAE,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;;AAEpC,SAAS,UAAU,CAAC,QAAQ,EAAE,GAAG,EAAE;AAC/B,QAAI,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;AACjC,QAAI,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,EAAE,QAAQ,CAAC,CAAC;AAClD,QAAI,GAAG,GAAG,EAAE,CAAC,YAAY,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;;AAE5C,aAAS,UAAU,GAAG;AAClB,eAAO,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;KAC3B;;AAED,aAAS,SAAS,GAAG;AACjB,eAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;KAC1B;;AAED,aAAS,QAAQ,GAAG;AAChB,eAAO,IAAI,CAAC,mBAAmB,GAAG,GAAG,GAAG,KAAK,CAAC,CAAC;KAClD;;AAED,WAAO,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,GAAG,SAAS,IAAI,GAAG;AACrC,gBAAQ,GAAG;AACP,iBAAK,OAAO;AACR,sBAAM,CAAC,SAAS,CAAC,UAAU,EAAE,EAAE,SAAS,EAAE,EACtC,6CAA6C,CAAC,CAAC;AACnD,sBAAM;AAAA,AACV,iBAAK,QAAQ;AACT,sBAAM,CAAC,MAAM,CAAC,SAAS;AACnB,+DAA+C,CAAC;;AAAC,AAErD,oBAAK,QAAQ,KAAK,WAAW,EAAG;AAC9B,0BAAM,CAAC,KAAK,CAAE,KAAK,CAAE,UAAU,EAAE,CAAE,EAAE,KAAK,CAAE,QAAQ,EAAE,CAAE,EACtD,4CAA4C,CAAC,CAAC;iBACjD,MACI;AACH,0BAAM,CAAC,SAAS,CAAE,UAAU,EAAE,EAAE,QAAQ,EAAE,EACxC,4CAA4C,CAAC,CAAC;iBACjD;AACD,sBAAM;AAAA,AACV,iBAAK,KAAK;AACN,sBAAM,CAAC,MAAM,CAAC,SAAS;AACnB,+DAA+C,CAAC,CAAC;AACrD,sBAAM,CAAC,YAAY,CAAC,QAAQ;AACxB,kEAAkD,CAAC,CAAC;AACxD,sBAAM,CAAC,MAAM,CAAC,UAAU,EACpB,iCAAiC,CAAC,CAAC;AACvC,sBAAM;AAAA,AACV,iBAAK,MAAM;AACP,sBAAM,CAAC,MAAM,CAAC,QAAQ;AAClB,8DAA8C,CAAC,CAAC;AACpD,sBAAM,CAAC,MAAM,CAAC,UAAU,EACpB,iCAAiC,CAAC,CAAC;AACvC,sBAAM;AAAA,SACb;KACJ,CAAC;CACL;;AAED,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG,EAAE;;AAExB,WAAO,CAAC,GAAG,CAAC,GAAG,EAAE;;;AAAC,AAGlB,QAAI,GAAG,KAAK,MAAM,EAAE;AAChB,eAAO;KACV;;;AAAA,AAGD,MAAE,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,IAAI,EAAE;AAC7D,kBAAU,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;KACzB,CAAC,CAAC;CACN,CAAC,CAAC","file":"parse-compiled.js","sourcesContent":["// parse.js\n// Tests parse(). See readme.txt for details.\n\nvar assert = require('assert');\nvar FS = require('fs');\nvar JSON5 = require('..');\nvar Path = require('path');\n\n// Test JSON5.parse() by comparing its output for each case with either the\n// native JSON.parse() or ES5 strict-mode eval(). See readme.txt for details.\n// For eval(), remember to wrap the input in parentheses before eval()'ing,\n// since {...} is ambiguous in JavaScript. Also ensure the parentheses are on\n// lines of their own, to support inline comments.\n\n// TODO More test cases, and ones that test specific features and edge cases.\n// Mozilla's test cases are a great inspiration and reference here:\n// http://mxr.mozilla.org/mozilla-central/source/js/src/tests/ecma_5/JSON/\n\nvar dirsPath = Path.resolve(__dirname, 'parse-cases');\nvar dirs = FS.readdirSync(dirsPath);\n\nfunction createTest(fileName, dir) {\n    var ext = Path.extname(fileName);\n    var filePath = Path.join(dirsPath, dir, fileName);\n    var str = FS.readFileSync(filePath, 'utf8');\n\n    function parseJSON5() {\n        return JSON5.parse(str);\n    }\n\n    function parseJSON() {\n        return JSON.parse(str);\n    }\n\n    function parseES5() {\n        return eval('\"use strict\"; (\\n' + str + '\\n)');\n    }\n\n    exports[dir][fileName] = function test() {\n        switch (ext) {\n            case '.json':\n                assert.deepEqual(parseJSON5(), parseJSON(),\n                    'Expected parsed JSON5 to equal parsed JSON.');\n                break;\n            case '.json5':\n                assert.throws(parseJSON,        // test validation\n                    'Test case bug: expected JSON parsing to fail.');\n                // Need special case for NaN as NaN != NaN\n                if ( fileName === 'nan.json5' ) {\n                  assert.equal( isNaN( parseJSON5() ), isNaN( parseES5() ),\n                    'Expected parsed JSON5 to equal parsed ES5.');\n                }\n                else {\n                  assert.deepEqual( parseJSON5(), parseES5(),\n                    'Expected parsed JSON5 to equal parsed ES5.');\n                }\n                break;\n            case '.js':\n                assert.throws(parseJSON,        // test validation\n                    'Test case bug: expected JSON parsing to fail.');\n                assert.doesNotThrow(parseES5,   // test validation\n                    'Test case bug: expected ES5 parsing not to fail.');\n                assert.throws(parseJSON5,\n                    'Expected JSON5 parsing to fail.');\n                break;\n            case '.txt':\n                assert.throws(parseES5,         // test validation\n                    'Test case bug: expected ES5 parsing to fail.');\n                assert.throws(parseJSON5,\n                    'Expected JSON5 parsing to fail.');\n                break;\n        }\n    };\n}\n\ndirs.forEach(function (dir) {\n    // create a test suite for this group of tests:\n    exports[dir] = {};\n\n    // skip the TODO directory -- these tests are expected to fail:\n    if (dir === 'todo') {\n        return;\n    }\n\n    // otherwise create a test for each file in this group:\n    FS.readdirSync(Path.join(dirsPath, dir)).forEach(function (file) {\n        createTest(file, dir);\n    });\n});\n"]}