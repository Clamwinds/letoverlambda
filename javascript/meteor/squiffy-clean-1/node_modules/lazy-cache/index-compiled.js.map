{"version":3,"sources":["index.js"],"names":[],"mappings":"AAAA,YAAY;;;;;;;;;;;;;;;;;;AAAC,AAkBb,SAAS,SAAS,CAAC,EAAE,EAAE;AACrB,MAAI,KAAK,GAAG,EAAE,CAAC;AACf,MAAI,KAAK,GAAG,SAAR,KAAK,CAAY,GAAG,EAAE,IAAI,EAAE;AAC9B,QAAI,GAAG,IAAI,IAAI,SAAS,CAAC,GAAG,CAAC;;;AAAC,AAG9B,QAAI,OAAO,CAAC,GAAG,CAAC,MAAM,KAAK,MAAM,IAAI,OAAO,CAAC,GAAG,CAAC,MAAM,KAAK,IAAI,EAAE;AAChE,WAAK,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;KACvB;;AAED,UAAM,CAAC,cAAc,CAAC,KAAK,EAAE,IAAI,EAAE;AACjC,gBAAU,EAAE,IAAI;AAChB,kBAAY,EAAE,IAAI;AAClB,SAAG,EAAE,MAAM;KACZ,CAAC,CAAC;;AAEH,aAAS,MAAM,GAAG;AAChB,UAAI,KAAK,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE;AAC9B,eAAO,KAAK,CAAC,IAAI,CAAC,CAAC;OACpB;AACD,aAAQ,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAE;KAChC;AACD,WAAO,MAAM,CAAC;GACf,CAAC;AACF,SAAO,KAAK,CAAC;CACd;;;;;;;;;AAAA,AASD,SAAS,SAAS,CAAC,GAAG,EAAE;AACtB,MAAI,GAAG,CAAC,MAAM,KAAK,CAAC,EAAE;AACpB,WAAO,GAAG,CAAC,WAAW,EAAE,CAAC;GAC1B;AACD,KAAG,GAAG,GAAG,CAAC,OAAO,CAAC,kBAAkB,EAAE,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC;AACxD,SAAO,GAAG,CAAC,OAAO,CAAC,eAAe,EAAE,UAAS,CAAC,EAAE,EAAE,EAAE;AAClD,WAAO,EAAE,CAAC,WAAW,EAAE,CAAC;GACzB,CAAC,CAAC;CACJ;;;;;;AAAA,AAMD,MAAM,CAAC,OAAO,GAAG,SAAS,CAAC","file":"index-compiled.js","sourcesContent":["'use strict';\n\n/**\n * Cache results of the first function call to ensure only calling once.\n *\n * ```js\n * var utils = require('lazy-cache')(require);\n * // cache the call to `require('ansi-yellow')`\n * utils('ansi-yellow', 'yellow');\n * // use `ansi-yellow`\n * console.log(utils.yellow('this is yellow'));\n * ```\n *\n * @param  {Function} `fn` Function that will be called only once.\n * @return {Function} Function that can be called to get the cached function\n * @api public\n */\n\nfunction lazyCache(fn) {\n  var cache = {};\n  var proxy = function(mod, name) {\n    name = name || camelcase(mod);\n\n    // check both boolean and string in case `process.env` cases to string\n    if (process.env.UNLAZY === 'true' || process.env.UNLAZY === true) {\n      cache[name] = fn(mod);\n    }\n\n    Object.defineProperty(proxy, name, {\n      enumerable: true,\n      configurable: true,\n      get: getter\n    });\n\n    function getter() {\n      if (cache.hasOwnProperty(name)) {\n        return cache[name];\n      }\n      return (cache[name] = fn(mod));\n    }\n    return getter;\n  };\n  return proxy;\n}\n\n/**\n * Used to camelcase the name to be stored on the `lazy` object.\n *\n * @param  {String} `str` String containing `_`, `.`, `-` or whitespace that will be camelcased.\n * @return {String} camelcased string.\n */\n\nfunction camelcase(str) {\n  if (str.length === 1) {\n    return str.toLowerCase();\n  }\n  str = str.replace(/^[\\W_]+|[\\W_]+$/g, '').toLowerCase();\n  return str.replace(/[\\W_]+(\\w|$)/g, function(_, ch) {\n    return ch.toUpperCase();\n  });\n}\n\n/**\n * Expose `lazyCache`\n */\n\nmodule.exports = lazyCache;\n"]}