{"version":3,"sources":["replset.js"],"names":[],"mappings":"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","file":"replset-compiled.js","sourcesContent":["\"use strict\";\n\nvar inherits = require('util').inherits\n  , f = require('util').format\n  , b = require('bson')\n  , bindToCurrentDomain = require('../connection/utils').bindToCurrentDomain\n  , debugOptions = require('../connection/utils').debugOptions\n  , EventEmitter = require('events').EventEmitter\n  , Server = require('./server')\n  , ReadPreference = require('./read_preference')\n  , MongoError = require('../error')\n  , Ping = require('./strategies/ping')\n  , Session = require('./session')\n  , BasicCursor = require('../cursor')\n  , BSON = require('bson').native().BSON\n  , State = require('./replset_state')\n  , Logger = require('../connection/logger');\n\n/**\n * @fileOverview The **ReplSet** class is a class that represents a Replicaset topology and is\n * used to construct connecctions.\n *\n * @example\n * var ReplSet = require('mongodb-core').ReplSet\n *   , ReadPreference = require('mongodb-core').ReadPreference\n *   , assert = require('assert');\n *\n * var server = new ReplSet([{host: 'localhost', port: 30000}], {setName: 'rs'});\n * // Wait for the connection event\n * server.on('connect', function(server) {\n *   server.destroy();\n * });\n *\n * // Start connecting\n * server.connect();\n */\n\nvar DISCONNECTED = 'disconnected';\nvar CONNECTING = 'connecting';\nvar CONNECTED = 'connected';\nvar DESTROYED = 'destroyed';\n\n//\n// ReplSet instance id\nvar replSetId = 1;\n\n//\n// Clone the options\nvar cloneOptions = function(options) {\n  var opts = {};\n  for(var name in options) {\n    opts[name] = options[name];\n  }\n  return opts;\n}\n\n// All bson types\nvar bsonTypes = [b.Long, b.ObjectID, b.Binary, b.Code, b.DBRef, b.Symbol, b.Double, b.Timestamp, b.MaxKey, b.MinKey];\n// BSON parser\nvar bsonInstance = null;\n\n/**\n * Creates a new Replset instance\n * @class\n * @param {array} seedlist A list of seeds for the replicaset\n * @param {boolean} options.setName The Replicaset set name\n * @param {boolean} [options.secondaryOnlyConnectionAllowed=false] Allow connection to a secondary only replicaset\n * @param {number} [options.haInterval=5000] The High availability period for replicaset inquiry\n * @param {boolean} [options.emitError=false] Server will emit errors events\n * @param {Cursor} [options.cursorFactory=Cursor] The cursor factory class used for all query cursors\n * @param {number} [options.size=5] Server connection pool size\n * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled\n * @param {number} [options.keepAliveInitialDelay=0] Initial delay before TCP keep alive enabled\n * @param {boolean} [options.noDelay=true] TCP Connection no delay\n * @param {number} [options.connectionTimeout=10000] TCP Connection timeout setting\n * @param {number} [options.socketTimeout=0] TCP Socket timeout setting\n * @param {boolean} [options.singleBufferSerializtion=true] Serialize into single buffer, trade of peak memory for serialization speed\n * @param {boolean} [options.ssl=false] Use SSL for connection\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n * @param {Buffer} [options.ca] SSL Certificate store binary buffer\n * @param {Buffer} [options.cert] SSL Certificate binary buffer\n * @param {Buffer} [options.key] SSL Key file binary buffer\n * @param {string} [options.passphrase] SSL Certificate pass phrase\n * @param {boolean} [options.rejectUnauthorized=true] Reject unauthorized server certificates\n * @param {boolean} [options.promoteLongs=true] Convert Long values from the db into Numbers if they fit into 53 bits\n * @param {number} [options.pingInterval=5000] Ping interval to check the response time to the different servers\n * @param {number} [options.acceptableLatency=250] Acceptable latency for selecting a server for reading (in milliseconds)\n * @return {ReplSet} A cursor instance\n * @fires ReplSet#connect\n * @fires ReplSet#ha\n * @fires ReplSet#joined\n * @fires ReplSet#left\n */\nvar ReplSet = function(seedlist, options) {\n  var self = this;\n  options = options || {};\n  // Clone the options\n  options = cloneOptions(options);\n\n  // Validate seedlist\n  if(!Array.isArray(seedlist)) throw new MongoError(\"seedlist must be an array\");\n  // Validate list\n  if(seedlist.length == 0) throw new MongoError(\"seedlist must contain at least one entry\");\n  // Validate entries\n  seedlist.forEach(function(e) {\n    if(typeof e.host != 'string' || typeof e.port != 'number')\n      throw new MongoError(\"seedlist entry must contain a host and port\");\n  });\n\n  // Add event listener\n  EventEmitter.call(this);\n\n  // Set the bson instance\n  bsonInstance = bsonInstance == null ? new BSON(bsonTypes) : bsonInstance;\n\n  // Internal state hash for the object\n  this.s = {\n      options: options\n    // Logger instance\n    , logger: Logger('ReplSet', options)\n    // Uniquely identify the replicaset instance\n    , id: replSetId++\n    // Index\n    , index: 0\n    // Ha Index\n    , haId: 0\n    // Current credentials used for auth\n    , credentials: []\n    // Factory overrides\n    , Cursor: options.cursorFactory || BasicCursor\n    // BSON Parser, ensure we have a single instance\n    , bsonInstance: bsonInstance\n    // Pick the right bson parser\n    , bson: options.bson ? options.bson : bsonInstance\n    // Special replicaset options\n    , secondaryOnlyConnectionAllowed: typeof options.secondaryOnlyConnectionAllowed == 'boolean'\n    ? options.secondaryOnlyConnectionAllowed : false\n    , haInterval: options.haInterval || 10000\n    // Are we running in debug mode\n    , debug: typeof options.debug == 'boolean' ? options.debug : false\n    // The replicaset name\n    , setName: options.setName\n    // Swallow or emit errors\n    , emitError: typeof options.emitError == 'boolean' ? options.emitError : false\n    // Grouping tag used for debugging purposes\n    , tag: options.tag\n    // Do we have a not connected handler\n    , disconnectHandler: options.disconnectHandler\n    // Currently connecting servers\n    , connectingServers: {}\n    // Contains any alternate strategies for picking\n    , readPreferenceStrategies: {}\n    // Auth providers\n    , authProviders: {}\n    // All the servers\n    , disconnectedServers: []\n    // Initial connection servers\n    , initialConnectionServers: []\n    // High availability process running\n    , highAvailabilityProcessRunning: false\n    // Full setup\n    , fullsetup: false\n    // All servers accounted for (used for testing)\n    , all: false\n    // Seedlist\n    , seedlist: seedlist\n    // Authentication in progress\n    , authInProgress: false\n    // Servers added while auth in progress\n    , authInProgressServers: []\n    // Minimum heartbeat frequency used if we detect a server close\n    , minHeartbeatFrequencyMS: 500\n    // stores high availability timer to allow efficient destroy\n    , haTimer : null\n  }\n\n  // Add bson parser to options\n  options.bson = this.s.bson;\n  // Set up the connection timeout for the options\n  options.connectionTimeout = options.connectionTimeout || 10000;\n\n  // Replicaset state\n  var replState = new State(this, {\n      id: this.s.id, setName: this.s.setName\n    , connectingServers: this.s.connectingServers\n    , secondaryOnlyConnectionAllowed: this.s.secondaryOnlyConnectionAllowed\n  });\n\n  // Add Replicaset state to our internal state\n  this.s.replState = replState;\n\n  // BSON property (find a server and pass it along)\n  Object.defineProperty(this, 'bson', {\n    enumerable: true, get: function() {\n      var servers = self.s.replState.getAll();\n      return servers.length > 0 ? servers[0].bson : null;\n    }\n  });\n\n  Object.defineProperty(this, 'id', {\n    enumerable:true, get: function() { return self.s.id; }\n  });\n\n  Object.defineProperty(this, 'haInterval', {\n    enumerable:true, get: function() { return self.s.haInterval; }\n  });\n\n  Object.defineProperty(this, 'state', {\n    enumerable:true, get: function() { return self.s.replState; }\n  });\n\n  //\n  // Debug options\n  if(self.s.debug) {\n    // Add access to the read Preference Strategies\n    Object.defineProperty(this, 'readPreferenceStrategies', {\n      enumerable: true, get: function() { return self.s.readPreferenceStrategies; }\n    });\n  }\n\n  Object.defineProperty(this, 'type', {\n    enumerable:true, get: function() { return 'replset'; }\n  });\n\n  // Add the ping strategy for nearest\n  this.addReadPreferenceStrategy('nearest', new Ping(options));\n}\n\ninherits(ReplSet, EventEmitter);\n\n//\n// Plugin methods\n//\n\n/**\n * Add custom read preference strategy\n * @method\n * @param {string} name Name of the read preference strategy\n * @param {object} strategy Strategy object instance\n */\nReplSet.prototype.addReadPreferenceStrategy = function(name, func) {\n  this.s.readPreferenceStrategies[name] = func;\n}\n\n/**\n * Add custom authentication mechanism\n * @method\n * @param {string} name Name of the authentication mechanism\n * @param {object} provider Authentication object instance\n */\nReplSet.prototype.addAuthProvider = function(name, provider) {\n  if(this.s.authProviders == null) this.s.authProviders = {};\n  this.s.authProviders[name] = provider;\n}\n\n/**\n * Name of BSON parser currently used\n * @method\n * @return {string}\n */\nReplSet.prototype.parserType = function() {\n  if(this.s.bson.serialize.toString().indexOf('[native code]') != -1)\n    return 'c++';\n  return 'js';\n}\n\n/**\n * Execute a command\n * @method\n * @param {string} type Type of BSON parser to use (c++ or js)\n */\nReplSet.prototype.setBSONParserType = function(type) {\n  var nBSON = null;\n\n  if(type == 'c++') {\n    nBSON = require('bson').native().BSON;\n  } else if(type == 'js') {\n    nBSON = require('bson').pure().BSON;\n  } else {\n    throw new MongoError(f(\"% parser not supported\", type));\n  }\n\n  this.s.options.bson = new nBSON(bsonTypes);\n}\n\n/**\n * Returns the last known ismaster document for this server\n * @method\n * @return {object}\n */\nReplSet.prototype.lastIsMaster = function() {\n  return this.s.replState.lastIsMaster();\n}\n\n/**\n * Get connection\n * @method\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @return {Connection}\n */\nReplSet.prototype.getConnection = function(options) {\n  // Ensure we have no options\n  options = options || {};\n  // Pick the right server based on readPreference\n  var server = pickServer(this, this.s, options.readPreference);\n  if(server == null) return null;\n  // Return connection\n  return server.getConnection();\n}\n\n/**\n * All raw connections\n * @method\n * @return {Connection[]}\n */\nReplSet.prototype.connections = function() {\n  return this.s.replState.getAllConnections();\n}\n\n/**\n * Get server\n * @method\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @return {Server}\n */\nReplSet.prototype.getServer = function(options) {\n  // Ensure we have no options\n  options = options || {};\n  // Pick the right server based on readPreference\n  return pickServer(this, this.s, options.readPreference);\n}\n\n/**\n * Perform one or more remove operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {{object}|{Long}} cmd Can be either a command returning a cursor or a cursorId\n * @param {object} [options.batchSize=0] Batchsize for the operation\n * @param {array} [options.documents=[]] Initial documents list for cursor\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {opResultCallback} callback A callback function\n */\nReplSet.prototype.cursor = function(ns, cmd, cursorOptions) {\n  cursorOptions = cursorOptions || {};\n  var FinalCursor = cursorOptions.cursorFactory || this.s.Cursor;\n  return new FinalCursor(this.s.bson, ns, cmd, cursorOptions, this, this.s.options);\n}\n\n//\n// Execute write operation\nvar executeWriteOperation = function(self, op, ns, ops, options, callback) {\n  if(typeof options == 'function') {\n    callback = options;\n    options = {};\n  }\n\n  var server = null;\n  // Ensure we have no options\n  options = options || {};\n  // Get a primary\n  try {\n    server = pickServer(self, self.s, ReadPreference.primary);\n    if(self.s.debug) self.emit('pickedServer', ReadPreference.primary, server);\n  } catch(err) {\n    return callback(err);\n  }\n\n  // No server returned we had an error\n  if(server == null) return callback(new MongoError(\"no server found\"));\n\n  // Handler\n  var handler = function(err, r) {\n    // We have a no master error, immediately refresh the view of the replicaset\n    if(notMasterError(r) || notMasterError(err)) replicasetInquirer(self, self.s, true)();\n    // Return the result\n    callback(err, r);\n  }\n\n  // Add operationId if existing\n  if(callback.operationId) handler.operationId = callback.operationId;\n  // Execute the command\n  server[op](ns, ops, options, handler);\n}\n\n/**\n * Execute a command\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {object} cmd The command hash\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {Connection} [options.connection] Specify connection object to execute command against\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {opResultCallback} callback A callback function\n */\nReplSet.prototype.command = function(ns, cmd, options, callback) {\n  if(typeof options == 'function') callback = options, options = {};\n  if(this.s.replState.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));\n\n  var server = null;\n  var self = this;\n  // Ensure we have no options\n  options = options || {};\n\n  // Topology is not connected, save the call in the provided store to be\n  // Executed at some point when the handler deems it's reconnected\n  if(!this.isConnected(options) && this.s.disconnectHandler != null) {\n    callback = bindToCurrentDomain(callback);\n    return this.s.disconnectHandler.add('command', ns, cmd, options, callback);\n  }\n\n  // We need to execute the command on all servers\n  if(options.onAll) {\n    var servers = this.s.replState.getAll();\n    var count = servers.length;\n    var cmdErr = null;\n\n    for(var i = 0; i < servers.length; i++) {\n      servers[i].command(ns, cmd, options, function(err, r) {\n        count = count - 1;\n        // Finished executing command\n        if(count == 0) {\n          // Was it a logout command clear any credentials\n          if(cmd.logout) clearCredentials(self.s, ns);\n          // We have a no master error, immediately refresh the view of the replicaset\n          if(notMasterError(r) || notMasterError(err)) replicasetInquirer(self, self.s, true)();\n          // Return the error\n          callback(err, r);\n        }\n      });\n    }\n\n    return;\n  }\n\n  // Pick the right server based on readPreference\n  try {\n    server = pickServer(self, self.s, options.writeConcern ? ReadPreference.primary : options.readPreference);\n    if(self.s.debug) self.emit('pickedServer', options.writeConcern ? ReadPreference.primary : options.readPreference, server);\n  } catch(err) {\n    return callback(err);\n  }\n\n  // No server returned we had an error\n  if(server == null) return callback(new MongoError(\"no server found\"));\n  // Execute the command\n  server.command(ns, cmd, options, function(err, r) {\n    // Was it a logout command clear any credentials\n    if(cmd.logout) clearCredentials(self.s, ns);\n    // We have a no master error, immediately refresh the view of the replicaset\n    if(notMasterError(r) || notMasterError(err)) {\n      replicasetInquirer(self, self.s, true)();\n    }\n    // Return the error\n    callback(err, r);\n  });\n}\n\n/**\n * Perform one or more remove operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of removes\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {opResultCallback} callback A callback function\n */\nReplSet.prototype.remove = function(ns, ops, options, callback) {\n  if(typeof options == 'function') callback = options, options = {};\n  if(this.s.replState.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));\n  // Topology is not connected, save the call in the provided store to be\n  // Executed at some point when the handler deems it's reconnected\n  if(!this.isConnected() && this.s.disconnectHandler != null) {\n    callback = bindToCurrentDomain(callback);\n    return this.s.disconnectHandler.add('remove', ns, ops, options, callback);\n  }\n\n  executeWriteOperation(this, 'remove', ns, ops, options, callback);\n}\n\n/**\n * Insert one or more documents\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of documents to insert\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {opResultCallback} callback A callback function\n */\nReplSet.prototype.insert = function(ns, ops, options, callback) {\n  if(typeof options == 'function') callback = options, options = {};\n  if(this.s.replState.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));\n  // Topology is not connected, save the call in the provided store to be\n  // Executed at some point when the handler deems it's reconnected\n  if(!this.isConnected() && this.s.disconnectHandler != null) {\n    callback = bindToCurrentDomain(callback);\n    return this.s.disconnectHandler.add('insert', ns, ops, options, callback);\n  }\n\n  executeWriteOperation(this, 'insert', ns, ops, options, callback);\n}\n\n/**\n * Perform one or more update operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of updates\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {opResultCallback} callback A callback function\n */\nReplSet.prototype.update = function(ns, ops, options, callback) {\n  if(typeof options == 'function') callback = options, options = {};\n  if(this.s.replState.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));\n  // Topology is not connected, save the call in the provided store to be\n  // Executed at some point when the handler deems it's reconnected\n  if(!this.isConnected() && this.s.disconnectHandler != null) {\n    callback = bindToCurrentDomain(callback);\n    return this.s.disconnectHandler.add('update', ns, ops, options, callback);\n  }\n\n  executeWriteOperation(this, 'update', ns, ops, options, callback);\n}\n\n/**\n * Authenticate using a specified mechanism\n * @method\n * @param {string} mechanism The Auth mechanism we are invoking\n * @param {string} db The db we are invoking the mechanism against\n * @param {...object} param Parameters for the specific mechanism\n * @param {authResultCallback} callback A callback function\n */\nReplSet.prototype.auth = function(mechanism, db) {\n  var allArgs = Array.prototype.slice.call(arguments, 0).slice(0);\n  var self = this;\n  var args = Array.prototype.slice.call(arguments, 2);\n  var callback = args.pop();\n\n  // If we don't have the mechanism fail\n  if(this.s.authProviders[mechanism] == null && mechanism != 'default')\n    throw new MongoError(f(\"auth provider %s does not exist\", mechanism));\n\n  // Authenticate against all the servers\n  var servers = this.s.replState.getAll().slice(0);\n  var count = servers.length;\n  // Correct authentication\n  var authenticated = true;\n  var authErr = null;\n  // Set auth in progress\n  this.s.authInProgress = true;\n\n  // Authenticate against all servers\n  while(servers.length > 0) {\n    var server = servers.shift();\n\n    // Arguments without a callback\n    var argsWithoutCallback = [mechanism, db].concat(args.slice(0));\n    // Create arguments\n    var finalArguments = argsWithoutCallback.concat([function(err, r) {\n      count = count - 1;\n      if(err) authErr = err;\n      if(!r) authenticated = false;\n\n      // We are done\n      if(count == 0) {\n        // We have more servers that are not authenticated, let's authenticate\n        if(self.s.authInProgressServers.length > 0) {\n          self.s.authInProgressServers = [];\n          return self.auth.apply(self, [mechanism, db].concat(args).concat([callback]));\n        }\n\n        // Auth is done\n        self.s.authInProgress = false;\n        // Add successful credentials\n        if(authErr == null) addCredentials(self.s, db, argsWithoutCallback);\n        // Return the auth error\n        if(authErr) return callback(authErr, false);\n        // Successfully authenticated session\n        callback(null, new Session({}, self));\n      }\n    }]);\n\n    // Execute the auth\n    server.auth.apply(server, finalArguments);\n  }\n}\n\nReplSet.prototype.state = function() {\n  return this.s.replState.state;\n}\n\n/**\n * Ensure single socket connections to arbiters and hidden servers\n * @method\n */\nvar handleIsmaster = function(self) {\n  return function(ismaster, _server) {\n    if(ismaster.arbiterOnly) {\n      _server.s.options.size = 1;\n    } else if(ismaster.hidden) {\n      _server.s.options.size = 1;\n    }\n  }\n}\n\n/**\n * Initiate server connect\n * @method\n */\nReplSet.prototype.connect = function(_options) {\n  var self = this;\n  // Start replicaset inquiry process\n  setHaTimer(self, self.s);\n  // Additional options\n  if(_options) for(var name in _options) this.s.options[name] = _options[name];\n\n  // Set the state as connecting\n  this.s.replState.state = CONNECTING;\n\n  // No fullsetup reached\n  this.s.fullsetup = false;\n\n  // For all entries in the seedlist build a server instance\n  this.s.seedlist.forEach(function(e) {\n    // Clone options\n    var opts = cloneOptions(self.s.options);\n    // Add host and port\n    opts.host = e.host;\n    opts.port = e.port;\n    opts.reconnect = false;\n    opts.readPreferenceStrategies = self.s.readPreferenceStrategies;\n    opts.emitError = true;\n    // Add a reserved connection for monitoring\n    opts.size = opts.size + 1;\n    opts.monitoring = true;\n    // Set up tags if any\n    if(self.s.tag) opts.tag = self.s.tag;\n    // Share the auth store\n    opts.authProviders = self.s.authProviders;\n    // Create a new Server\n    var server = new Server(opts);\n    // Handle the ismaster\n    server.on('ismaster', handleIsmaster(self));\n    // Add to list of disconnected servers\n    self.s.disconnectedServers.push(server);\n    // Add to list of inflight Connections\n    self.s.initialConnectionServers.push(server);\n  });\n\n  // Attempt to connect to all the servers\n  while(this.s.disconnectedServers.length > 0) {\n    // Get the server\n    var server = self.s.disconnectedServers.shift();\n\n    // Set up the event handlers\n    server.once('error', errorHandlerTemp(self, self.s, 'error'));\n    server.once('close', errorHandlerTemp(self, self.s, 'close'));\n    server.once('timeout', errorHandlerTemp(self, self.s, 'timeout'));\n    server.once('connect', connectHandler(self, self.s));\n\n    // Ensure we schedule the opening of new socket\n    // on separate ticks of the event loop\n    var execute = function(_server) {\n      // Attempt to connect\n      process.nextTick(function() {\n        _server.connect();\n      });\n    }\n\n    execute(server);\n  }\n}\n\n/**\n * Figure out if the server is connected\n * @method\n * @return {boolean}\n */\nReplSet.prototype.isConnected = function(options) {\n  options = options || {};\n  // If we specified a read preference check if we are connected to something\n  // than can satisfy this\n  if(options.readPreference\n    && options.readPreference.equals(ReadPreference.secondary))\n    return this.s.replState.isSecondaryConnected();\n\n  if(options.readPreference\n    && options.readPreference.equals(ReadPreference.primary))\n    return this.s.replState.isSecondaryConnected() || this.s.replState.isPrimaryConnected();\n\n  if(options.readPreference\n    && options.readPreference.equals(ReadPreference.primaryPreferred))\n    return this.s.replState.isSecondaryConnected() || this.s.replState.isPrimaryConnected();\n\n  if(options.readPreference\n    && options.readPreference.equals(ReadPreference.secondaryPreferred))\n    return this.s.replState.isSecondaryConnected() || this.s.replState.isPrimaryConnected();\n\n  if(this.s.secondaryOnlyConnectionAllowed\n    && this.s.replState.isSecondaryConnected()) return true;\n\n  return this.s.replState.isPrimaryConnected();\n}\n\n/**\n * Figure out if the replicaset instance was destroyed by calling destroy\n * @method\n * @return {boolean}\n */\nReplSet.prototype.isDestroyed = function() {\n  return this.s.replState.state == DESTROYED;\n}\n\n/**\n * Destroy the server connection\n * @method\n */\nReplSet.prototype.destroy = function(emitClose) {\n  var self = this;\n  if(this.s.logger.isInfo()) this.s.logger.info(f('[%s] destroyed', this.s.id));\n  this.s.replState.state = DESTROYED;\n\n  // Emit close\n  if(emitClose && self.listeners('close').length > 0) self.emit('close', self);\n\n  // Destroy state\n  this.s.replState.destroy();\n\n  // Clear out any listeners\n  var events = ['timeout', 'error', 'close', 'joined', 'left'];\n  events.forEach(function(e) {\n    self.removeAllListeners(e);\n  });\n\n  clearTimeout(self.s.haTimer);\n}\n\n/**\n * A replset connect event, used to verify that the connection is up and running\n *\n * @event ReplSet#connect\n * @type {ReplSet}\n */\n\n/**\n * The replset high availability event\n *\n * @event ReplSet#ha\n * @type {function}\n * @param {string} type The stage in the high availability event (start|end)\n * @param {boolean} data.norepeat This is a repeating high availability process or a single execution only\n * @param {number} data.id The id for this high availability request\n * @param {object} data.state An object containing the information about the current replicaset\n */\n\n/**\n * A server member left the replicaset\n *\n * @event ReplSet#left\n * @type {function}\n * @param {string} type The type of member that left (primary|secondary|arbiter)\n * @param {Server} server The server object that left\n */\n\n/**\n * A server member joined the replicaset\n *\n * @event ReplSet#joined\n * @type {function}\n * @param {string} type The type of member that joined (primary|secondary|arbiter)\n * @param {Server} server The server object that joined\n */\n\n//\n// Inquires about state changes\n//\n\n// Add the new credential for a db, removing the old\n// credential from the cache\nvar addCredentials = function(s, db, argsWithoutCallback) {\n  // Remove any credentials for the db\n  clearCredentials(s, db + \".dummy\");\n  // Add new credentials to list\n  s.credentials.push(argsWithoutCallback);\n}\n\n// Clear out credentials for a namespace\nvar clearCredentials = function(s, ns) {\n  var db = ns.split('.')[0];\n  var filteredCredentials = [];\n\n  // Filter out all credentials for the db the user is logging out off\n  for(var i = 0; i < s.credentials.length; i++) {\n    if(s.credentials[i][1] != db) filteredCredentials.push(s.credentials[i]);\n  }\n\n  // Set new list of credentials\n  s.credentials = filteredCredentials;\n}\n\n//\n// Filter serves by tags\nvar filterByTags = function(readPreference, servers) {\n  if(readPreference.tags == null) return servers;\n  var filteredServers = [];\n  var tagsArray = !Array.isArray(readPreference.tags) ? [tags] : tags;\n\n  // Iterate over the tags\n  for(var j = 0; j < tagsArray.length; j++) {\n    var tags = tagsArray[j];\n\n    // Iterate over all the servers\n    for(var i = 0; i < servers.length; i++) {\n      var serverTag = servers[i].lastIsMaster().tags || {};\n      // Did we find the a matching server\n      var found = true;\n      // Check if the server is valid\n      for(var name in tags) {\n        if(serverTag[name] != tags[name]) found = false;\n      }\n\n      // Add to candidate list\n      if(found) {\n        filteredServers.push(servers[i]);\n      }\n    }\n\n    // We found servers by the highest priority\n    if(found) break;\n  }\n\n  // Returned filtered servers\n  return filteredServers;\n}\n\n//\n// Pick a server based on readPreference\nvar pickServer = function(self, s, readPreference) {\n  // If no read Preference set to primary by default\n  readPreference = readPreference || ReadPreference.primary;\n\n  // Do we have a custom readPreference strategy, use it\n  if(s.readPreferenceStrategies != null && s.readPreferenceStrategies[readPreference.preference] != null) {\n    if(s.readPreferenceStrategies[readPreference.preference] == null) throw new MongoError(f(\"cannot locate read preference handler for %s\", readPreference.preference));\n    var server = s.readPreferenceStrategies[readPreference.preference].pickServer(s.replState, readPreference);\n    if(s.debug) self.emit('pickedServer', readPreference, server);\n    return server;\n  }\n\n  // Filter out any hidden secondaries\n  var secondaries = s.replState.secondaries.filter(function(server) {\n    if(server.lastIsMaster().hidden) return false;\n    return true;\n  });\n\n  // Check if we can satisfy and of the basic read Preferences\n  if(readPreference.equals(ReadPreference.secondary)\n    && secondaries.length == 0)\n      throw new MongoError(\"no secondary server available\");\n\n  if(readPreference.equals(ReadPreference.secondaryPreferred)\n      && secondaries.length == 0\n      && s.replState.primary == null)\n    throw new MongoError(\"no secondary or primary server available\");\n\n  if(readPreference.equals(ReadPreference.primary)\n    && s.replState.primary == null)\n      throw new MongoError(\"no primary server available\");\n\n  // Secondary\n  if(readPreference.equals(ReadPreference.secondary)) {\n    s.index = (s.index + 1) % secondaries.length;\n    return secondaries[s.index];\n  }\n\n  // Secondary preferred\n  if(readPreference.equals(ReadPreference.secondaryPreferred)) {\n    if(secondaries.length > 0) {\n      // Apply tags if present\n      var servers = filterByTags(readPreference, secondaries);\n      // If have a matching server pick one otherwise fall through to primary\n      if(servers.length > 0) {\n        s.index = (s.index + 1) % servers.length;\n        return servers[s.index];\n      }\n    }\n\n    return s.replState.primary;\n  }\n\n  // Primary preferred\n  if(readPreference.equals(ReadPreference.primaryPreferred)) {\n    if(s.replState.primary) return s.replState.primary;\n\n    if(secondaries.length > 0) {\n      // Apply tags if present\n      var servers = filterByTags(readPreference, secondaries);\n      // If have a matching server pick one otherwise fall through to primary\n      if(servers.length > 0) {\n        s.index = (s.index + 1) % servers.length;\n        return servers[s.index];\n      }\n\n      // Throw error a we have not valid secondary or primary servers\n      throw new MongoError(\"no secondary or primary server available\");\n    }\n  }\n\n  // Return the primary\n  return s.replState.primary;\n}\n\nvar setHaTimer = function(self, state) {\n  // all haTimers are set to to repeat, so we pass norepeat false\n  self.s.haTimer = setTimeout(replicasetInquirer(self, state, false), state.haInterval);\n  return self.s.haTimer;\n}\n\nvar haveAvailableServers = function(state) {\n  if(state.disconnectedServers.length == 0\n    && state.replState.secondaries.length == 0\n    && state.replState.arbiters.length == 0\n    && state.replState.primary == null) return false;\n    return true;\n}\n\nvar replicasetInquirer = function(self, state, norepeat) {\n  return function() {\n    if(state.replState.state == DESTROYED) return\n    // We have no connections we need to reseed the disconnected list\n    if(!haveAvailableServers(state)) {\n      // For all entries in the seedlist build a server instance\n      state.disconnectedServers = state.seedlist.map(function(e) {\n        // Clone options\n        var opts = cloneOptions(state.options);\n        // Add host and port\n        opts.host = e.host;\n        opts.port = e.port;\n        opts.reconnect = false;\n        opts.readPreferenceStrategies = state.readPreferenceStrategies;\n        opts.emitError = true;\n        // Add a reserved connection for monitoring\n        opts.size = opts.size + 1;\n        opts.monitoring = true;\n        // Set up tags if any\n        if(state.tag) opts.tag = stage.tag;\n        // Share the auth store\n        opts.authProviders = state.authProviders;\n        // Create a new Server\n        var server = new Server(opts);\n        // Handle the ismaster\n        server.on('ismaster', handleIsmaster(self));\n        return server;\n      });\n    }\n\n    // Process already running don't rerun\n    if(state.highAvailabilityProcessRunning) return;\n    // Started processes\n    state.highAvailabilityProcessRunning = true;\n    if(state.logger.isInfo()) state.logger.info(f('[%s] monitoring process running %s', state.id, JSON.stringify(state.replState)));\n\n    // Unique HA id to identify the current look running\n    var localHaId = state.haId++;\n\n    // Clean out any failed connection attempts\n    state.connectingServers = {};\n\n    // Controls if we are doing a single inquiry or repeating\n    norepeat = typeof norepeat == 'boolean' ? norepeat : false;\n\n    // If we have a primary and a disconnect handler, execute\n    // buffered operations\n    if(state.replState.isPrimaryConnected() && state.replState.isSecondaryConnected() && state.disconnectHandler) {\n      state.disconnectHandler.execute();\n    }\n\n    // Emit replicasetInquirer\n    self.emit('ha', 'start', {norepeat: norepeat, id: localHaId, state: state.replState ? state.replState.toJSON() : {}});\n\n    // Let's process all the disconnected servers\n    while(state.disconnectedServers.length > 0) {\n      // Get the first disconnected server\n      var server = state.disconnectedServers.shift();\n      if(state.logger.isInfo()) state.logger.info(f('[%s] monitoring attempting to connect to %s', state.id, server.lastIsMaster() ? server.lastIsMaster().me : server.name));\n      // Set up the event handlers\n      server.once('error', errorHandlerTemp(self, state, 'error'));\n      server.once('close', errorHandlerTemp(self, state, 'close'));\n      server.once('timeout', errorHandlerTemp(self, state, 'timeout'));\n      server.once('connect', connectHandler(self, state));\n\n      // Ensure we schedule the opening of new socket\n      // on separate ticks of the event loop\n      var execute = function(_server) {\n        // Attempt to connect\n        process.nextTick(function() {\n          _server.connect();\n        });\n      }\n\n      execute(server);\n    }\n\n    // Cleanup state (removed disconnected servers)\n    state.replState.clean();\n\n    // We need to query all servers\n    var servers = state.replState.getAll({includeArbiters:true});\n    var serversLeft = servers.length;\n\n    // If no servers and we are not destroyed keep pinging\n    if(servers.length == 0 && state.replState.state == CONNECTED) {\n      // Emit ha process end\n      self.emit('ha', 'end', {norepeat: norepeat, id: localHaId, state: state.replState ? state.replState.toJSON() : {}});\n      // Ended highAvailabilityProcessRunning\n      state.highAvailabilityProcessRunning = false;\n      // Restart ha process\n      if(!norepeat) setHaTimer(self, state);\n      return;\n    }\n\n    //\n    // ismaster for Master server\n    var primaryIsMaster = null;\n\n    // Kill the server connection if it hangs\n    var timeoutServer = function(_server) {\n      return setTimeout(function() {\n        if(_server.isConnected()) {\n          _server.connections()[0].connection.destroy();\n        }\n      }, self.s.options.connectionTimeout);\n    }\n\n    //\n    // Inspect a specific servers ismaster\n    var inspectServer = function(server) {\n      if(state.replState.state == DESTROYED) return;\n      // Did we get a server\n      if(server && server.isConnected()) {\n        // Get the timeout id\n        var timeoutId = timeoutServer(server);\n        // Execute ismaster\n        server.command('admin.$cmd', { ismaster:true },  { monitoring:true }, function(err, r) {\n          // Clear out the timeoutServer\n          clearTimeout(timeoutId);\n\n          // If the state was destroyed\n          if(state.replState.state == DESTROYED) return;\n\n          // Count down the number of servers left\n          serversLeft = serversLeft - 1;\n\n          // If we have an error but still outstanding server request return\n          if(err && serversLeft > 0) return;\n\n          // We had an error and have no more servers to inspect, schedule a new check\n          if(err && serversLeft == 0) {\n            self.emit('ha', 'end', {norepeat: norepeat, id: localHaId, state: state.replState ? state.replState.toJSON() : {}});\n            // Ended highAvailabilityProcessRunnfing\n            state.highAvailabilityProcessRunning = false;\n            // Return the replicasetInquirer\n            if(!norepeat) setHaTimer(self, state);\n            return;\n          }\n\n          // Let all the read Preferences do things to the servers\n          var rPreferencesCount = Object.keys(state.readPreferenceStrategies).length;\n\n          // Handle the primary\n          var ismaster = r.result;\n          if(state.logger.isDebug()) state.logger.debug(f('[%s] monitoring process ismaster %s', state.id, JSON.stringify(ismaster)));\n\n          // Update the replicaset state\n          state.replState.update(ismaster, server);\n\n          //\n          // Process hosts list from ismaster under two conditions\n          // 1. Ismaster result is from primary\n          // 2. There is no primary and the ismaster result is from a non-primary\n          if(err == null\n            && (ismaster.ismaster || (!state.primary))\n            && Array.isArray(ismaster.hosts)) {\n            // Hosts to process\n            var hosts = ismaster.hosts;\n            // Add arbiters to list of hosts if we have any\n            if(Array.isArray(ismaster.arbiters)) {\n              hosts = hosts.concat(ismaster.arbiters.map(function(x) {\n                return {host: x, arbiter:true};\n              }));\n            }\n\n            if(Array.isArray(ismaster.passives)) hosts = hosts.concat(ismaster.passives);\n            // Process all the hsots\n            processHosts(self, state, hosts);\n          } else if(err == null && !Array.isArray(ismaster.hosts)) {\n            server.destroy();\n          }\n\n          // No read Preferences strategies\n          if(rPreferencesCount == 0) {\n            // Don't schedule a new inquiry\n            if(serversLeft > 0) return;\n            // Emit ha process end\n            self.emit('ha', 'end', {norepeat: norepeat, id: localHaId, state: state.replState ? state.replState.toJSON() : {}});\n            // Ended highAvailabilityProcessRunning\n            state.highAvailabilityProcessRunning = false;\n            // Let's keep monitoring\n            if(!norepeat) setHaTimer(self, state);\n            return;\n          }\n\n          // No servers left to query, execute read preference strategies\n          if(serversLeft == 0) {\n            // Go over all the read preferences\n            for(var name in state.readPreferenceStrategies) {\n              state.readPreferenceStrategies[name].ha(self, state.replState, function() {\n                rPreferencesCount = rPreferencesCount - 1;\n\n                if(rPreferencesCount == 0) {\n                  // Add any new servers in primary ismaster\n                  if(err == null\n                    && ismaster.ismaster\n                    && Array.isArray(ismaster.hosts)) {\n                      processHosts(self, state, ismaster.hosts);\n                  }\n\n                  // Emit ha process end\n                  self.emit('ha', 'end', {norepeat: norepeat, id: localHaId, state: state.replState ? state.replState.toJSON() : {}});\n                  // Ended highAvailabilityProcessRunning\n                  state.highAvailabilityProcessRunning = false;\n                  // Let's keep monitoring\n                  if(!norepeat) setHaTimer(self, state);\n                  return;\n                }\n              });\n            }\n          }\n        });\n      }\n    }\n\n    // Call ismaster on all servers\n    for(var i = 0; i < servers.length; i++) {\n      inspectServer(servers[i]);\n    }\n\n    // If no more initial servers and new scheduled servers to connect\n    if(state.replState.secondaries.length >= 1 && state.replState.primary != null && !state.fullsetup) {\n      state.fullsetup = true;\n      self.emit('fullsetup', self);\n    }\n\n    // If all servers are accounted for and we have not sent the all event\n    if(state.replState.primary != null && self.lastIsMaster()\n      && Array.isArray(self.lastIsMaster().hosts) && !state.all) {\n      var length = 1 + state.replState.secondaries.length;\n      // If we have all secondaries + primary\n      if(length == self.lastIsMaster().hosts.length + 1) {\n        state.all = true;\n        self.emit('all', self);\n      }\n    }\n  }\n}\n\n// Error handler for initial connect\nvar errorHandlerTemp = function(self, state, event) {\n  return function(err, server) {\n    // Log the information\n    if(state.logger.isInfo()) state.logger.info(f('[%s] server %s disconnected', state.id, server.lastIsMaster() ? server.lastIsMaster().me : server.name));\n    // Filter out any connection servers\n    state.initialConnectionServers = state.initialConnectionServers.filter(function(_server) {\n      return server.name != _server.name;\n    });\n\n    // Connection is destroyed, ignore\n    if(state.replState.state == DESTROYED) return;\n\n    // Remove any non used handlers\n    ['error', 'close', 'timeout', 'connect'].forEach(function(e) {\n      server.removeAllListeners(e);\n    })\n\n    // Push to list of disconnected servers\n    addToListIfNotExist(state.disconnectedServers, server);\n\n    // End connection operation if we have no legal replicaset state\n    if(state.initialConnectionServers == 0 && state.replState.state == CONNECTING) {\n       if((state.secondaryOnlyConnectionAllowed && !state.replState.isSecondaryConnected() && !state.replState.isPrimaryConnected())\n        || (!state.secondaryOnlyConnectionAllowed && !state.replState.isPrimaryConnected())) {\n          if(state.logger.isInfo()) state.logger.info(f('[%s] no valid seed servers in list', state.id));\n\n          if(self.listeners('error').length > 0)\n            return self.emit('error', new MongoError('no valid seed servers in list'));\n       }\n    }\n\n    // If the number of disconnected servers is equal to\n    // the number of seed servers we cannot connect\n    if(state.disconnectedServers.length == state.seedlist.length && state.replState.state == CONNECTING) {\n      if(state.emitError && self.listeners('error').length > 0) {\n        if(state.logger.isInfo()) state.logger.info(f('[%s] no valid seed servers in list', state.id));\n\n        if(self.listeners('error').length > 0)\n          self.emit('error', new MongoError('no valid seed servers in list'));\n      }\n    }\n  }\n}\n// TODO with arbiter\n//  - if connected to an arbiter, shut down all but single server connection\n\n// Connect handler\nvar connectHandler = function(self, state) {\n  return function(server) {\n    if(state.logger.isInfo()) state.logger.info(f('[%s] connected to %s', state.id, server.name));\n    // Destroyed connection\n    if(state.replState.state == DESTROYED) {\n      server.destroy(false, false);\n      return;\n    }\n\n    // Filter out any connection servers\n    state.initialConnectionServers = state.initialConnectionServers.filter(function(_server) {\n      return server.name != _server.name;\n    });\n\n    // Process the new server\n    var processNewServer = function() {\n      // Discover any additional servers\n      var ismaster = server.lastIsMaster();\n\n      // Are we an arbiter, restrict number of connections to\n      // one single connection\n      if(ismaster.arbiterOnly) {\n        server.capConnections(1);\n      }\n\n      // Deal with events\n      var events = ['error', 'close', 'timeout', 'connect', 'message'];\n      // Remove any non used handlers\n      events.forEach(function(e) {\n        server.removeAllListeners(e);\n      })\n\n      // Clean up\n      delete state.connectingServers[server.name];\n      // Update the replicaset state, destroy if not added\n      if(!state.replState.update(ismaster, server)) {\n        // Destroy the server instance\n        server.destroy();\n\n        // No more candiate servers\n        if(state.state == CONNECTING && state.initialConnectionServers.length == 0\n          && state.replState.primary == null && state.replState.secondaries.length == 0) {\n            return self.emit('error', new MongoError(\"no replicaset members found in seedlist\"));\n        }\n\n        return;\n      }\n\n      // Add the server handling code\n      if(server.isConnected()) {\n        server.on('error', errorHandler(self, state));\n        server.on('close', closeHandler(self, state));\n        server.on('timeout', timeoutHandler(self, state));\n      }\n\n      // Hosts to process\n      var hosts = ismaster.hosts;\n      // Add arbiters to list of hosts if we have any\n      if(Array.isArray(ismaster.arbiters)) {\n        hosts = hosts.concat(ismaster.arbiters.map(function(x) {\n          return {host: x, arbiter:true};\n        }));\n      }\n\n      if(Array.isArray(ismaster.passives)) hosts = hosts.concat(ismaster.passives);\n\n      // Add any new servers\n      processHosts(self, state, hosts);\n\n      // If have the server instance already destroy it\n      if(state.initialConnectionServers.length == 0 && Object.keys(state.connectingServers).length == 0\n        && !state.replState.isPrimaryConnected() && !state.secondaryOnlyConnectionAllowed && state.replState.state == CONNECTING) {\n        if(state.logger.isInfo()) state.logger.info(f('[%s] no primary found in replicaset', state.id));\n        self.emit('error', new MongoError(\"no primary found in replicaset\"));\n        return self.destroy();\n      }\n\n      // If no more initial servers and new scheduled servers to connect\n      if(state.replState.secondaries.length >= 1 && state.replState.primary != null && !state.fullsetup) {\n        state.fullsetup = true;\n        self.emit('fullsetup', self);\n      }\n    }\n\n    // Save up new members to be authenticated against\n    if(self.s.authInProgress) {\n      self.s.authInProgressServers.push(server);\n    }\n\n    // No credentials just process server\n    if(state.credentials.length == 0) return processNewServer();\n    // Do we have credentials, let's apply them all\n    var count = state.credentials.length;\n    // Apply the credentials\n    for(var i = 0; i < state.credentials.length; i++) {\n      server.auth.apply(server, state.credentials[i].concat([function(err, r) {\n        count = count - 1;\n        if(count == 0) processNewServer();\n      }]));\n    }\n  }\n}\n\n//\n// Detect if we need to add new servers\nvar processHosts = function(self, state, hosts) {\n  if(state.replState.state == DESTROYED) return;\n  if(Array.isArray(hosts)) {\n    // Check any hosts exposed by ismaster\n    for(var i = 0; i < hosts.length; i++) {\n      // Get the object\n      var host = hosts[i];\n      var options = {};\n\n      // Do we have an arbiter\n      if(typeof host == 'object') {\n        host = host.host;\n        options.arbiter = host.arbiter;\n      }\n\n      // If not found we need to create a new connection\n      if(!state.replState.contains(host)) {\n        if(state.connectingServers[host] == null && !inInitialConnectingServers(self, state, host)) {\n          if(state.logger.isInfo()) state.logger.info(f('[%s] scheduled server %s for connection', state.id, host));\n          // Make sure we know what is trying to connect\n          state.connectingServers[host] = host;\n          // Connect the server\n          connectToServer(self, state, host.split(':')[0], parseInt(host.split(':')[1], 10), options);\n        }\n      }\n    }\n  }\n}\n\nvar inInitialConnectingServers = function(self, state, address) {\n  for(var i = 0; i < state.initialConnectionServers.length; i++) {\n    if(state.initialConnectionServers[i].name == address) return true;\n  }\n  return false;\n}\n\n// Connect to a new server\nvar connectToServer = function(self, state, host, port, options) {\n  options = options || {};\n  var opts = cloneOptions(state.options);\n  opts.host = host;\n  opts.port = port;\n  opts.reconnect = false;\n  opts.readPreferenceStrategies = state.readPreferenceStrategies;\n  if(state.tag) opts.tag = state.tag;\n  // Share the auth store\n  opts.authProviders = state.authProviders;\n  opts.emitError = true;\n  // Set the size to size + 1 and mark monitoring\n  opts.size = opts.size + 1;\n  opts.monitoring = true;\n\n  // Do we have an arbiter set the poolSize to 1\n  if(options.arbiter) {\n    opts.size = 1;\n  }\n\n  // Create a new server instance\n  var server = new Server(opts);\n  // Handle the ismaster\n  server.on('ismaster', handleIsmaster(self));\n  // Set up the event handlers\n  server.once('error', errorHandlerTemp(self, state, 'error'));\n  server.once('close', errorHandlerTemp(self, state, 'close'));\n  server.once('timeout', errorHandlerTemp(self, state, 'timeout'));\n  server.once('connect', connectHandler(self, state));\n\n  // Attempt to connect\n  process.nextTick(function() {\n    server.connect();\n  });\n}\n\n//\n// Add server to the list if it does not exist\nvar addToListIfNotExist = function(list, server) {\n  var found = false;\n  // If the server is a null value return false\n  if(server == null) return found;\n\n  // Remove any non used handlers\n  ['error', 'close', 'timeout', 'connect'].forEach(function(e) {\n    server.removeAllListeners(e);\n  })\n\n  // Check if the server already exists\n  for(var i = 0; i < list.length; i++) {\n    if(list[i].equals(server)) found = true;\n  }\n\n  if(!found) {\n    list.push(server);\n  }\n\n  return found;\n}\n\nvar errorHandler = function(self, state) {\n  return function(err, server) {\n    if(state.replState.state == DESTROYED) return;\n    if(state.logger.isInfo()) state.logger.info(f('[%s] server %s errored out with %s', state.id, server.lastIsMaster() ? server.lastIsMaster().me : server.name, JSON.stringify(err)));\n    var found = addToListIfNotExist(state.disconnectedServers, server);\n    if(!found) self.emit('left', state.replState.remove(server), server);\n    if(found && state.emitError && self.listeners('error').length > 0) self.emit('error', err, server);\n\n    // Fire off a detection of missing server using minHeartbeatFrequencyMS\n    setTimeout(function() {\n      replicasetInquirer(self, self.s, true)();\n    }, self.s.minHeartbeatFrequencyMS);\n  }\n}\n\nvar timeoutHandler = function(self, state) {\n  return function(err, server) {\n    if(state.replState.state == DESTROYED) return;\n    if(state.logger.isInfo()) state.logger.info(f('[%s] server %s timed out', state.id, server.lastIsMaster() ? server.lastIsMaster().me : server.name));\n    var found = addToListIfNotExist(state.disconnectedServers, server);\n    if(!found) self.emit('left', state.replState.remove(server), server);\n\n    // Fire off a detection of missing server using minHeartbeatFrequencyMS\n    setTimeout(function() {\n      replicasetInquirer(self, self.s, true)();\n    }, self.s.minHeartbeatFrequencyMS);\n  }\n}\n\nvar closeHandler = function(self, state) {\n  return function(err, server) {\n    if(state.replState.state == DESTROYED) return;\n    if(state.logger.isInfo()) state.logger.info(f('[%s] server %s closed', state.id, server.lastIsMaster() ? server.lastIsMaster().me : server.name));\n    var found = addToListIfNotExist(state.disconnectedServers, server);\n    if(!found) {\n      self.emit('left', state.replState.remove(server), server);\n    }\n\n    // Fire off a detection of missing server using minHeartbeatFrequencyMS\n    setTimeout(function() {\n      replicasetInquirer(self, self.s, true)();\n    }, self.s.minHeartbeatFrequencyMS);\n  }\n}\n\n//\n// Validate if a non-master or recovering error\nvar notMasterError = function(r) {\n  // Get result of any\n  var result = r && r.result ? r.result : r;\n\n  // Explore if we have a not master error\n  if(result && (result.err == 'not master'\n    || result.errmsg == 'not master' || (result['$err'] && result['$err'].indexOf('not master or secondary') != -1)\n    || (result['$err'] && result['$err'].indexOf(\"not master and slaveOk=false\") != -1)\n    || result.errmsg == 'node is recovering')) {\n    return true;\n  }\n\n  return false;\n}\n\nmodule.exports = ReplSet;\n"]}