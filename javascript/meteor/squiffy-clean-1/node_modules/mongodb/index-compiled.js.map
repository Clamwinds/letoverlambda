{"version":3,"sources":["index.js"],"names":[],"mappings":";;;AACA,IAAI,IAAI,GAAG,OAAO,CAAC,cAAc,CAAC;IAChC,eAAe,GAAG,OAAO,CAAC,WAAW,CAAC;;;AAAC,AAGzC,IAAI,OAAO,GAAG,OAAO,CAAC,oBAAoB,CAAC,CAAC,OAAO;;;AAAC,AAGpD,OAAO,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU;;;AAAC,AAGrC,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AACvC,OAAO,CAAC,WAAW,GAAG,OAAO,CAAC,oBAAoB,CAAC,CAAC;AACpD,OAAO,CAAC,EAAE,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AACjC,OAAO,CAAC,UAAU,GAAG,OAAO,CAAC,kBAAkB,CAAC,CAAC;AACjD,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AACzC,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;AAC3C,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AACzC,OAAO,CAAC,cAAc,GAAG,OAAO,CAAC,uBAAuB,CAAC,CAAC;AAC1D,OAAO,CAAC,SAAS,GAAG,OAAO,CAAC,yBAAyB,CAAC,CAAC;AACvD,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC,oBAAoB,CAAC,CAAC;AAC9C,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;AAC7B,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AACzC,OAAO,CAAC,YAAY,GAAG,OAAO,CAAC,qBAAqB,CAAC;;;AAAC,AAGtD,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;AAClC,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;AAC9B,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;AAC5B,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;AAChC,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;AAClC,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;AAC9B,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;AAClC,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;AAClC,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;AACtC,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;AACtC,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;AAClC,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS;;;AAAC,AAGxC,OAAO,CAAC,OAAO,GAAG,OAAO;;;AAAC,AAG1B,OAAO,CAAC,UAAU,GAAG,UAAS,OAAO,EAAE,QAAQ,EAAE;AAC/C,MAAG,OAAO,OAAO,IAAI,UAAU,EAAE,QAAQ,GAAG,OAAO,EAAE,OAAO,GAAG,EAAE,CAAC;AAClE,SAAO,IAAI,eAAe,CAAC,IAAI,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;CACrD;;;AAAA,AAGD,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC","file":"index-compiled.js","sourcesContent":["// Core module\nvar core = require('mongodb-core'),\n  Instrumentation = require('./lib/apm');\n\n// Set up the connect function\nvar connect = require('./lib/mongo_client').connect;\n\n// Expose error class\nconnect.MongoError = core.MongoError;\n\n// Actual driver classes exported\nconnect.Admin = require('./lib/admin');\nconnect.MongoClient = require('./lib/mongo_client');\nconnect.Db = require('./lib/db');\nconnect.Collection = require('./lib/collection');\nconnect.Server = require('./lib/server');\nconnect.ReplSet = require('./lib/replset');\nconnect.Mongos = require('./lib/mongos');\nconnect.ReadPreference = require('./lib/read_preference');\nconnect.GridStore = require('./lib/gridfs/grid_store');\nconnect.Chunk = require('./lib/gridfs/chunk');\nconnect.Logger = core.Logger;\nconnect.Cursor = require('./lib/cursor');\nconnect.GridFSBucket = require('./lib/gridfs-stream');\n\n// BSON types exported\nconnect.Binary = core.BSON.Binary;\nconnect.Code = core.BSON.Code;\nconnect.Map = core.BSON.Map;\nconnect.DBRef = core.BSON.DBRef;\nconnect.Double = core.BSON.Double;\nconnect.Long = core.BSON.Long;\nconnect.MinKey = core.BSON.MinKey;\nconnect.MaxKey = core.BSON.MaxKey;\nconnect.ObjectID = core.BSON.ObjectID;\nconnect.ObjectId = core.BSON.ObjectID;\nconnect.Symbol = core.BSON.Symbol;\nconnect.Timestamp = core.BSON.Timestamp;\n\n// Add connect method\nconnect.connect = connect;\n\n// Set up the instrumentation method\nconnect.instrument = function(options, callback) {\n  if(typeof options == 'function') callback = options, options = {};\n  return new Instrumentation(core, options, callback);\n}\n\n// Set our exports to be the connect function\nmodule.exports = connect;\n"]}