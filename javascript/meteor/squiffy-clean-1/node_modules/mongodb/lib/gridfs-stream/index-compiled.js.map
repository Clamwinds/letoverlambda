{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["var Emitter = require('events').EventEmitter;\nvar GridFSBucketReadStream = require('./download');\nvar GridFSBucketWriteStream = require('./upload');\nvar shallowClone = require('../utils').shallowClone;\nvar toError = require('../utils').toError;\nvar util = require('util');\n\nvar DEFAULT_GRIDFS_BUCKET_OPTIONS = {\n  bucketName: 'fs',\n  chunkSizeBytes: 255 * 1024\n};\n\nmodule.exports = GridFSBucket;\n\n/**\n * Constructor for a streaming GridFS interface\n * @class\n * @param {Db} db A db handle\n * @param {object} [options=null] Optional settings.\n * @param {string} [options.bucketName=\"fs\"] The 'files' and 'chunks' collections will be prefixed with the bucket name followed by a dot.\n * @param {number} [options.chunkSizeBytes=255 * 1024] Number of bytes stored in each chunk. Defaults to 255KB\n * @param {object} [options.writeConcern=null] Optional write concern to be passed to write operations, for instance `{ w: 1 }`\n * @param {object} [options.readPreference=null] Optional read preference to be passed to read operations\n * @fires GridFSBucketWriteStream#index\n * @return {GridFSBucket}\n */\n\nfunction GridFSBucket(db, options) {\n  Emitter.apply(this);\n  this.setMaxListeners(0);\n\n  if (options && typeof options === 'object') {\n    options = shallowClone(options);\n    var keys = Object.keys(DEFAULT_GRIDFS_BUCKET_OPTIONS);\n    for (var i = 0; i < keys.length; ++i) {\n      if (!options[keys[i]]) {\n        options[keys[i]] = DEFAULT_GRIDFS_BUCKET_OPTIONS[keys[i]];\n      }\n    }\n  } else {\n    options = DEFAULT_GRIDFS_BUCKET_OPTIONS;\n  }\n\n  this.s = {\n    db: db,\n    options: options,\n    _chunksCollection: db.collection(options.bucketName + '.chunks'),\n    _filesCollection: db.collection(options.bucketName + '.files'),\n    checkedIndexes: false,\n    calledOpenUploadStream: false,\n    promiseLibrary: db.s.promiseLibrary ||\n      (typeof global.Promise == 'function' ? global.Promise : require('es6-promise').Promise)\n  };\n};\n\nutil.inherits(GridFSBucket, Emitter);\n\n/**\n * When the first call to openUploadStream is made, the upload stream will\n * check to see if it needs to create the proper indexes on the chunks and\n * files collections. This event is fired either when 1) it determines that\n * no index creation is necessary, 2) when it successfully creates the\n * necessary indexes.\n *\n * @event GridFSBucket#index\n * @type {Error}\n */\n\n/**\n * Returns a writable stream (GridFSBucketWriteStream) for writing\n * buffers to GridFS. The stream's 'id' property contains the resulting\n * file's id.\n * @method\n * @param {string} filename The value of the 'filename' key in the files doc\n * @param {object} [options=null] Optional settings.\n * @param {number} [options.chunkSizeBytes=null] Optional overwrite this bucket's chunkSizeBytes for this file\n * @param {object} [options.metadata=null] Optional object to store in the file document's `metadata` field\n * @param {string} [options.contentType=null] Optional string to store in the file document's `contentType` field\n * @param {array} [options.aliases=null] Optional array of strings to store in the file document's `aliases` field\n * @return {GridFSBucketWriteStream}\n */\n\nGridFSBucket.prototype.openUploadStream = function(filename, options) {\n  if (options) {\n    options = shallowClone(options);\n  } else {\n    options = {};\n  }\n  if (!options.chunkSizeBytes) {\n    options.chunkSizeBytes = this.s.options.chunkSizeBytes;\n  }\n  return new GridFSBucketWriteStream(this, filename, options);\n};\n\n/**\n * Returns a readable stream (GridFSBucketReadStream) for streaming file\n * data from GridFS.\n * @method\n * @param {ObjectId} id The id of the file doc\n * @param {Object} [options=null] Optional settings.\n * @param {Number} [options.start=null] Optional 0-based offset in bytes to start streaming from\n * @param {Number} [options.end=null] Optional 0-based offset in bytes to stop streaming before\n * @return {GridFSBucketReadStream}\n */\n\nGridFSBucket.prototype.openDownloadStream = function(id, options) {\n  var filter = { _id: id };\n  var options = {\n    start: options && options.start,\n    end: options && options.end\n  };\n  return new GridFSBucketReadStream(this.s._chunksCollection,\n    this.s._filesCollection, this.s.options.readPreference, filter, options);\n};\n\n/**\n * Deletes a file with the given id\n * @method\n * @param {ObjectId} id The id of the file doc\n * @param {Function} callback\n */\n\nGridFSBucket.prototype.delete = function(id, callback) {\n  if (typeof callback === 'function') {\n    return _delete(this, id, callback);\n  }\n\n  var _this = this;\n  return new this.s.promiseLibrary(function(resolve, reject) {\n    _delete(_this, id, function(error, res) {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(res);\n      }\n    });\n  });\n};\n\n/**\n * @ignore\n */\n\nfunction _delete(_this, id, callback) {\n  _this.s._filesCollection.deleteOne({ _id: id }, function(error, res) {\n    if (error) {\n      return callback(error);\n    }\n\n    _this.s._chunksCollection.deleteMany({ files_id: id }, function(error) {\n      if (error) {\n        return callback(error);\n      }\n\n      // Delete orphaned chunks before returning FileNotFound\n      if (!res.result.n) {\n        var errmsg = 'FileNotFound: no file with id ' + id + ' found';\n        return callback(new Error(errmsg));\n      }\n\n      callback();\n    });\n  });\n}\n\n/**\n * Convenience wrapper around find on the files collection\n * @method\n * @param {Object} filter\n * @param {Object} [options=null] Optional settings for cursor\n * @param {number} [options.batchSize=null] Optional batch size for cursor\n * @param {number} [options.limit=null] Optional limit for cursor\n * @param {number} [options.maxTimeMS=null] Optional maxTimeMS for cursor\n * @param {boolean} [options.noCursorTimeout=null] Optionally set cursor's `noCursorTimeout` flag\n * @param {number} [options.skip=null] Optional skip for cursor\n * @param {object} [options.sort=null] Optional sort for cursor\n * @return {Cursor}\n */\n\nGridFSBucket.prototype.find = function(filter, options) {\n  filter = filter || {};\n  options = options || {};\n\n  var cursor = this.s._filesCollection.find(filter);\n\n  if (options.batchSize != null) {\n    cursor.batchSize(options.batchSize);\n  }\n  if (options.limit != null) {\n    cursor.limit(options.limit);\n  }\n  if (options.maxTimeMS != null) {\n    cursor.maxTimeMS(options.maxTimeMS);\n  }\n  if (options.noCursorTimeout != null) {\n    cursor.addCursorFlag('noCursorTimeout', options.noCursorTimeout);\n  }\n  if (options.skip != null) {\n    cursor.skip(options.skip);\n  }\n  if (options.sort != null) {\n    cursor.sort(options.sort);\n  }\n\n  return cursor;\n};\n\n/**\n * Returns a readable stream (GridFSBucketReadStream) for streaming the\n * file with the given name from GridFS. If there are multiple files with\n * the same name, this will stream the most recent file with the given name\n * (as determined by the `uploadedDate` field). You can set the `revision`\n * option to change this behavior.\n * @method\n * @param {String} filename The name of the file to stream\n * @param {Object} [options=null] Optional settings\n * @param {number} [options.revision=-1] The revision number relative to the oldest file with the given filename. 0 gets you the oldest file, 1 gets you the 2nd oldest, -1 gets you the newest.\n * @param {Number} [options.start=null] Optional 0-based offset in bytes to start streaming from\n * @param {Number} [options.end=null] Optional 0-based offset in bytes to stop streaming before\n * @return {GridFSBucketReadStream}\n */\n\nGridFSBucket.prototype.openDownloadStreamByName = function(filename, options) {\n  var sort = { uploadedDate: -1 };\n  var skip = null;\n  if (options && options.revision != null) {\n    if (options.revision >= 0) {\n      sort = { uploadedDate: 1 };\n      skip = options.revision;\n    } else {\n      skip = -options.revision - 1;\n    }\n  }\n\n  var filter = { filename: filename };\n  var options = {\n    sort: sort,\n    skip: skip,\n    start: options && options.start,\n    end: options && options.end\n  };\n  return new GridFSBucketReadStream(this.s._chunksCollection,\n    this.s._filesCollection, this.s.options.readPreference, filter, options);\n};\n\n/**\n * Renames the file with the given _id to the given string\n * @method\n * @param {ObjectId} id the id of the file to rename\n * @param {String} filename new name for the file\n * @param {GridFSBucket~errorCallback} [callback]\n */\n\nGridFSBucket.prototype.rename = function(id, filename, callback) {\n  if (typeof callback === 'function') {\n    return _rename(this, id, filename, callback);\n  }\n\n  var _this = this;\n  return new this.s.promiseLibrary(function(resolve, reject) {\n    _rename(_this, id, filename, function(error, res) {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(res);\n      }\n    });\n  });\n};\n\n/**\n * @ignore\n */\n\nfunction _rename(_this, id, filename, callback) {\n  var filter = { _id: id };\n  var update = { $set: { filename: filename } };\n  _this.s._filesCollection.updateOne(filter, update, function(error, res) {\n    if (error) {\n      return callback(error);\n    }\n    if (!res.result.n) {\n      return callback(toError('File with id ' + id + ' not found'));\n    }\n    callback();\n  });\n}\n\n/**\n * Removes this bucket's files collection, followed by its chunks collection.\n * @method\n * @param {GridFSBucket~errorCallback} [callback]\n */\n\nGridFSBucket.prototype.drop = function(callback) {\n  if (typeof callback === 'function') {\n    return _drop(this, callback);\n  }\n\n  var _this = this;\n  return new this.s.promiseLibrary(function(resolve, reject) {\n    _drop(_this, function(error, res) {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(res);\n      }\n    });\n  });\n};\n\n/**\n * @ignore\n */\n\nfunction _drop(_this, callback) {\n  _this.s._filesCollection.drop(function(error) {\n    if (error) {\n      return callback(error);\n    }\n    _this.s._chunksCollection.drop(function(error) {\n      if (error) {\n        return callback(error);\n      }\n\n      return callback();\n    });\n  });\n}\n\n/**\n * Callback format for all GridFSBucket methods that can accept a callback.\n * @callback GridFSBucket~errorCallback\n * @param {MongoError} error An error instance representing any errors that occurred\n */\n"]}