{"version":3,"sources":["mongos.js"],"names":[],"mappings":"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","file":"mongos-compiled.js","sourcesContent":["\"use strict\";\n\nvar EventEmitter = require('events').EventEmitter\n  , inherits = require('util').inherits\n  , f = require('util').format\n  , ServerCapabilities = require('./topology_base').ServerCapabilities\n  , MongoCR = require('mongodb-core').MongoCR\n  , MongoError = require('mongodb-core').MongoError\n  , CMongos = require('mongodb-core').Mongos\n  , Cursor = require('./cursor')\n  , AggregationCursor = require('./aggregation_cursor')\n  , CommandCursor = require('./command_cursor')\n  , Define = require('./metadata')\n  , Server = require('./server')\n  , Store = require('./topology_base').Store\n  , shallowClone = require('./utils').shallowClone;\n\n/**\n * @fileOverview The **Mongos** class is a class that represents a Mongos Proxy topology and is\n * used to construct connections.\n *\n * **Mongos Should not be used, use MongoClient.connect**\n * @example\n * var Db = require('mongodb').Db,\n *   Mongos = require('mongodb').Mongos,\n *   Server = require('mongodb').Server,\n *   test = require('assert');\n * // Connect using Mongos\n * var server = new Server('localhost', 27017);\n * var db = new Db('test', new Mongos([server]));\n * db.open(function(err, db) {\n *   // Get an additional db\n *   db.close();\n * });\n */\n\n/**\n * Creates a new Mongos instance\n * @class\n * @deprecated\n * @param {Server[]} servers A seedlist of servers participating in the replicaset.\n * @param {object} [options=null] Optional settings.\n * @param {booelan} [options.ha=true] Turn on high availability monitoring.\n * @param {number} [options.haInterval=5000] Time between each replicaset status check.\n * @param {number} [options.poolSize=5] Number of connections in the connection pool for each server instance, set to 5 as default for legacy reasons.\n * @param {boolean} [options.ssl=false] Use ssl connection (needs to have a mongod server with ssl support)\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n * @param {object} [options.sslValidate=true] Validate mongod server certificate against ca (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {array} [options.sslCA=null] Array of valid certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {(Buffer|string)} [options.sslCert=null] String or buffer containing the certificate we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {(Buffer|string)} [options.sslKey=null] String or buffer containing the certificate private key we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {(Buffer|string)} [options.sslPass=null] String or buffer containing the certificate password (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {object} [options.socketOptions=null] Socket options\n * @param {boolean} [options.socketOptions.noDelay=true] TCP Socket NoDelay option.\n * @param {number} [options.socketOptions.keepAlive=0] TCP KeepAlive on the socket with a X ms delay before start.\n * @param {number} [options.socketOptions.connectTimeoutMS=0] TCP Connection timeout setting\n * @param {number} [options.socketOptions.socketTimeoutMS=0] TCP Socket timeout setting\n * @fires Mongos#connect\n * @fires Mongos#ha\n * @fires Mongos#joined\n * @fires Mongos#left\n * @fires Mongos#fullsetup\n * @fires Mongos#open\n * @fires Mongos#close\n * @fires Mongos#error\n * @fires Mongos#timeout\n * @fires Mongos#parseError\n * @return {Mongos} a Mongos instance.\n */\nvar Mongos = function(servers, options) {\n  if(!(this instanceof Mongos)) return new Mongos(servers, options);\n  options = options || {};\n  var self = this;\n\n  // Ensure all the instances are Server\n  for(var i = 0; i < servers.length; i++) {\n    if(!(servers[i] instanceof Server)) {\n      throw MongoError.create({message: \"all seed list instances must be of the Server type\", driver:true});\n    }\n  }\n\n  // Store option defaults\n  var storeOptions = {\n      force: false\n    , bufferMaxEntries: -1\n  }\n\n  // Shared global store\n  var store = options.store || new Store(self, storeOptions);\n\n  // Set up event emitter\n  EventEmitter.call(this);\n\n  // Debug tag\n  var tag = options.tag;\n\n  // Build seed list\n  var seedlist = servers.map(function(x) {\n    return {host: x.host, port: x.port}\n  });\n\n  // Final options\n  var finalOptions = shallowClone(options);\n\n  // Default values\n  finalOptions.size = typeof options.poolSize == 'number' ? options.poolSize : 5;\n  finalOptions.reconnect = typeof options.auto_reconnect == 'boolean' ? options.auto_reconnect : true;\n  finalOptions.emitError = typeof options.emitError == 'boolean' ? options.emitError : true;\n  finalOptions.cursorFactory = Cursor;\n\n  // Add the store\n  finalOptions.disconnectHandler = store;\n\n  // Ensure we change the sslCA option to ca if available\n  if(options.sslCA) finalOptions.ca = options.sslCA;\n  if(typeof options.sslValidate == 'boolean') finalOptions.rejectUnauthorized = options.sslValidate;\n  if(options.sslKey) finalOptions.key = options.sslKey;\n  if(options.sslCert) finalOptions.cert = options.sslCert;\n  if(options.sslPass) finalOptions.passphrase = options.sslPass;\n  if(options.checkServerIdentity) finalOptions.checkServerIdentity = options.checkServerIdentity;\n\n  // Socket options passed down\n  if(options.socketOptions) {\n    if(options.socketOptions.connectTimeoutMS) {\n      this.connectTimeoutMS = options.socketOptions.connectTimeoutMS;\n      finalOptions.connectionTimeout = options.socketOptions.connectTimeoutMS;\n    }\n    if(options.socketOptions.socketTimeoutMS)\n      finalOptions.socketTimeout = options.socketOptions.socketTimeoutMS;\n  }\n\n  // Are we running in debug mode\n  var debug = typeof options.debug == 'boolean' ? options.debug : false;\n  if(debug) {\n    finalOptions.debug = debug;\n  }\n\n  // Map keep alive setting\n  if(options.socketOptions && typeof options.socketOptions.keepAlive == 'number') {\n    finalOptions.keepAlive = true;\n    if(typeof options.socketOptions.keepAlive == 'number') {\n      finalOptions.keepAliveInitialDelay = options.socketOptions.keepAlive;\n    }\n  }\n\n  // Connection timeout\n  if(options.socketOptions && typeof options.socketOptions.connectionTimeout == 'number') {\n    finalOptions.connectionTimeout = options.socketOptions.connectionTimeout;\n  }\n\n  // Socket timeout\n  if(options.socketOptions && typeof options.socketOptions.socketTimeout == 'number') {\n    finalOptions.socketTimeout = options.socketOptions.socketTimeout;\n  }\n\n  // noDelay\n  if(options.socketOptions && typeof options.socketOptions.noDelay == 'boolean') {\n    finalOptions.noDelay = options.socketOptions.noDelay;\n  }\n\n  if(typeof options.secondaryAcceptableLatencyMS == 'number') {\n    finalOptions.acceptableLatency = options.secondaryAcceptableLatencyMS;\n  }\n\n  // Add the non connection store\n  finalOptions.disconnectHandler = store;\n\n  // Create the Mongos\n  var mongos = new CMongos(seedlist, finalOptions)\n  // Server capabilities\n  var sCapabilities = null;\n  // Add auth prbufferMaxEntriesoviders\n  mongos.addAuthProvider('mongocr', new MongoCR());\n\n  // Internal state\n  this.s = {\n    // Create the Mongos\n      mongos: mongos\n    // Server capabilities\n    , sCapabilities: sCapabilities\n    // Debug turned on\n    , debug: debug\n    // Store option defaults\n    , storeOptions: storeOptions\n    // Cloned options\n    , clonedOptions: finalOptions\n    // Actual store of callbacks\n    , store: store\n    // Options\n    , options: options\n  }\n\n\n  // Last ismaster\n  Object.defineProperty(this, 'isMasterDoc', {\n    enumerable:true, get: function() { return self.s.mongos.lastIsMaster(); }\n  });\n\n  // Last ismaster\n  Object.defineProperty(this, 'numberOfConnectedServers', {\n    enumerable:true, get: function() {\n      return self.s.mongos.s.mongosState.connectedServers().length;\n    }\n  });\n\n  // BSON property\n  Object.defineProperty(this, 'bson', {\n    enumerable: true, get: function() {\n      return self.s.mongos.bson;\n    }\n  });\n\n  Object.defineProperty(this, 'haInterval', {\n    enumerable:true, get: function() { return self.s.mongos.haInterval; }\n  });\n}\n\n/**\n * @ignore\n */\ninherits(Mongos, EventEmitter);\n\nvar define = Mongos.define = new Define('Mongos', Mongos, false);\n\n// Connect\nMongos.prototype.connect = function(db, _options, callback) {\n  var self = this;\n  if('function' === typeof _options) callback = _options, _options = {};\n  if(_options == null) _options = {};\n  if(!('function' === typeof callback)) callback = null;\n  self.s.options = _options;\n\n  // Update bufferMaxEntries\n  self.s.storeOptions.bufferMaxEntries = db.bufferMaxEntries;\n\n  // Error handler\n  var connectErrorHandler = function(event) {\n    return function(err) {\n      // Remove all event handlers\n      var events = ['timeout', 'error', 'close'];\n      events.forEach(function(e) {\n        self.removeListener(e, connectErrorHandler);\n      });\n\n      self.s.mongos.removeListener('connect', connectErrorHandler);\n\n      // Try to callback\n      try {\n        callback(err);\n      } catch(err) {\n        process.nextTick(function() { throw err; })\n      }\n    }\n  }\n\n  // Actual handler\n  var errorHandler = function(event) {\n    return function(err) {\n      if(event != 'error') {\n        self.emit(event, err);\n      }\n    }\n  }\n\n  // Error handler\n  var reconnectHandler = function(err) {\n    self.emit('reconnect');\n    self.s.store.execute();\n  }\n\n  // Connect handler\n  var connectHandler = function() {\n    // Clear out all the current handlers left over\n    [\"timeout\", \"error\", \"close\"].forEach(function(e) {\n      self.s.mongos.removeAllListeners(e);\n    });\n\n    // Set up listeners\n    self.s.mongos.once('timeout', errorHandler('timeout'));\n    self.s.mongos.once('error', errorHandler('error'));\n    self.s.mongos.once('close', errorHandler('close'));\n\n    // relay the event\n    var relay = function(event) {\n      return function(t, server) {\n        self.emit(event, t, server);\n      }\n    }\n\n    // Set up serverConfig listeners\n    self.s.mongos.on('joined', relay('joined'));\n    self.s.mongos.on('left', relay('left'));\n    self.s.mongos.on('fullsetup', relay('fullsetup'));\n\n    // Emit open event\n    self.emit('open', null, self);\n\n    // Return correctly\n    try {\n      callback(null, self);\n    } catch(err) {\n      process.nextTick(function() { throw err; })\n    }\n  }\n\n  // Set up listeners\n  self.s.mongos.once('timeout', connectErrorHandler('timeout'));\n  self.s.mongos.once('error', connectErrorHandler('error'));\n  self.s.mongos.once('close', connectErrorHandler('close'));\n  self.s.mongos.once('connect', connectHandler);\n  // Reconnect server\n  self.s.mongos.on('reconnect', reconnectHandler);\n\n  // Start connection\n  self.s.mongos.connect(_options);\n}\n\nMongos.prototype.parserType = function() {\n  return this.s.mongos.parserType();\n}\n\ndefine.classMethod('parserType', {callback: false, promise:false, returns: [String]});\n\n// Server capabilities\nMongos.prototype.capabilities = function() {\n  if(this.s.sCapabilities) return this.s.sCapabilities;\n  if(this.s.mongos.lastIsMaster() == null) return null;\n  this.s.sCapabilities = new ServerCapabilities(this.s.mongos.lastIsMaster());\n  return this.s.sCapabilities;\n}\n\ndefine.classMethod('capabilities', {callback: false, promise:false, returns: [ServerCapabilities]});\n\n// Command\nMongos.prototype.command = function(ns, cmd, options, callback) {\n  this.s.mongos.command(ns, cmd, options, callback);\n}\n\ndefine.classMethod('command', {callback: true, promise:false});\n\n// Insert\nMongos.prototype.insert = function(ns, ops, options, callback) {\n  this.s.mongos.insert(ns, ops, options, function(e, m) {\n    callback(e, m)\n  });\n}\n\ndefine.classMethod('insert', {callback: true, promise:false});\n\n// Update\nMongos.prototype.update = function(ns, ops, options, callback) {\n  this.s.mongos.update(ns, ops, options, callback);\n}\n\ndefine.classMethod('update', {callback: true, promise:false});\n\n// Remove\nMongos.prototype.remove = function(ns, ops, options, callback) {\n  this.s.mongos.remove(ns, ops, options, callback);\n}\n\ndefine.classMethod('remove', {callback: true, promise:false});\n\n// Destroyed\nMongos.prototype.isDestroyed = function() {\n  return this.s.mongos.isDestroyed();\n}\n\n// IsConnected\nMongos.prototype.isConnected = function() {\n  return this.s.mongos.isConnected();\n}\n\ndefine.classMethod('isConnected', {callback: false, promise:false, returns: [Boolean]});\n\n// Insert\nMongos.prototype.cursor = function(ns, cmd, options) {\n  options.disconnectHandler = this.s.store;\n  return this.s.mongos.cursor(ns, cmd, options);\n}\n\ndefine.classMethod('cursor', {callback: false, promise:false, returns: [Cursor, AggregationCursor, CommandCursor]});\n\nMongos.prototype.setBSONParserType = function(type) {\n  return this.s.mongos.setBSONParserType(type);\n}\n\nMongos.prototype.lastIsMaster = function() {\n  return this.s.mongos.lastIsMaster();\n}\n\nMongos.prototype.close = function(forceClosed) {\n  this.s.mongos.destroy();\n  // We need to wash out all stored processes\n  if(forceClosed == true) {\n    this.s.storeOptions.force = forceClosed;\n    this.s.store.flush();\n  }\n}\n\ndefine.classMethod('close', {callback: false, promise:false});\n\nMongos.prototype.auth = function() {\n  var args = Array.prototype.slice.call(arguments, 0);\n  this.s.mongos.auth.apply(this.s.mongos, args);\n}\n\ndefine.classMethod('auth', {callback: true, promise:false});\n\n/**\n * All raw connections\n * @method\n * @return {array}\n */\nMongos.prototype.connections = function() {\n  return this.s.mongos.connections();\n}\n\ndefine.classMethod('connections', {callback: false, promise:false, returns:[Array]});\n\n/**\n * A mongos connect event, used to verify that the connection is up and running\n *\n * @event Mongos#connect\n * @type {Mongos}\n */\n\n/**\n * The mongos high availability event\n *\n * @event Mongos#ha\n * @type {function}\n * @param {string} type The stage in the high availability event (start|end)\n * @param {boolean} data.norepeat This is a repeating high availability process or a single execution only\n * @param {number} data.id The id for this high availability request\n * @param {object} data.state An object containing the information about the current replicaset\n */\n\n/**\n * A server member left the mongos set\n *\n * @event Mongos#left\n * @type {function}\n * @param {string} type The type of member that left (primary|secondary|arbiter)\n * @param {Server} server The server object that left\n */\n\n/**\n * A server member joined the mongos set\n *\n * @event Mongos#joined\n * @type {function}\n * @param {string} type The type of member that joined (primary|secondary|arbiter)\n * @param {Server} server The server object that joined\n */\n\n/**\n * Mongos fullsetup event, emitted when all proxies in the topology have been connected to.\n *\n * @event Mongos#fullsetup\n * @type {Mongos}\n */\n\n/**\n * Mongos open event, emitted when mongos can start processing commands.\n *\n * @event Mongos#open\n * @type {Mongos}\n */\n\n/**\n * Mongos close event\n *\n * @event Mongos#close\n * @type {object}\n */\n\n/**\n * Mongos error event, emitted if there is an error listener.\n *\n * @event Mongos#error\n * @type {MongoError}\n */\n\n/**\n * Mongos timeout event\n *\n * @event Mongos#timeout\n * @type {object}\n */\n\n/**\n * Mongos parseError event\n *\n * @event Mongos#parseError\n * @type {object}\n */\n\nmodule.exports = Mongos;\n"]}