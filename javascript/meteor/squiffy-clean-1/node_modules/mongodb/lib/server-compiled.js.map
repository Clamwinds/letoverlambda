{"version":3,"sources":["server.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;AAEb,IAAI,YAAY,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,YAAY;IAC7C,QAAQ,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,QAAQ;IACnC,OAAO,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC,MAAM;IACxC,MAAM,GAAG,OAAO,CAAC,UAAU,CAAC;IAC5B,iBAAiB,GAAG,OAAO,CAAC,sBAAsB,CAAC;IACnD,aAAa,GAAG,OAAO,CAAC,kBAAkB,CAAC;IAC3C,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM;IAC1B,kBAAkB,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC,kBAAkB;IAClE,KAAK,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC,KAAK;IACxC,MAAM,GAAG,OAAO,CAAC,YAAY,CAAC;IAC9B,UAAU,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC,UAAU;IAC/C,YAAY,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,YAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAC,AAkDnD,IAAI,MAAM,GAAG,SAAT,MAAM,CAAY,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE;AACzC,SAAO,GAAG,OAAO,IAAI,EAAE,CAAC;AACxB,MAAG,EAAE,IAAI,YAAY,MAAM,CAAA,AAAC,EAAE,OAAO,IAAI,MAAM,CAAC,IAAI,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;AACrE,cAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACxB,MAAI,IAAI,GAAG,IAAI;;;AAAC,AAGhB,MAAI,YAAY,GAAG;AACf,SAAK,EAAE,KAAK;AACZ,oBAAgB,EAAE,CAAC,CAAC;GACvB;;;AAAA,AAGD,MAAI,KAAK,GAAG,OAAO,CAAC,KAAK,IAAI,IAAI,KAAK,CAAC,IAAI,EAAE,YAAY,CAAC;;;AAAC,AAG3D,MAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE;AAC3B,QAAG,IAAI,IAAI,IAAI,IAAI,QAAO,IAAI,yCAAJ,IAAI,MAAI,QAAQ,EAAE;AAC1C,aAAO,GAAG,IAAI,CAAC;AACf,UAAI,GAAG,IAAI,CAAC;KACb;GACF,MAAM,IAAG,IAAI,IAAI,IAAI,EAAE;AACtB,UAAM,UAAU,CAAC,MAAM,CAAC,EAAC,OAAO,EAAE,wBAAwB,EAAE,MAAM,EAAC,IAAI,EAAC,CAAC,CAAC;GAC3E;;;AAAA,AAGD,MAAI,aAAa,GAAG,YAAY,CAAC,OAAO,CAAC,CAAC;AAC1C,eAAa,CAAC,IAAI,GAAG,IAAI,CAAC;AAC1B,eAAa,CAAC,IAAI,GAAG,IAAI;;;AAAC,AAG1B,MAAI,SAAS,GAAG,OAAO,OAAO,CAAC,cAAc,IAAI,SAAS,GAAG,OAAO,CAAC,cAAc,GAAG,IAAI,CAAC;AAC3F,WAAS,GAAG,OAAO,OAAO,CAAC,aAAa,IAAI,SAAS,GAAG,OAAO,CAAC,aAAa,GAAG,SAAS,CAAC;AAC1F,MAAI,SAAS,GAAG,OAAO,OAAO,CAAC,SAAS,IAAI,SAAS,GAAG,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC;AACjF,MAAI,QAAQ,GAAG,OAAO,OAAO,CAAC,QAAQ,IAAI,QAAQ,GAAG,OAAO,CAAC,QAAQ,GAAG,CAAC;;;AAAC,AAG1E,MAAG,OAAO,CAAC,aAAa,EAAE;AACxB,QAAG,OAAO,CAAC,aAAa,CAAC,gBAAgB,EAAE;AACzC,UAAI,CAAC,gBAAgB,GAAG,OAAO,CAAC,aAAa,CAAC,gBAAgB,CAAC;AAC/D,mBAAa,CAAC,iBAAiB,GAAG,OAAO,CAAC,aAAa,CAAC,gBAAgB,CAAC;KAC1E;;AAED,QAAG,OAAO,CAAC,aAAa,CAAC,eAAe,EAAE;AACxC,mBAAa,CAAC,aAAa,GAAG,OAAO,CAAC,aAAa,CAAC,eAAe,CAAC;KACrE;;AAED,QAAG,OAAO,OAAO,CAAC,aAAa,CAAC,SAAS,IAAI,QAAQ,EAAE;AACrD,mBAAa,CAAC,qBAAqB,GAAG,OAAO,CAAC,aAAa,CAAC,SAAS,CAAC;AACtE,mBAAa,CAAC,SAAS,GAAG,IAAI,CAAC;KAChC;;AAED,QAAG,OAAO,OAAO,CAAC,aAAa,CAAC,OAAO,IAAI,SAAS,EAAE;AACpD,mBAAa,CAAC,OAAO,GAAG,OAAO,CAAC,aAAa,CAAC,OAAO,CAAC;KACvD;GACF;;;AAAA,AAGD,eAAa,CAAC,aAAa,GAAG,MAAM,CAAC;AACrC,eAAa,CAAC,SAAS,GAAG,SAAS,CAAC;AACpC,eAAa,CAAC,SAAS,GAAG,SAAS,CAAC;AACpC,eAAa,CAAC,IAAI,GAAG,QAAQ;;;AAAC,AAG9B,MAAG,aAAa,CAAC,KAAK,EAAE,aAAa,CAAC,EAAE,GAAG,aAAa,CAAC,KAAK,CAAC;AAC/D,MAAG,OAAO,aAAa,CAAC,WAAW,IAAI,SAAS,EAAE,aAAa,CAAC,kBAAkB,GAAG,aAAa,CAAC,WAAW,CAAC;AAC/G,MAAG,aAAa,CAAC,MAAM,EAAE,aAAa,CAAC,GAAG,GAAG,aAAa,CAAC,MAAM,CAAC;AAClE,MAAG,aAAa,CAAC,OAAO,EAAE,aAAa,CAAC,IAAI,GAAG,aAAa,CAAC,OAAO,CAAC;AACrE,MAAG,aAAa,CAAC,OAAO,EAAE,aAAa,CAAC,UAAU,GAAG,aAAa,CAAC,OAAO,CAAC;;;AAAA,AAG3E,eAAa,CAAC,iBAAiB,GAAG,KAAK;;;AAAC,AAGxC,MAAI,MAAM,GAAG,IAAI,OAAO,CAAC,aAAa,CAAC;;AAAC,AAExC,MAAI,aAAa,GAAG,IAAI;;;AAAC,AAGzB,MAAI,CAAC,CAAC,GAAG;;AAEL,UAAM,EAAE,MAAM;;AAAA,MAEd,aAAa,EAAE,IAAI;;AAAA,MAEnB,aAAa,EAAE,aAAa;;AAAA,MAE5B,SAAS,EAAE,SAAS;;AAAA,MAEpB,SAAS,EAAE,SAAS;;AAAA,MAEpB,QAAQ,EAAE,QAAQ;;AAAA,MAElB,YAAY,EAAE,YAAY;;AAAA,MAE1B,KAAK,EAAE,KAAK;;AAAA,MAEZ,IAAI,EAAE,IAAI;;AAAA,MAEV,IAAI,EAAE,IAAI;;AAAA,MAEV,OAAO,EAAE,OAAO;GACnB;;;AAAA,AAGD,QAAM,CAAC,cAAc,CAAC,IAAI,EAAE,MAAM,EAAE;AAClC,cAAU,EAAE,IAAI,EAAE,GAAG,EAAE,eAAW;AAChC,aAAO,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC;KAC3B;GACF,CAAC;;;AAAC,AAGH,QAAM,CAAC,cAAc,CAAC,IAAI,EAAE,aAAa,EAAE;AACzC,cAAU,EAAC,IAAI,EAAE,GAAG,EAAE,eAAW;AAC/B,aAAO,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC;KACrC;GACF,CAAC;;;AAAC,AAGH,QAAM,CAAC,cAAc,CAAC,IAAI,EAAE,UAAU,EAAE;AACtC,cAAU,EAAC,IAAI,EAAE,GAAG,EAAE,eAAW;AAAE,aAAO,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,MAAM,CAAC;KAAE;GAChF,CAAC,CAAC;;AAEH,QAAM,CAAC,cAAc,CAAC,IAAI,EAAE,eAAe,EAAE;AAC3C,cAAU,EAAC,IAAI,EAAE,GAAG,EAAE,eAAW;AAAE,aAAO,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC;KAAE;GAC9D,CAAC,CAAC;;AAEH,QAAM,CAAC,cAAc,CAAC,IAAI,EAAE,MAAM,EAAE;AAClC,cAAU,EAAC,IAAI,EAAE,GAAG,EAAE,eAAW;AAAE,aAAO,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;KAAE;GACzD,CAAC,CAAC;;AAEH,QAAM,CAAC,cAAc,CAAC,IAAI,EAAE,MAAM,EAAE;AAClC,cAAU,EAAC,IAAI,EAAE,GAAG,EAAE,eAAW;AAAE,aAAO,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;KAAE;GACzD,CAAC,CAAC;CACJ,CAAA;;AAED,QAAQ,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;;AAE/B,IAAI,MAAM,GAAG,MAAM,CAAC,MAAM,GAAG,IAAI,MAAM,CAAC,QAAQ,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;;AAEjE,MAAM,CAAC,SAAS,CAAC,UAAU,GAAG,YAAW;AACvC,SAAO,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;CACnC,CAAA;;AAED,MAAM,CAAC,WAAW,CAAC,YAAY,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAC,KAAK,EAAE,OAAO,EAAE,CAAC,MAAM,CAAC,EAAC,CAAC;;;AAAC,AAGtF,MAAM,CAAC,SAAS,CAAC,OAAO,GAAG,UAAS,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE;AAC1D,MAAI,IAAI,GAAG,IAAI,CAAC;AAChB,MAAG,UAAU,KAAK,OAAO,QAAQ,EAAE,QAAQ,GAAG,QAAQ,EAAE,QAAQ,GAAG,EAAE,CAAC;AACtE,MAAG,QAAQ,IAAI,IAAI,EAAE,QAAQ,GAAG,EAAE,CAAC;AACnC,MAAG,EAAE,UAAU,KAAK,OAAO,QAAQ,CAAA,AAAC,EAAE,QAAQ,GAAG,IAAI,CAAC;AACtD,MAAI,CAAC,CAAC,CAAC,OAAO,GAAG,QAAQ;;;AAAC,AAG1B,MAAI,CAAC,CAAC,CAAC,YAAY,CAAC,gBAAgB,GAAG,EAAE,CAAC,gBAAgB;;;AAAC,AAG3D,MAAI,mBAAmB,GAAG,SAAtB,mBAAmB,CAAY,KAAK,EAAE;AACxC,WAAO,UAAS,GAAG,EAAE;;AAEnB,UAAI,MAAM,GAAG,CAAC,SAAS,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;AAC3C,YAAM,CAAC,OAAO,CAAC,UAAS,CAAC,EAAE;AACzB,YAAI,CAAC,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,EAAE,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC;OACrD,CAAC,CAAC;;AAEH,UAAI,CAAC,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,SAAS,EAAE,mBAAmB,CAAC;;;AAAC,AAG7D,UAAI;AACF,gBAAQ,CAAC,GAAG,CAAC,CAAC;OACf,CAAC,OAAM,GAAG,EAAE;AACX,eAAO,CAAC,QAAQ,CAAC,YAAW;AAAE,gBAAM,GAAG,CAAC;SAAE,CAAC,CAAA;OAC5C;KACF,CAAA;GACF;;;AAAA,AAGD,MAAI,YAAY,GAAG,SAAf,YAAY,CAAY,KAAK,EAAE;AACjC,WAAO,UAAS,GAAG,EAAE;AACnB,UAAG,KAAK,IAAI,OAAO,EAAE;AACnB,YAAI,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;OACvB;KACF,CAAA;GACF;;;AAAA,AAGD,MAAI,gBAAgB,GAAG,SAAnB,gBAAgB,CAAY,GAAG,EAAE;AACnC,QAAI,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;AAC7B,QAAI,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;GACxB;;;AAAA,AAGD,MAAI,cAAc,GAAG,SAAjB,cAAc,GAAc;AAC9B,QAAI,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;GACtB;;;AAAA,AAGD,MAAI,cAAc,GAAG,SAAjB,cAAc,GAAc;;AAE9B,KAAC,SAAS,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC,OAAO,CAAC,UAAS,CAAC,EAAE;AAChD,UAAI,CAAC,CAAC,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;KACrC,CAAC;;;AAAC,AAGH,QAAI,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC;AACvD,QAAI,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC;AACnD,QAAI,CAAC,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,YAAY,CAAC,OAAO,CAAC,CAAC;;AAAC,AAEjD,QAAI,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,cAAc,CAAC;;;AAAC,AAG9C,QAAI,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC;;;AAAC,AAG9B,QAAI;AACF,cAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;KACtB,CAAC,OAAM,GAAG,EAAE;AACX,aAAO,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;AACtB,aAAO,CAAC,QAAQ,CAAC,YAAW;AAAE,cAAM,GAAG,CAAC;OAAE,CAAC,CAAA;KAC5C;GACF;;;AAAA,AAGD,MAAI,eAAe,GAAG;AACpB,WAAO,EAAE,mBAAmB,CAAC,SAAS,CAAC;AACvC,SAAK,EAAE,mBAAmB,CAAC,OAAO,CAAC;AACnC,SAAK,EAAE,mBAAmB,CAAC,OAAO,CAAC;GACpC;;;AAAC,AAGF,MAAI,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,eAAe,CAAC,OAAO,CAAC,CAAC;AACvD,MAAI,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,eAAe,CAAC,KAAK,CAAC,CAAC;AACnD,MAAI,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,eAAe,CAAC,KAAK,CAAC,CAAC;AACnD,MAAI,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,cAAc,CAAC;;AAAC,AAE9C,MAAI,CAAC,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC,WAAW,EAAE,gBAAgB,CAAC;;;AAAC,AAGhD,MAAI,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;CACjC;;;AAAA,AAGD,MAAM,CAAC,SAAS,CAAC,YAAY,GAAG,YAAW;AACzC,MAAG,IAAI,CAAC,CAAC,CAAC,aAAa,EAAE,OAAO,IAAI,CAAC,CAAC,CAAC,aAAa,CAAC;AACrD,MAAG,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,YAAY,EAAE,IAAI,IAAI,EAAE,OAAO,IAAI,CAAC;AACrD,MAAI,CAAC,CAAC,CAAC,aAAa,GAAG,IAAI,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC,CAAC;AAC5E,SAAO,IAAI,CAAC,CAAC,CAAC,aAAa,CAAC;CAC7B,CAAA;;AAED,MAAM,CAAC,WAAW,CAAC,cAAc,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAC,KAAK,EAAE,OAAO,EAAE,CAAC,kBAAkB,CAAC,EAAC,CAAC;;;AAAC,AAGpG,MAAM,CAAC,SAAS,CAAC,OAAO,GAAG,UAAS,EAAE,EAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,EAAE;AAC9D,MAAI,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,EAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;CACnD,CAAA;;AAED,MAAM,CAAC,WAAW,CAAC,SAAS,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAC,KAAK,EAAC,CAAC;;;AAAC,AAG/D,MAAM,CAAC,SAAS,CAAC,MAAM,GAAG,UAAS,EAAE,EAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,EAAE;AAC7D,MAAI,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;CAClD,CAAA;;AAED,MAAM,CAAC,WAAW,CAAC,QAAQ,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAC,KAAK,EAAC,CAAC;;;AAAC,AAG9D,MAAM,CAAC,SAAS,CAAC,MAAM,GAAG,UAAS,EAAE,EAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,EAAE;AAC7D,MAAI,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;CAClD,CAAA;;AAED,MAAM,CAAC,WAAW,CAAC,QAAQ,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAC,KAAK,EAAC,CAAC;;;AAAC,AAG9D,MAAM,CAAC,SAAS,CAAC,MAAM,GAAG,UAAS,EAAE,EAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,EAAE;AAC7D,MAAI,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;CAClD,CAAA;;AAED,MAAM,CAAC,WAAW,CAAC,QAAQ,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAC,KAAK,EAAC,CAAC;;;AAAC,AAG9D,MAAM,CAAC,SAAS,CAAC,WAAW,GAAG,YAAW;AACxC,SAAO,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;CACpC,CAAA;;AAED,MAAM,CAAC,SAAS,CAAC,WAAW,GAAG,YAAW;AACxC,SAAO,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;CACpC,CAAA;;AAED,MAAM,CAAC,WAAW,CAAC,aAAa,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAC,KAAK,EAAE,OAAO,EAAE,CAAC,OAAO,CAAC,EAAC,CAAC;;;AAAC,AAGxF,MAAM,CAAC,SAAS,CAAC,MAAM,GAAG,UAAS,EAAE,EAAE,GAAG,EAAE,OAAO,EAAE;AACnD,SAAO,CAAC,iBAAiB,GAAG,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;AACzC,SAAO,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;CAC/C,CAAA;;AAED,MAAM,CAAC,WAAW,CAAC,QAAQ,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAC,KAAK,EAAE,OAAO,EAAE,CAAC,MAAM,EAAE,iBAAiB,EAAE,aAAa,CAAC,EAAC,CAAC,CAAC;;AAEpH,MAAM,CAAC,SAAS,CAAC,iBAAiB,GAAG,UAAS,IAAI,EAAE;AAClD,SAAO,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;CAC9C,CAAA;;AAED,MAAM,CAAC,SAAS,CAAC,YAAY,GAAG,YAAW;AACzC,SAAO,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC;CACrC,CAAA;;AAED,MAAM,CAAC,SAAS,CAAC,KAAK,GAAG,UAAS,WAAW,EAAE;AAC7C,MAAI,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,EAAE;;AAAC,AAExB,MAAG,WAAW,IAAI,IAAI,EAAE;AACtB,QAAI,CAAC,CAAC,CAAC,YAAY,CAAC,KAAK,GAAG,WAAW,CAAC;AACxC,QAAI,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;GACtB;CACF,CAAA;;AAED,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAC,KAAK,EAAC,CAAC,CAAC;;AAE9D,MAAM,CAAC,SAAS,CAAC,IAAI,GAAG,YAAW;AACjC,MAAI,IAAI,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;AACpD,MAAI,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;CAC/C,CAAA;;AAED,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAC,KAAK,EAAC,CAAC;;;;;;;AAAC,AAO5D,MAAM,CAAC,SAAS,CAAC,WAAW,GAAG,YAAW;AACxC,SAAO,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;CACpC,CAAA;;AAED,MAAM,CAAC,WAAW,CAAC,aAAa,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAC,KAAK,EAAE,OAAO,EAAC,CAAC,KAAK,CAAC,EAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAC,AA4CrF,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC","file":"server-compiled.js","sourcesContent":["\"use strict\";\n\nvar EventEmitter = require('events').EventEmitter\n  , inherits = require('util').inherits\n  , CServer = require('mongodb-core').Server\n  , Cursor = require('./cursor')\n  , AggregationCursor = require('./aggregation_cursor')\n  , CommandCursor = require('./command_cursor')\n  , f = require('util').format\n  , ServerCapabilities = require('./topology_base').ServerCapabilities\n  , Store = require('./topology_base').Store\n  , Define = require('./metadata')\n  , MongoError = require('mongodb-core').MongoError\n  , shallowClone = require('./utils').shallowClone;\n\n/**\n * @fileOverview The **Server** class is a class that represents a single server topology and is\n * used to construct connections.\n *\n * **Server Should not be used, use MongoClient.connect**\n * @example\n * var Db = require('mongodb').Db,\n *   Server = require('mongodb').Server,\n *   test = require('assert');\n * // Connect using single Server\n * var db = new Db('test', new Server('localhost', 27017););\n * db.open(function(err, db) {\n *   // Get an additional db\n *   db.close();\n * });\n */\n\n/**\n * Creates a new Server instance\n * @class\n * @deprecated\n * @param {string} host The host for the server, can be either an IP4, IP6 or domain socket style host.\n * @param {number} [port] The server port if IP4.\n * @param {object} [options=null] Optional settings.\n * @param {number} [options.poolSize=5] Number of connections in the connection pool for each server instance, set to 5 as default for legacy reasons.\n * @param {boolean} [options.ssl=false] Use ssl connection (needs to have a mongod server with ssl support)\n * @param {object} [options.sslValidate=true] Validate mongod server certificate against ca (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n * @param {array} [options.sslCA=null] Array of valid certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {(Buffer|string)} [options.sslCert=null] String or buffer containing the certificate we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {(Buffer|string)} [options.sslKey=null] String or buffer containing the certificate private key we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {(Buffer|string)} [options.sslPass=null] String or buffer containing the certificate password (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {object} [options.socketOptions=null] Socket options\n * @param {boolean} [options.socketOptions.autoReconnect=false] Reconnect on error.\n * @param {boolean} [options.socketOptions.noDelay=true] TCP Socket NoDelay option.\n * @param {number} [options.socketOptions.keepAlive=0] TCP KeepAlive on the socket with a X ms delay before start.\n * @param {number} [options.socketOptions.connectTimeoutMS=0] TCP Connection timeout setting\n * @param {number} [options.socketOptions.socketTimeoutMS=0] TCP Socket timeout setting\n * @param {number} [options.reconnectTries=30] Server attempt to reconnect #times\n * @param {number} [options.reconnectInterval=1000] Server will wait # milliseconds between retries\n * @fires Server#connect\n * @fires Server#close\n * @fires Server#error\n * @fires Server#timeout\n * @fires Server#parseError\n * @fires Server#reconnect\n * @return {Server} a Server instance.\n */\nvar Server = function(host, port, options) {\n  options = options || {};\n  if(!(this instanceof Server)) return new Server(host, port, options);\n  EventEmitter.call(this);\n  var self = this;\n\n  // Store option defaults\n  var storeOptions = {\n      force: false\n    , bufferMaxEntries: -1\n  }\n\n  // Shared global store\n  var store = options.store || new Store(self, storeOptions);\n\n  // Detect if we have a socket connection\n  if(host.indexOf('\\/') != -1) {\n    if(port != null && typeof port == 'object') {\n      options = port;\n      port = null;\n    }\n  } else if(port == null) {\n    throw MongoError.create({message: 'port must be specified', driver:true});\n  }\n\n  // Clone options\n  var clonedOptions = shallowClone(options);\n  clonedOptions.host = host;\n  clonedOptions.port = port;\n\n  // Reconnect\n  var reconnect = typeof options.auto_reconnect == 'boolean' ? options.auto_reconnect : true;\n  reconnect = typeof options.autoReconnect == 'boolean' ? options.autoReconnect : reconnect;\n  var emitError = typeof options.emitError == 'boolean' ? options.emitError : true;\n  var poolSize = typeof options.poolSize == 'number' ? options.poolSize : 5;\n\n  // Socket options passed down\n  if(options.socketOptions) {\n    if(options.socketOptions.connectTimeoutMS) {\n      this.connectTimeoutMS = options.socketOptions.connectTimeoutMS;\n      clonedOptions.connectionTimeout = options.socketOptions.connectTimeoutMS;\n    }\n\n    if(options.socketOptions.socketTimeoutMS) {\n      clonedOptions.socketTimeout = options.socketOptions.socketTimeoutMS;\n    }\n\n    if(typeof options.socketOptions.keepAlive == 'number') {\n      clonedOptions.keepAliveInitialDelay = options.socketOptions.keepAlive;\n      clonedOptions.keepAlive = true;\n    }\n\n    if(typeof options.socketOptions.noDelay == 'boolean') {\n      clonedOptions.noDelay = options.socketOptions.noDelay;\n    }\n  }\n\n  // Add the cursor factory function\n  clonedOptions.cursorFactory = Cursor;\n  clonedOptions.reconnect = reconnect;\n  clonedOptions.emitError = emitError;\n  clonedOptions.size = poolSize;\n\n  // Translate the options\n  if(clonedOptions.sslCA) clonedOptions.ca = clonedOptions.sslCA;\n  if(typeof clonedOptions.sslValidate == 'boolean') clonedOptions.rejectUnauthorized = clonedOptions.sslValidate;\n  if(clonedOptions.sslKey) clonedOptions.key = clonedOptions.sslKey;\n  if(clonedOptions.sslCert) clonedOptions.cert = clonedOptions.sslCert;\n  if(clonedOptions.sslPass) clonedOptions.passphrase = clonedOptions.sslPass;\n\n  // Add the non connection store\n  clonedOptions.disconnectHandler = store;\n\n  // Create an instance of a server instance from mongodb-core\n  var server = new CServer(clonedOptions);\n  // Server capabilities\n  var sCapabilities = null;\n\n  // Define the internal properties\n  this.s = {\n    // Create an instance of a server instance from mongodb-core\n      server: server\n    // Server capabilities\n    , sCapabilities: null\n    // Cloned options\n    , clonedOptions: clonedOptions\n    // Reconnect\n    , reconnect: reconnect\n    // Emit error\n    , emitError: emitError\n    // Pool size\n    , poolSize: poolSize\n    // Store Options\n    , storeOptions: storeOptions\n    // Store\n    , store: store\n    // Host\n    , host: host\n    // Port\n    , port: port\n    // Options\n    , options: options\n  }\n\n  // BSON property\n  Object.defineProperty(this, 'bson', {\n    enumerable: true, get: function() {\n      return self.s.server.bson;\n    }\n  });\n\n  // Last ismaster\n  Object.defineProperty(this, 'isMasterDoc', {\n    enumerable:true, get: function() {\n      return self.s.server.lastIsMaster();\n    }\n  });\n\n  // Last ismaster\n  Object.defineProperty(this, 'poolSize', {\n    enumerable:true, get: function() { return self.s.server.connections().length; }\n  });\n\n  Object.defineProperty(this, 'autoReconnect', {\n    enumerable:true, get: function() { return self.s.reconnect; }\n  });\n\n  Object.defineProperty(this, 'host', {\n    enumerable:true, get: function() { return self.s.host; }\n  });\n\n  Object.defineProperty(this, 'port', {\n    enumerable:true, get: function() { return self.s.port; }\n  });\n}\n\ninherits(Server, EventEmitter);\n\nvar define = Server.define = new Define('Server', Server, false);\n\nServer.prototype.parserType = function() {\n  return this.s.server.parserType();\n}\n\ndefine.classMethod('parserType', {callback: false, promise:false, returns: [String]});\n\n// Connect\nServer.prototype.connect = function(db, _options, callback) {\n  var self = this;\n  if('function' === typeof _options) callback = _options, _options = {};\n  if(_options == null) _options = {};\n  if(!('function' === typeof callback)) callback = null;\n  self.s.options = _options;\n\n  // Update bufferMaxEntries\n  self.s.storeOptions.bufferMaxEntries = db.bufferMaxEntries;\n\n  // Error handler\n  var connectErrorHandler = function(event) {\n    return function(err) {\n      // Remove all event handlers\n      var events = ['timeout', 'error', 'close'];\n      events.forEach(function(e) {\n        self.s.server.removeListener(e, connectHandlers[e]);\n      });\n\n      self.s.server.removeListener('connect', connectErrorHandler);\n\n      // Try to callback\n      try {\n        callback(err);\n      } catch(err) {\n        process.nextTick(function() { throw err; })\n      }\n    }\n  }\n\n  // Actual handler\n  var errorHandler = function(event) {\n    return function(err) {\n      if(event != 'error') {\n        self.emit(event, err);\n      }\n    }\n  }\n\n  // Error handler\n  var reconnectHandler = function(err) {\n    self.emit('reconnect', self);\n    self.s.store.execute();\n  }\n\n  // Destroy called on topology, perform cleanup\n  var destroyHandler = function() {\n    self.s.store.flush();\n  }\n\n  // Connect handler\n  var connectHandler = function() {\n    // Clear out all the current handlers left over\n    [\"timeout\", \"error\", \"close\"].forEach(function(e) {\n      self.s.server.removeAllListeners(e);\n    });\n\n    // Set up listeners\n    self.s.server.once('timeout', errorHandler('timeout'));\n    self.s.server.once('error', errorHandler('error'));\n    self.s.server.on('close', errorHandler('close'));\n    // Only called on destroy\n    self.s.server.once('destroy', destroyHandler);\n\n    // Emit open event\n    self.emit('open', null, self);\n\n    // Return correctly\n    try {\n      callback(null, self);\n    } catch(err) {\n      console.log(err.stack)\n      process.nextTick(function() { throw err; })\n    }\n  }\n\n  // Set up listeners\n  var connectHandlers = {\n    timeout: connectErrorHandler('timeout'),\n    error: connectErrorHandler('error'),\n    close: connectErrorHandler('close')\n  };\n\n  // Add the event handlers\n  self.s.server.once('timeout', connectHandlers.timeout);\n  self.s.server.once('error', connectHandlers.error);\n  self.s.server.once('close', connectHandlers.close);\n  self.s.server.once('connect', connectHandler);\n  // Reconnect server\n  self.s.server.on('reconnect', reconnectHandler);\n\n  // Start connection\n  self.s.server.connect(_options);\n}\n\n// Server capabilities\nServer.prototype.capabilities = function() {\n  if(this.s.sCapabilities) return this.s.sCapabilities;\n  if(this.s.server.lastIsMaster() == null) return null;\n  this.s.sCapabilities = new ServerCapabilities(this.s.server.lastIsMaster());\n  return this.s.sCapabilities;\n}\n\ndefine.classMethod('capabilities', {callback: false, promise:false, returns: [ServerCapabilities]});\n\n// Command\nServer.prototype.command = function(ns, cmd, options, callback) {\n  this.s.server.command(ns, cmd, options, callback);\n}\n\ndefine.classMethod('command', {callback: true, promise:false});\n\n// Insert\nServer.prototype.insert = function(ns, ops, options, callback) {\n  this.s.server.insert(ns, ops, options, callback);\n}\n\ndefine.classMethod('insert', {callback: true, promise:false});\n\n// Update\nServer.prototype.update = function(ns, ops, options, callback) {\n  this.s.server.update(ns, ops, options, callback);\n}\n\ndefine.classMethod('update', {callback: true, promise:false});\n\n// Remove\nServer.prototype.remove = function(ns, ops, options, callback) {\n  this.s.server.remove(ns, ops, options, callback);\n}\n\ndefine.classMethod('remove', {callback: true, promise:false});\n\n// IsConnected\nServer.prototype.isConnected = function() {\n  return this.s.server.isConnected();\n}\n\nServer.prototype.isDestroyed = function() {\n  return this.s.server.isDestroyed(); \n}\n\ndefine.classMethod('isConnected', {callback: false, promise:false, returns: [Boolean]});\n\n// Insert\nServer.prototype.cursor = function(ns, cmd, options) {\n  options.disconnectHandler = this.s.store;\n  return this.s.server.cursor(ns, cmd, options);\n}\n\ndefine.classMethod('cursor', {callback: false, promise:false, returns: [Cursor, AggregationCursor, CommandCursor]});\n\nServer.prototype.setBSONParserType = function(type) {\n  return this.s.server.setBSONParserType(type);\n}\n\nServer.prototype.lastIsMaster = function() {\n  return this.s.server.lastIsMaster();\n}\n\nServer.prototype.close = function(forceClosed) {\n  this.s.server.destroy();\n  // We need to wash out all stored processes\n  if(forceClosed == true) {\n    this.s.storeOptions.force = forceClosed;\n    this.s.store.flush();\n  }\n}\n\ndefine.classMethod('close', {callback: false, promise:false});\n\nServer.prototype.auth = function() {\n  var args = Array.prototype.slice.call(arguments, 0);\n  this.s.server.auth.apply(this.s.server, args);\n}\n\ndefine.classMethod('auth', {callback: true, promise:false});\n\n/**\n * All raw connections\n * @method\n * @return {array}\n */\nServer.prototype.connections = function() {\n  return this.s.server.connections();\n}\n\ndefine.classMethod('connections', {callback: false, promise:false, returns:[Array]});\n\n/**\n * Server connect event\n *\n * @event Server#connect\n * @type {object}\n */\n\n/**\n * Server close event\n *\n * @event Server#close\n * @type {object}\n */\n\n/**\n * Server reconnect event\n *\n * @event Server#reconnect\n * @type {object}\n */\n\n/**\n * Server error event\n *\n * @event Server#error\n * @type {MongoError}\n */\n\n/**\n * Server timeout event\n *\n * @event Server#timeout\n * @type {object}\n */\n\n/**\n * Server parseError event\n *\n * @event Server#parseError\n * @type {object}\n */\n\nmodule.exports = Server;\n"]}