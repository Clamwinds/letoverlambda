{"version":3,"sources":["url_parser.js"],"names":[],"mappings":"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","file":"url_parser-compiled.js","sourcesContent":["\"use strict\";\n\nvar ReadPreference = require('./read_preference'),\n  parser = require('url'),\n  f = require('util').format;\n\nmodule.exports = function(url, options) {\n  // Ensure we have a default options object if none set\n  options = options || {};\n  // Variables\n  var connection_part = '';\n  var auth_part = '';\n  var query_string_part = '';\n  var dbName = 'admin';\n\n  // Url parser result\n  var result = parser.parse(url, true);\n\n  if(result.protocol != 'mongodb:') {\n    throw new Error('invalid schema, expected mongodb');\n  }\n\n  if((result.hostname == null || result.hostname == '') && url.indexOf('.sock') == -1) {\n    throw new Error('no hostname or hostnames provided in connection string');\n  }\n\n  if(result.port == '0') {\n    throw new Error('invalid port (zero) with hostname');\n  }\n\n  if(!isNaN(parseInt(result.port, 10)) && parseInt(result.port, 10) > 65535) {\n    throw new Error('invalid port (larger than 65535) with hostname');\n  }\n\n  if(result.path\n    && result.path.length > 0\n    && result.path[0] != '/'\n    && url.indexOf('.sock') == -1) {\n    throw new Error('missing delimiting slash between hosts and options');\n  }\n\n  if(result.query) {\n    for(var name in result.query) {\n      if(name.indexOf(':') != -1) {\n        throw new Error('double colon in host identifier');\n      }\n\n      if(result.query[name] == '') {\n        throw new Error('query parameter ' + name + ' is an incomplete value pair');\n      }\n    }\n  }\n\n  if(result.auth) {\n    var parts = result.auth.split(':');\n    if(url.indexOf(result.auth) != -1 && parts.length > 2) {\n      throw new Error('Username with password containing an unescaped colon');\n    }\n\n    if(url.indexOf(result.auth) != -1 && result.auth.indexOf('@') != -1) {\n      throw new Error('Username containing an unescaped at-sign');\n    }\n  }\n\n  // Remove query\n  var clean = url.split('?').shift();\n\n  // Extract the list of hosts\n  var strings = clean.split(',');\n  var hosts = [];\n\n  for(var i = 0; i < strings.length; i++) {\n    var hostString = strings[i];\n\n    if(hostString.indexOf('mongodb') != -1) {\n      if(hostString.indexOf('@') != -1) {\n        hosts.push(hostString.split('@').pop())\n      } else {\n        hosts.push(hostString.substr('mongodb://'.length));\n      }\n    } else if(hostString.indexOf('/') != -1) {\n      hosts.push(hostString.split('/').shift());\n    } else if(hostString.indexOf('/') == -1) {\n      hosts.push(hostString.trim());\n    }\n  }\n\n  for(var i = 0; i < hosts.length; i++) {\n    var r = parser.parse(f('mongodb://%s', hosts[i].trim()));\n    if(r.path && r.path.indexOf(':') != -1) {\n      throw new Error('double colon in host identifier');\n    }\n  }\n\n  // If we have a ? mark cut the query elements off\n  if(url.indexOf(\"?\") != -1) {\n    query_string_part = url.substr(url.indexOf(\"?\") + 1);\n    connection_part = url.substring(\"mongodb://\".length, url.indexOf(\"?\"))\n  } else {\n    connection_part = url.substring(\"mongodb://\".length);\n  }\n\n  // Check if we have auth params\n  if(connection_part.indexOf(\"@\") != -1) {\n    auth_part = connection_part.split(\"@\")[0];\n    connection_part = connection_part.split(\"@\")[1];\n  }\n\n  // Check if the connection string has a db\n  if(connection_part.indexOf(\".sock\") != -1) {\n    if(connection_part.indexOf(\".sock/\") != -1) {\n      dbName = connection_part.split(\".sock/\")[1];\n      connection_part = connection_part.split(\"/\", connection_part.indexOf(\".sock\") + \".sock\".length);\n    }\n  } else if(connection_part.indexOf(\"/\") != -1) {\n    dbName = connection_part.split(\"/\")[1];\n    connection_part = connection_part.split(\"/\")[0];\n  }\n\n  // Result object\n  var object = {};\n\n  // Pick apart the authentication part of the string\n  var authPart = auth_part || '';\n  var auth = authPart.split(':', 2);\n\n  // Decode the URI components\n  auth[0] = decodeURIComponent(auth[0]);\n  if(auth[1]){\n    auth[1] = decodeURIComponent(auth[1]);\n  }\n\n  // Add auth to final object if we have 2 elements\n  if(auth.length == 2) object.auth = {user: auth[0], password: auth[1]};\n\n  // Variables used for temporary storage\n  var hostPart;\n  var urlOptions;\n  var servers;\n  var serverOptions = {socketOptions: {}};\n  var dbOptions = {read_preference_tags: []};\n  var replSetServersOptions = {socketOptions: {}};\n  // Add server options to final object\n  object.server_options = serverOptions;\n  object.db_options = dbOptions;\n  object.rs_options = replSetServersOptions;\n  object.mongos_options = {};\n\n  // Let's check if we are using a domain socket\n  if(url.match(/\\.sock/)) {\n    // Split out the socket part\n    var domainSocket = url.substring(\n        url.indexOf(\"mongodb://\") + \"mongodb://\".length\n      , url.lastIndexOf(\".sock\") + \".sock\".length);\n    // Clean out any auth stuff if any\n    if(domainSocket.indexOf(\"@\") != -1) domainSocket = domainSocket.split(\"@\")[1];\n    servers = [{domain_socket: domainSocket}];\n  } else {\n    // Split up the db\n    hostPart = connection_part;\n    // Deduplicate servers\n    var deduplicatedServers = {};\n\n    // Parse all server results\n    servers = hostPart.split(',').map(function(h) {\n      var _host, _port, ipv6match;\n      //check if it matches [IPv6]:port, where the port number is optional\n      if ((ipv6match = /\\[([^\\]]+)\\](?:\\:(.+))?/.exec(h))) {\n        _host = ipv6match[1];\n        _port = parseInt(ipv6match[2], 10) || 27017;\n      } else {\n        //otherwise assume it's IPv4, or plain hostname\n        var hostPort = h.split(':', 2);\n        _host = hostPort[0] || 'localhost';\n        _port = hostPort[1] != null ? parseInt(hostPort[1], 10) : 27017;\n        // Check for localhost?safe=true style case\n        if(_host.indexOf(\"?\") != -1) _host = _host.split(/\\?/)[0];\n      }\n\n      // No entry returned for duplicate servr\n      if(deduplicatedServers[_host + \"_\" + _port]) return null;\n      deduplicatedServers[_host + \"_\" + _port] = 1;\n\n      // Return the mapped object\n      return {host: _host, port: _port};\n    }).filter(function(x) {\n      return x != null;\n    });\n  }\n\n  // Get the db name\n  object.dbName = dbName || 'admin';\n  // Split up all the options\n  urlOptions = (query_string_part || '').split(/[&;]/);\n  // Ugh, we have to figure out which options go to which constructor manually.\n  urlOptions.forEach(function(opt) {\n    if(!opt) return;\n    var splitOpt = opt.split('='), name = splitOpt[0], value = splitOpt[1];\n    // Options implementations\n    switch(name) {\n      case 'slaveOk':\n      case 'slave_ok':\n        serverOptions.slave_ok = (value == 'true');\n        dbOptions.slaveOk = (value == 'true');\n        break;\n      case 'maxPoolSize':\n      case 'poolSize':\n        serverOptions.poolSize = parseInt(value, 10);\n        replSetServersOptions.poolSize = parseInt(value, 10);\n        break;\n      case 'autoReconnect':\n      case 'auto_reconnect':\n        serverOptions.auto_reconnect = (value == 'true');\n        break;\n      case 'minPoolSize':\n        throw new Error(\"minPoolSize not supported\");\n      case 'maxIdleTimeMS':\n        throw new Error(\"maxIdleTimeMS not supported\");\n      case 'waitQueueMultiple':\n        throw new Error(\"waitQueueMultiple not supported\");\n      case 'waitQueueTimeoutMS':\n        throw new Error(\"waitQueueTimeoutMS not supported\");\n      case 'uuidRepresentation':\n        throw new Error(\"uuidRepresentation not supported\");\n      case 'ssl':\n        if(value == 'prefer') {\n          serverOptions.ssl = value;\n          replSetServersOptions.ssl = value;\n          break;\n        }\n        serverOptions.ssl = (value == 'true');\n        replSetServersOptions.ssl = (value == 'true');\n        break;\n      case 'sslValidate':\n        serverOptions.sslValidate = (value == 'true');\n        replSetServerOptions.sslValidate = (value == 'true');\n        break;\n      case 'replicaSet':\n      case 'rs_name':\n        replSetServersOptions.rs_name = value;\n        break;\n      case 'reconnectWait':\n        replSetServersOptions.reconnectWait = parseInt(value, 10);\n        break;\n      case 'retries':\n        replSetServersOptions.retries = parseInt(value, 10);\n        break;\n      case 'readSecondary':\n      case 'read_secondary':\n        replSetServersOptions.read_secondary = (value == 'true');\n        break;\n      case 'fsync':\n        dbOptions.fsync = (value == 'true');\n        break;\n      case 'journal':\n        dbOptions.j = (value == 'true');\n        break;\n      case 'safe':\n        dbOptions.safe = (value == 'true');\n        break;\n      case 'nativeParser':\n      case 'native_parser':\n        dbOptions.native_parser = (value == 'true');\n        break;\n      case 'readConcernLevel':\n        dbOptions.readConcern = {level: value};\n        break;\n      case 'connectTimeoutMS':\n        serverOptions.socketOptions.connectTimeoutMS = parseInt(value, 10);\n        replSetServersOptions.socketOptions.connectTimeoutMS = parseInt(value, 10);\n        break;\n      case 'socketTimeoutMS':\n        serverOptions.socketOptions.socketTimeoutMS = parseInt(value, 10);\n        replSetServersOptions.socketOptions.socketTimeoutMS = parseInt(value, 10);\n        break;\n      case 'w':\n        dbOptions.w = parseInt(value, 10);\n        if(isNaN(dbOptions.w)) dbOptions.w = value;\n        break;\n      case 'authSource':\n        dbOptions.authSource = value;\n        break;\n      case 'gssapiServiceName':\n        dbOptions.gssapiServiceName = value;\n        break;\n      case 'authMechanism':\n        if(value == 'GSSAPI') {\n          // If no password provided decode only the principal\n          if(object.auth == null) {\n            var urlDecodeAuthPart = decodeURIComponent(authPart);\n            if(urlDecodeAuthPart.indexOf(\"@\") == -1) throw new Error(\"GSSAPI requires a provided principal\");\n            object.auth = {user: urlDecodeAuthPart, password: null};\n          } else {\n            object.auth.user = decodeURIComponent(object.auth.user);\n          }\n        } else if(value == 'MONGODB-X509') {\n          object.auth = {user: decodeURIComponent(authPart)};\n        }\n\n        // Only support GSSAPI or MONGODB-CR for now\n        if(value != 'GSSAPI'\n          && value != 'MONGODB-X509'\n          && value != 'MONGODB-CR'\n          && value != 'DEFAULT'\n          && value != 'SCRAM-SHA-1'\n          && value != 'PLAIN')\n            throw new Error(\"only DEFAULT, GSSAPI, PLAIN, MONGODB-X509, SCRAM-SHA-1 or MONGODB-CR is supported by authMechanism\");\n\n        // Authentication mechanism\n        dbOptions.authMechanism = value;\n        break;\n      case 'authMechanismProperties':\n        // Split up into key, value pairs\n        var values = value.split(',');\n        var o = {};\n        // For each value split into key, value\n        values.forEach(function(x) {\n          var v = x.split(':');\n          o[v[0]] = v[1];\n        });\n\n        // Set all authMechanismProperties\n        dbOptions.authMechanismProperties = o;\n        // Set the service name value\n        if(typeof o.SERVICE_NAME == 'string') dbOptions.gssapiServiceName = o.SERVICE_NAME;\n        break;\n      case 'wtimeoutMS':\n        dbOptions.wtimeout = parseInt(value, 10);\n        break;\n      case 'readPreference':\n        if(!ReadPreference.isValid(value)) throw new Error(\"readPreference must be either primary/primaryPreferred/secondary/secondaryPreferred/nearest\");\n        dbOptions.readPreference = value;\n        break;\n      case 'readPreferenceTags':\n        // Decode the value\n        value = decodeURIComponent(value);\n        // Contains the tag object\n        var tagObject = {};\n        if(value == null || value == '') {\n          dbOptions.read_preference_tags.push(tagObject);\n          break;\n        }\n\n        // Split up the tags\n        var tags = value.split(/\\,/);\n        for(var i = 0; i < tags.length; i++) {\n          var parts = tags[i].trim().split(/\\:/);\n          tagObject[parts[0]] = parts[1];\n        }\n\n        // Set the preferences tags\n        dbOptions.read_preference_tags.push(tagObject);\n        break;\n      default:\n        break;\n    }\n  });\n\n  // No tags: should be null (not [])\n  if(dbOptions.read_preference_tags.length === 0) {\n    dbOptions.read_preference_tags = null;\n  }\n\n  // Validate if there are an invalid write concern combinations\n  if((dbOptions.w == -1 || dbOptions.w == 0) && (\n      dbOptions.journal == true\n      || dbOptions.fsync == true\n      || dbOptions.safe == true)) throw new Error(\"w set to -1 or 0 cannot be combined with safe/w/journal/fsync\")\n\n  // If no read preference set it to primary\n  if(!dbOptions.readPreference) {\n    dbOptions.readPreference = 'primary';\n  }\n\n  // Add servers to result\n  object.servers = servers;\n  // Returned parsed object\n  return object;\n}\n"]}