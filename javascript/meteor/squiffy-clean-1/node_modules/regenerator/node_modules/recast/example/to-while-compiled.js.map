{"version":3,"sources":["to-while"],"names":[],"mappings":";;;;;;;;AAQA,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC/B,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC/B,IAAI,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;AACzB,IAAI,CAAC,GAAG,KAAK,CAAC,UAAU,CAAC;AACzB,IAAI,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC;;AAEvB,MAAM,CAAC,GAAG,CAAC,UAAS,GAAG,EAAE,QAAQ,EAAE;AAC/B,UAAM,CAAC,KAAK,CAAC,GAAG,EAAE;AACd,yBAAiB,EAAE,2BAAS,IAAI,EAAE;AAC9B,gBAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC;;AAEpB,gBAAI,CAAC,OAAO,CACR,GAAG,CAAC,IAAI,EACR,CAAC,CAAC,cAAc,CACZ,GAAG,CAAC,IAAI,EACR,oBAAoB,CAAC,GAAG,EAAE,GAAG,CAAC,MAAM,CAAC,CACxC,CACJ,CAAC;;AAEF,gBAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;SACvB;;AAED,6BAAqB,EAAE,+BAAS,IAAI,EAAE;AAClC,gBAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;AACrB,mBAAO,CAAC,CAAC,cAAc,CACnB,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,EACf,oBAAoB,CAChB,IAAI,EACJ,CAAC,CAAC,WAAW,CACT,IAAI,CAAC,IAAI,EACT,CAAC,CAAC,cAAc,EAAE,CACrB,CACJ,CACJ,CAAC;SACL;KACJ,CAAC,CAAC;;AAEH,YAAQ,CAAC,GAAG,CAAC,CAAC;CACjB,CAAC,CAAC;;AAEH,SAAS,oBAAoB,CAAC,IAAI,EAAE,QAAQ,EAAE;AAC1C,QAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;;AAErB,QAAI,CAAC,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE;AAC9B,gBAAQ,GAAG,CAAC,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC;KAC9C;;AAED,QAAI,CAAC,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;AAC9B,YAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;KAC5B,MAAM;AACH,YAAI,GAAG,CAAC,CAAC,cAAc,CAAC,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC;AAC1C,YAAI,CAAC,IAAI,GAAG,IAAI,CAAC;KACpB;;AAED,UAAM,CAAC,KAAK,CAAC,IAAI,EAAE;AACf,8BAAsB,EAAE,gCAAS,IAAI,EAAE;AACnC,gBAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC;;AAEpB,kBAAM,CAAC,KAAK,CACR,GAAG,CAAC,KAAK,EAAE,IAAI,EACf,oDAAoD,CACvD,CAAC;;AAEF,gBAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;AAClC,mBAAO,KAAK,CAAC;SAChB;;;AAGD,2BAAmB,EAAE,+BAAW,EAAE;AAClC,yBAAiB,EAAE,6BAAW,EAAE;AAChC,2BAAmB,EAAE,+BAAW,EAAE;AAClC,6BAAqB,EAAE,iCAAW,EAAE;KACvC,CAAC,CAAC;;AAEH,WAAO,IAAI,CAAC;CACf","file":"to-while-compiled.js","sourcesContent":["#!/usr/bin/env node\n\n// This script converts for and do-while loops into equivalent while loops.\n// Note that for-in statements are left unmodified, as they do not have a\n// simple analogy to while loops. Also note that labeled continue statements\n// are not correctly handled at this point, and will trigger an assertion\n// failure if encountered.\n\nvar assert = require(\"assert\");\nvar recast = require(\"recast\");\nvar types = recast.types;\nvar n = types.namedTypes;\nvar b = types.builders;\n\nrecast.run(function(ast, callback) {\n    recast.visit(ast, {\n        visitForStatement: function(path) {\n            var fst = path.node;\n\n            path.replace(\n                fst.init,\n                b.whileStatement(\n                    fst.test,\n                    insertBeforeLoopback(fst, fst.update)\n                )\n            );\n\n            this.traverse(path);\n        },\n\n        visitDoWhileStatement: function(path) {\n            var dwst = path.node;\n            return b.whileStatement(\n                b.literal(true),\n                insertBeforeLoopback(\n                    dwst,\n                    b.ifStatement(\n                        dwst.test,\n                        b.breakStatement()\n                    )\n                )\n            );\n        }\n    });\n\n    callback(ast);\n});\n\nfunction insertBeforeLoopback(loop, toInsert) {\n    var body = loop.body;\n\n    if (!n.Statement.check(toInsert)) {\n        toInsert = b.expressionStatement(toInsert);\n    }\n\n    if (n.BlockStatement.check(body)) {\n        body.body.push(toInsert);\n    } else {\n        body = b.blockStatement([body, toInsert]);\n        loop.body = body;\n    }\n\n    recast.visit(body, {\n        visitContinueStatement: function(path) {\n            var cst = path.node;\n\n            assert.equal(\n                cst.label, null,\n                \"Labeled continue statements are not yet supported.\"\n            );\n\n            path.replace(toInsert, path.node);\n            return false;\n        },\n\n        // Do not descend into nested loops.\n        visitWhileStatement: function() {},\n        visitForStatement: function() {},\n        visitForInStatement: function() {},\n        visitDoWhileStatement: function() {}\n    });\n\n    return body;\n}\n"]}