{"version":3,"sources":["printer.js"],"names":[],"mappings":"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","file":"printer-compiled.js","sourcesContent":["var assert = require(\"assert\");\nvar sourceMap = require(\"source-map\");\nvar printComments = require(\"./comments\").printComments;\nvar linesModule = require(\"./lines\");\nvar fromString = linesModule.fromString;\nvar concat = linesModule.concat;\nvar normalizeOptions = require(\"./options\").normalize;\nvar getReprinter = require(\"./patcher\").getReprinter;\nvar types = require(\"./types\");\nvar namedTypes = types.namedTypes;\nvar isString = types.builtInTypes.string;\nvar isObject = types.builtInTypes.object;\nvar FastPath = require(\"./fast-path\");\nvar util = require(\"./util\");\n\nfunction PrintResult(code, sourceMap) {\n    assert.ok(this instanceof PrintResult);\n\n    isString.assert(code);\n    this.code = code;\n\n    if (sourceMap) {\n        isObject.assert(sourceMap);\n        this.map = sourceMap;\n    }\n}\n\nvar PRp = PrintResult.prototype;\nvar warnedAboutToString = false;\n\nPRp.toString = function() {\n    if (!warnedAboutToString) {\n        console.warn(\n            \"Deprecation warning: recast.print now returns an object with \" +\n            \"a .code property. You appear to be treating the object as a \" +\n            \"string, which might still work but is strongly discouraged.\"\n        );\n\n        warnedAboutToString = true;\n    }\n\n    return this.code;\n};\n\nvar emptyPrintResult = new PrintResult(\"\");\n\nfunction Printer(originalOptions) {\n    assert.ok(this instanceof Printer);\n\n    var explicitTabWidth = originalOptions && originalOptions.tabWidth;\n    var options = normalizeOptions(originalOptions);\n    assert.notStrictEqual(options, originalOptions);\n\n    // It's common for client code to pass the same options into both\n    // recast.parse and recast.print, but the Printer doesn't need (and\n    // can be confused by) options.sourceFileName, so we null it out.\n    options.sourceFileName = null;\n\n    function printWithComments(path) {\n        assert.ok(path instanceof FastPath);\n        return printComments(path, print);\n    }\n\n    function print(path, includeComments) {\n        if (includeComments)\n            return printWithComments(path);\n\n        assert.ok(path instanceof FastPath);\n\n        if (!explicitTabWidth) {\n            var oldTabWidth = options.tabWidth;\n            var loc = path.getNode().loc;\n            if (loc && loc.lines && loc.lines.guessTabWidth) {\n                options.tabWidth = loc.lines.guessTabWidth();\n                var lines = maybeReprint(path);\n                options.tabWidth = oldTabWidth;\n                return lines;\n            }\n        }\n\n        return maybeReprint(path);\n    }\n\n    function maybeReprint(path) {\n        var reprinter = getReprinter(path);\n        if (reprinter)\n            return maybeAddParens(path, reprinter(print));\n        return printRootGenerically(path);\n    }\n\n    // Print the root node generically, but then resume reprinting its\n    // children non-generically.\n    function printRootGenerically(path) {\n        return genericPrint(path, options, printWithComments);\n    }\n\n    // Print the entire AST generically.\n    function printGenerically(path) {\n        return genericPrint(path, options, printGenerically);\n    }\n\n    this.print = function(ast) {\n        if (!ast) {\n            return emptyPrintResult;\n        }\n\n        var lines = print(FastPath.from(ast), true);\n\n        return new PrintResult(\n            lines.toString(options),\n            util.composeSourceMaps(\n                options.inputSourceMap,\n                lines.getSourceMap(\n                    options.sourceMapName,\n                    options.sourceRoot\n                )\n            )\n        );\n    };\n\n    this.printGenerically = function(ast) {\n        if (!ast) {\n            return emptyPrintResult;\n        }\n\n        var path = FastPath.from(ast);\n        var oldReuseWhitespace = options.reuseWhitespace;\n\n        // Do not reuse whitespace (or anything else, for that matter)\n        // when printing generically.\n        options.reuseWhitespace = false;\n\n        // TODO Allow printing of comments?\n        var pr = new PrintResult(printGenerically(path).toString(options));\n        options.reuseWhitespace = oldReuseWhitespace;\n        return pr;\n    };\n}\n\nexports.Printer = Printer;\n\nfunction maybeAddParens(path, lines) {\n    return path.needsParens() ? concat([\"(\", lines, \")\"]) : lines;\n}\n\nfunction genericPrint(path, options, printPath) {\n    assert.ok(path instanceof FastPath);\n    return maybeAddParens(path, genericPrintNoParens(path, options, printPath));\n}\n\nfunction genericPrintNoParens(path, options, print) {\n    var n = path.getValue();\n\n    if (!n) {\n        return fromString(\"\");\n    }\n\n    if (typeof n === \"string\") {\n        return fromString(n, options);\n    }\n\n    namedTypes.Printable.assert(n);\n\n    switch (n.type) {\n    case \"File\":\n        return path.call(print, \"program\");\n\n    case \"Program\":\n        return path.call(function(bodyPath) {\n            return printStatementSequence(bodyPath, options, print);\n        }, \"body\");\n\n    case \"Noop\": // Babel extension.\n    case \"EmptyStatement\":\n        return fromString(\"\");\n\n    case \"ExpressionStatement\":\n        return concat([path.call(print, \"expression\"), \";\"]);\n\n    case \"ParenthesizedExpression\": // Babel extension.\n        return concat([\"(\", path.call(print, \"expression\"), \")\"]);\n\n    case \"BinaryExpression\":\n    case \"LogicalExpression\":\n    case \"AssignmentExpression\":\n        return fromString(\" \").join([\n            path.call(print, \"left\"),\n            n.operator,\n            path.call(print, \"right\")\n        ]);\n\n    case \"AssignmentPattern\":\n        return concat([\n            path.call(print, \"left\"),\n            \"=\",\n            path.call(print, \"right\")\n        ]);\n\n    case \"MemberExpression\":\n        var parts = [path.call(print, \"object\")];\n\n        var property = path.call(print, \"property\");\n        if (n.computed) {\n            parts.push(\"[\", property, \"]\");\n        } else {\n            parts.push(\".\", property);\n        }\n\n        return concat(parts);\n\n    case \"MetaProperty\":\n        return concat([\n            path.call(print, \"meta\"),\n            \".\",\n            path.call(print, \"property\")\n        ]);\n\n    case \"BindExpression\":\n        var parts = [];\n\n        if (n.object) {\n            parts.push(path.call(print, \"object\"));\n        }\n\n        parts.push(\"::\", path.call(print, \"callee\"));\n\n        return concat(parts);\n\n    case \"Path\":\n        return fromString(\".\").join(n.body);\n\n    case \"Identifier\":\n        return concat([\n            fromString(n.name, options),\n            path.call(print, \"typeAnnotation\")\n        ]);\n\n    case \"SpreadElement\":\n    case \"SpreadElementPattern\":\n    case \"SpreadProperty\":\n    case \"SpreadPropertyPattern\":\n    case \"RestElement\":\n        return concat([\"...\", path.call(print, \"argument\")]);\n\n    case \"FunctionDeclaration\":\n    case \"FunctionExpression\":\n        var parts = [];\n\n        if (n.async)\n            parts.push(\"async \");\n\n        parts.push(\"function\");\n\n        if (n.generator)\n            parts.push(\"*\");\n\n        if (n.id) {\n            parts.push(\n                \" \",\n                path.call(print, \"id\"),\n                path.call(print, \"typeParameters\")\n            );\n        }\n\n        parts.push(\n            \"(\",\n            printFunctionParams(path, options, print),\n            \")\",\n            path.call(print, \"returnType\"),\n            \" \",\n            path.call(print, \"body\")\n        );\n\n        return concat(parts);\n\n    case \"ArrowFunctionExpression\":\n        var parts = [];\n\n        if (n.async)\n            parts.push(\"async \");\n\n        if (\n            n.params.length === 1 &&\n            !n.rest &&\n            n.params[0].type !== 'SpreadElementPattern' &&\n            n.params[0].type !== 'RestElement'\n        ) {\n            parts.push(path.call(print, \"params\", 0));\n        } else {\n            parts.push(\n                \"(\",\n                printFunctionParams(path, options, print),\n                \")\"\n            );\n        }\n\n        parts.push(\" => \", path.call(print, \"body\"));\n\n        return concat(parts);\n\n    case \"MethodDefinition\":\n        var parts = [];\n\n        if (n.static) {\n            parts.push(\"static \");\n        }\n\n        parts.push(printMethod(path, options, print));\n\n        return concat(parts);\n\n    case \"YieldExpression\":\n        var parts = [\"yield\"];\n\n        if (n.delegate)\n            parts.push(\"*\");\n\n        if (n.argument)\n            parts.push(\" \", path.call(print, \"argument\"));\n\n        return concat(parts);\n\n    case \"AwaitExpression\":\n        var parts = [\"await\"];\n\n        if (n.all)\n            parts.push(\"*\");\n\n        if (n.argument)\n            parts.push(\" \", path.call(print, \"argument\"));\n\n        return concat(parts);\n\n    case \"ModuleDeclaration\":\n        var parts = [\"module\", path.call(print, \"id\")];\n\n        if (n.source) {\n            assert.ok(!n.body);\n            parts.push(\"from\", path.call(print, \"source\"));\n        } else {\n            parts.push(path.call(print, \"body\"));\n        }\n\n        return fromString(\" \").join(parts);\n\n    case \"ImportSpecifier\":\n        var parts = [];\n\n        if (n.imported) {\n            parts.push(path.call(print, \"imported\"));\n            if (n.local &&\n                n.local.name !== n.imported.name) {\n                parts.push(\" as \", path.call(print, \"local\"));\n            }\n        } else if (n.id) {\n            parts.push(path.call(print, \"id\"));\n            if (n.name) {\n                parts.push(\" as \", path.call(print, \"name\"));\n            }\n        }\n\n        return concat(parts);\n\n    case \"ExportSpecifier\":\n        var parts = [];\n\n        if (n.local) {\n            parts.push(path.call(print, \"local\"));\n            if (n.exported &&\n                n.exported.name !== n.local.name) {\n                parts.push(\" as \", path.call(print, \"exported\"));\n            }\n        } else if (n.id) {\n            parts.push(path.call(print, \"id\"));\n            if (n.name) {\n                parts.push(\" as \", path.call(print, \"name\"));\n            }\n        }\n\n        return concat(parts);\n\n    case \"ExportBatchSpecifier\":\n        return fromString(\"*\");\n\n    case \"ImportNamespaceSpecifier\":\n        var parts = [\"* as \"];\n        if (n.local) {\n            parts.push(path.call(print, \"local\"));\n        } else if (n.id) {\n            parts.push(path.call(print, \"id\"));\n        }\n        return concat(parts);\n\n    case \"ImportDefaultSpecifier\":\n        if (n.local) {\n            return path.call(print, \"local\");\n        }\n        return path.call(print, \"id\");\n\n    case \"ExportDeclaration\":\n        var parts = [\"export\"];\n\n        if (n[\"default\"]) {\n            parts.push(\" default\");\n\n        } else if (n.specifiers &&\n                   n.specifiers.length > 0) {\n\n            if (n.specifiers.length === 1 &&\n                n.specifiers[0].type === \"ExportBatchSpecifier\") {\n                parts.push(\" *\");\n            } else {\n                parts.push(\n                    \" { \",\n                    fromString(\", \").join(path.map(print, \"specifiers\")),\n                    \" }\"\n                );\n            }\n\n            if (n.source)\n                parts.push(\" from \", path.call(print, \"source\"));\n\n            parts.push(\";\");\n\n            return concat(parts);\n        }\n\n        if (n.declaration) {\n            var decLines = path.call(print, \"declaration\");\n            parts.push(\" \", decLines);\n            if (lastNonSpaceCharacter(decLines) !== \";\") {\n                parts.push(\";\");\n            }\n        }\n\n        return concat(parts);\n\n    case \"ExportDefaultDeclaration\":\n        return concat([\n            \"export default \",\n            path.call(print, \"declaration\")\n        ]);\n\n    case \"ExportNamedDeclaration\":\n        var parts = [\"export \"];\n\n        if (n.declaration) {\n            parts.push(path.call(print, \"declaration\"));\n        }\n\n        if (n.specifiers &&\n            n.specifiers.length > 0) {\n            parts.push(\n                n.declaration ? \", {\" : \"{\",\n                fromString(\", \").join(path.map(print, \"specifiers\")),\n                \"}\"\n            );\n        }\n\n        if (n.source) {\n            parts.push(\" from \", path.call(print, \"source\"));\n        }\n\n        return concat(parts);\n\n    case \"ExportAllDeclaration\":\n        var parts = [\"export *\"];\n\n        if (n.exported) {\n            parts.push(\" as \", path.call(print, \"exported\"));\n        }\n\n        return concat([\n            \" from \",\n            path.call(print, \"source\")\n        ]);\n\n    case \"ExportNamespaceSpecifier\":\n        return concat([\"* as \", path.call(print, \"exported\")]);\n\n    case \"ExportDefaultSpecifier\":\n        return path.call(print, \"exported\");\n\n    case \"ImportDeclaration\":\n        var parts = [\"import \"];\n\n        if (n.importKind && n.importKind !== \"value\") {\n            parts.push(n.importKind + \" \");\n        }\n\n        if (n.specifiers &&\n            n.specifiers.length > 0) {\n\n            var foundImportSpecifier = false;\n\n            path.each(function(specifierPath) {\n                var i = specifierPath.getName();\n                if (i > 0) {\n                    parts.push(\", \");\n                }\n\n                var value = specifierPath.getValue();\n\n                if (namedTypes.ImportDefaultSpecifier.check(value) ||\n                    namedTypes.ImportNamespaceSpecifier.check(value)) {\n                    assert.strictEqual(foundImportSpecifier, false);\n                } else {\n                    namedTypes.ImportSpecifier.assert(value);\n                    if (!foundImportSpecifier) {\n                        foundImportSpecifier = true;\n                        parts.push(\"{\");\n                    }\n                }\n\n                parts.push(print(specifierPath));\n            }, \"specifiers\");\n\n            if (foundImportSpecifier) {\n                parts.push(\"}\");\n            }\n\n            parts.push(\" from \");\n        }\n\n        parts.push(path.call(print, \"source\"), \";\");\n\n        return concat(parts);\n\n    case \"BlockStatement\":\n        var naked = path.call(function(bodyPath) {\n            return printStatementSequence(bodyPath, options, print);\n        }, \"body\");\n\n        if (naked.isEmpty()) {\n            return fromString(\"{}\");\n        }\n\n        return concat([\n            \"{\\n\",\n            naked.indent(options.tabWidth),\n            \"\\n}\"\n        ]);\n\n    case \"ReturnStatement\":\n        var parts = [\"return\"];\n\n        if (n.argument) {\n            var argLines = path.call(print, \"argument\");\n            if (argLines.length > 1 &&\n                (namedTypes.XJSElement &&\n                 namedTypes.XJSElement.check(n.argument) ||\n                 namedTypes.JSXElement &&\n                 namedTypes.JSXElement.check(n.argument))) {\n                parts.push(\n                    \" (\\n\",\n                    argLines.indent(options.tabWidth),\n                    \"\\n)\"\n                );\n            } else {\n                parts.push(\" \", argLines);\n            }\n        }\n\n        parts.push(\";\");\n\n        return concat(parts);\n\n    case \"CallExpression\":\n        return concat([\n            path.call(print, \"callee\"),\n            printArgumentsList(path, options, print)\n        ]);\n\n    case \"ObjectExpression\":\n    case \"ObjectPattern\":\n    case \"ObjectTypeAnnotation\":\n        var allowBreak = false;\n        var isTypeAnnotation = n.type === \"ObjectTypeAnnotation\";\n        var separator = isTypeAnnotation ? ';' : ',';\n        var fields = [];\n\n        if (isTypeAnnotation) {\n            fields.push(\"indexers\", \"callProperties\");\n        }\n\n        fields.push(\"properties\");\n\n        var len = 0;\n        fields.forEach(function(field) {\n            len += n[field].length;\n        });\n\n        var oneLine = (isTypeAnnotation && len === 1) || len === 0;\n        var parts = [oneLine ? \"{\" : \"{\\n\"];\n\n        var i = 0;\n        fields.forEach(function(field) {\n            path.each(function(childPath) {\n                var lines = print(childPath);\n\n                if (!oneLine) {\n                    lines = lines.indent(options.tabWidth);\n                }\n\n                var multiLine = !isTypeAnnotation && lines.length > 1;\n                if (multiLine && allowBreak) {\n                    // Similar to the logic for BlockStatement.\n                    parts.push(\"\\n\");\n                }\n\n                parts.push(lines);\n\n                if (i < len - 1) {\n                    // Add an extra line break if the previous object property\n                    // had a multi-line value.\n                    parts.push(separator + (multiLine ? \"\\n\\n\" : \"\\n\"));\n                    allowBreak = !multiLine;\n                } else if (len !== 1 && isTypeAnnotation) {\n                    parts.push(separator);\n                } else if (options.trailingComma) {\n                    parts.push(separator);\n                }\n                i++;\n            }, field);\n        });\n\n        parts.push(oneLine ? \"}\" : \"\\n}\");\n\n        return concat(parts);\n\n    case \"PropertyPattern\":\n        return concat([\n            path.call(print, \"key\"),\n            \": \",\n            path.call(print, \"pattern\")\n        ]);\n\n    case \"Property\": // Non-standard AST node type.\n        if (n.method || n.kind === \"get\" || n.kind === \"set\") {\n            return printMethod(path, options, print);\n        }\n\n        var parts = [];\n\n        if (n.decorators) {\n            path.each(function(decoratorPath) {\n                parts.push(print(decoratorPath), \"\\n\");\n            }, \"decorators\");\n        }\n\n        var key = path.call(print, \"key\");\n        if (n.computed) {\n            parts.push(\"[\", key, \"]\");\n        } else {\n            parts.push(key);\n        }\n\n        if (! n.shorthand) {\n            parts.push(\": \", path.call(print, \"value\"));\n        }\n\n        return concat(parts);\n\n    case \"Decorator\":\n        return concat([\"@\", path.call(print, \"expression\")]);\n\n    case \"ArrayExpression\":\n    case \"ArrayPattern\":\n        var elems = n.elements,\n            len = elems.length;\n\n        var printed = path.map(print, \"elements\");\n        var joined = fromString(\", \").join(printed);\n        var oneLine = joined.getLineLength(1) <= options.wrapColumn;\n        var parts = [oneLine ? \"[\" : \"[\\n\"];\n\n        path.each(function(elemPath) {\n            var i = elemPath.getName();\n            var elem = elemPath.getValue();\n            if (!elem) {\n                // If the array expression ends with a hole, that hole\n                // will be ignored by the interpreter, but if it ends with\n                // two (or more) holes, we need to write out two (or more)\n                // commas so that the resulting code is interpreted with\n                // both (all) of the holes.\n                parts.push(\",\");\n            } else {\n                var lines = printed[i];\n                if (oneLine) {\n                    if (i > 0)\n                        parts.push(\" \");\n                } else {\n                    lines = lines.indent(options.tabWidth);\n                }\n                parts.push(lines);\n                if (i < len - 1 || (!oneLine && options.trailingComma))\n                    parts.push(\",\");\n                if (!oneLine)\n                    parts.push(\"\\n\");\n            }\n        }, \"elements\");\n\n        parts.push(\"]\");\n\n        return concat(parts);\n\n    case \"SequenceExpression\":\n        return fromString(\", \").join(path.map(print, \"expressions\"));\n\n    case \"ThisExpression\":\n        return fromString(\"this\");\n\n    case \"Super\":\n        return fromString(\"super\");\n\n    case \"Literal\":\n        if (typeof n.value !== \"string\")\n            return fromString(n.value, options);\n\n        return fromString(nodeStr(n.value, options), options);\n\n    case \"ModuleSpecifier\":\n        if (n.local) {\n            throw new Error(\n                \"The ESTree ModuleSpecifier type should be abstract\"\n            );\n        }\n\n        // The Esprima ModuleSpecifier type is just a string-valued\n        // Literal identifying the imported-from module.\n        return fromString(nodeStr(n.value, options), options);\n\n    case \"UnaryExpression\":\n        var parts = [n.operator];\n        if (/[a-z]$/.test(n.operator))\n            parts.push(\" \");\n        parts.push(path.call(print, \"argument\"));\n        return concat(parts);\n\n    case \"UpdateExpression\":\n        var parts = [path.call(print, \"argument\"), n.operator];\n\n        if (n.prefix)\n            parts.reverse();\n\n        return concat(parts);\n\n    case \"ConditionalExpression\":\n        return concat([\n            \"(\", path.call(print, \"test\"),\n            \" ? \", path.call(print, \"consequent\"),\n            \" : \", path.call(print, \"alternate\"), \")\"\n        ]);\n\n    case \"NewExpression\":\n        var parts = [\"new \", path.call(print, \"callee\")];\n        var args = n.arguments;\n        if (args) {\n            parts.push(printArgumentsList(path, options, print));\n        }\n\n        return concat(parts);\n\n    case \"VariableDeclaration\":\n        var parts = [n.kind, \" \"];\n        var maxLen = 0;\n        var printed = path.map(function(childPath) {\n            var lines = print(childPath);\n            maxLen = Math.max(lines.length, maxLen);\n            return lines;\n        }, \"declarations\");\n\n        if (maxLen === 1) {\n            parts.push(fromString(\", \").join(printed));\n        } else if (printed.length > 1 ) {\n            parts.push(\n                fromString(\",\\n\").join(printed)\n                    .indentTail(n.kind.length + 1)\n            );\n        } else {\n            parts.push(printed[0]);\n        }\n\n        // We generally want to terminate all variable declarations with a\n        // semicolon, except when they are children of for loops.\n        var parentNode = path.getParentNode();\n        if (!namedTypes.ForStatement.check(parentNode) &&\n            !namedTypes.ForInStatement.check(parentNode) &&\n            !(namedTypes.ForOfStatement &&\n              namedTypes.ForOfStatement.check(parentNode))) {\n            parts.push(\";\");\n        }\n\n        return concat(parts);\n\n    case \"VariableDeclarator\":\n        return n.init ? fromString(\" = \").join([\n            path.call(print, \"id\"),\n            path.call(print, \"init\")\n        ]) : path.call(print, \"id\");\n\n    case \"WithStatement\":\n        return concat([\n            \"with (\",\n            path.call(print, \"object\"),\n            \") \",\n            path.call(print, \"body\")\n        ]);\n\n    case \"IfStatement\":\n        var con = adjustClause(path.call(print, \"consequent\"), options),\n            parts = [\"if (\", path.call(print, \"test\"), \")\", con];\n\n        if (n.alternate)\n            parts.push(\n                endsWithBrace(con) ? \" else\" : \"\\nelse\",\n                adjustClause(path.call(print, \"alternate\"), options));\n\n        return concat(parts);\n\n    case \"ForStatement\":\n        // TODO Get the for (;;) case right.\n        var init = path.call(print, \"init\"),\n            sep = init.length > 1 ? \";\\n\" : \"; \",\n            forParen = \"for (\",\n            indented = fromString(sep).join([\n                init,\n                path.call(print, \"test\"),\n                path.call(print, \"update\")\n            ]).indentTail(forParen.length),\n            head = concat([forParen, indented, \")\"]),\n            clause = adjustClause(path.call(print, \"body\"), options),\n            parts = [head];\n\n        if (head.length > 1) {\n            parts.push(\"\\n\");\n            clause = clause.trimLeft();\n        }\n\n        parts.push(clause);\n\n        return concat(parts);\n\n    case \"WhileStatement\":\n        return concat([\n            \"while (\",\n            path.call(print, \"test\"),\n            \")\",\n            adjustClause(path.call(print, \"body\"), options)\n        ]);\n\n    case \"ForInStatement\":\n        // Note: esprima can't actually parse \"for each (\".\n        return concat([\n            n.each ? \"for each (\" : \"for (\",\n            path.call(print, \"left\"),\n            \" in \",\n            path.call(print, \"right\"),\n            \")\",\n            adjustClause(path.call(print, \"body\"), options)\n        ]);\n\n    case \"ForOfStatement\":\n        return concat([\n            \"for (\",\n            path.call(print, \"left\"),\n            \" of \",\n            path.call(print, \"right\"),\n            \")\",\n            adjustClause(path.call(print, \"body\"), options)\n        ]);\n\n    case \"DoWhileStatement\":\n        var doBody = concat([\n            \"do\",\n            adjustClause(path.call(print, \"body\"), options)\n        ]), parts = [doBody];\n\n        if (endsWithBrace(doBody))\n            parts.push(\" while\");\n        else\n            parts.push(\"\\nwhile\");\n\n        parts.push(\" (\", path.call(print, \"test\"), \");\");\n\n        return concat(parts);\n\n    case \"DoExpression\":\n        var statements = path.call(function(bodyPath) {\n            return printStatementSequence(bodyPath, options, print);\n        }, \"body\");\n\n        return concat([\n            \"do {\\n\",\n            statements.indent(options.tabWidth),\n            \"\\n}\"\n        ]);\n\n    case \"BreakStatement\":\n        var parts = [\"break\"];\n        if (n.label)\n            parts.push(\" \", path.call(print, \"label\"));\n        parts.push(\";\");\n        return concat(parts);\n\n    case \"ContinueStatement\":\n        var parts = [\"continue\"];\n        if (n.label)\n            parts.push(\" \", path.call(print, \"label\"));\n        parts.push(\";\");\n        return concat(parts);\n\n    case \"LabeledStatement\":\n        return concat([\n            path.call(print, \"label\"),\n            \":\\n\",\n            path.call(print, \"body\")\n        ]);\n\n    case \"TryStatement\":\n        var parts = [\n            \"try \",\n            path.call(print, \"block\")\n        ];\n\n        if (n.handler) {\n            parts.push(\" \", path.call(print, \"handler\"));\n        } else if (n.handlers) {\n            path.each(function(handlerPath) {\n                parts.push(\" \", print(handlerPath));\n            }, \"handlers\");\n        }\n\n        if (n.finalizer) {\n            parts.push(\" finally \", path.call(print, \"finalizer\"));\n        }\n\n        return concat(parts);\n\n    case \"CatchClause\":\n        var parts = [\"catch (\", path.call(print, \"param\")];\n\n        if (n.guard)\n            // Note: esprima does not recognize conditional catch clauses.\n            parts.push(\" if \", path.call(print, \"guard\"));\n\n        parts.push(\") \", path.call(print, \"body\"));\n\n        return concat(parts);\n\n    case \"ThrowStatement\":\n        return concat([\"throw \", path.call(print, \"argument\"), \";\"]);\n\n    case \"SwitchStatement\":\n        return concat([\n            \"switch (\",\n            path.call(print, \"discriminant\"),\n            \") {\\n\",\n            fromString(\"\\n\").join(path.map(print, \"cases\")),\n            \"\\n}\"\n        ]);\n\n        // Note: ignoring n.lexical because it has no printing consequences.\n\n    case \"SwitchCase\":\n        var parts = [];\n\n        if (n.test)\n            parts.push(\"case \", path.call(print, \"test\"), \":\");\n        else\n            parts.push(\"default:\");\n\n        if (n.consequent.length > 0) {\n            parts.push(\"\\n\", path.call(function(consequentPath) {\n                return printStatementSequence(consequentPath, options, print);\n            }, \"consequent\").indent(options.tabWidth));\n        }\n\n        return concat(parts);\n\n    case \"DebuggerStatement\":\n        return fromString(\"debugger;\");\n\n    // JSX extensions below.\n\n    case \"XJSAttribute\":\n    case \"JSXAttribute\":\n        var parts = [path.call(print, \"name\")];\n        if (n.value)\n            parts.push(\"=\", path.call(print, \"value\"));\n        return concat(parts);\n\n    case \"XJSIdentifier\":\n    case \"JSXIdentifier\":\n        return fromString(n.name, options);\n\n    case \"XJSNamespacedName\":\n    case \"JSXNamespacedName\":\n        return fromString(\":\").join([\n            path.call(print, \"namespace\"),\n            path.call(print, \"name\")\n        ]);\n\n    case \"XJSMemberExpression\":\n    case \"JSXMemberExpression\":\n        return fromString(\".\").join([\n            path.call(print, \"object\"),\n            path.call(print, \"property\")\n        ]);\n\n    case \"XJSSpreadAttribute\":\n    case \"JSXSpreadAttribute\":\n        return concat([\"{...\", path.call(print, \"argument\"), \"}\"]);\n\n    case \"XJSExpressionContainer\":\n    case \"JSXExpressionContainer\":\n        return concat([\"{\", path.call(print, \"expression\"), \"}\"]);\n\n    case \"XJSElement\":\n    case \"JSXElement\":\n        var openingLines = path.call(print, \"openingElement\");\n\n        if (n.openingElement.selfClosing) {\n            assert.ok(!n.closingElement);\n            return openingLines;\n        }\n\n        var childLines = concat(\n            path.map(function(childPath) {\n                var child = childPath.getValue();\n\n                if (namedTypes.Literal.check(child) &&\n                    typeof child.value === \"string\") {\n                    if (/\\S/.test(child.value)) {\n                        return child.value.replace(/^\\s+|\\s+$/g, \"\");\n                    } else if (/\\n/.test(child.value)) {\n                        return \"\\n\";\n                    }\n                }\n\n                return print(childPath);\n            }, \"children\")\n        ).indentTail(options.tabWidth);\n\n        var closingLines = path.call(print, \"closingElement\");\n\n        return concat([\n            openingLines,\n            childLines,\n            closingLines\n        ]);\n\n    case \"XJSOpeningElement\":\n    case \"JSXOpeningElement\":\n        var parts = [\"<\", path.call(print, \"name\")];\n        var attrParts = [];\n\n        path.each(function(attrPath) {\n            attrParts.push(\" \", print(attrPath));\n        }, \"attributes\");\n\n        var attrLines = concat(attrParts);\n\n        var needLineWrap = (\n            attrLines.length > 1 ||\n            attrLines.getLineLength(1) > options.wrapColumn\n        );\n\n        if (needLineWrap) {\n            attrParts.forEach(function(part, i) {\n                if (part === \" \") {\n                    assert.strictEqual(i % 2, 0);\n                    attrParts[i] = \"\\n\";\n                }\n            });\n\n            attrLines = concat(attrParts).indentTail(options.tabWidth);\n        }\n\n        parts.push(attrLines, n.selfClosing ? \" />\" : \">\");\n\n        return concat(parts);\n\n    case \"XJSClosingElement\":\n    case \"JSXClosingElement\":\n        return concat([\"</\", path.call(print, \"name\"), \">\"]);\n\n    case \"XJSText\":\n    case \"JSXText\":\n        return fromString(n.value, options);\n\n    case \"XJSEmptyExpression\":\n    case \"JSXEmptyExpression\":\n        return fromString(\"\");\n\n    case \"TypeAnnotatedIdentifier\":\n        return concat([\n            path.call(print, \"annotation\"),\n            \" \",\n            path.call(print, \"identifier\")\n        ]);\n\n    case \"ClassBody\":\n        if (n.body.length === 0) {\n            return fromString(\"{}\");\n        }\n\n        return concat([\n            \"{\\n\",\n            path.call(function(bodyPath) {\n                return printStatementSequence(bodyPath, options, print);\n            }, \"body\").indent(options.tabWidth),\n            \"\\n}\"\n        ]);\n\n    case \"ClassPropertyDefinition\":\n        var parts = [\"static \", path.call(print, \"definition\")];\n        if (!namedTypes.MethodDefinition.check(n.definition))\n            parts.push(\";\");\n        return concat(parts);\n\n    case \"ClassProperty\":\n        var parts = [];\n        if (n.static)\n            parts.push(\"static \");\n\n        parts.push(path.call(print, \"key\"));\n        if (n.typeAnnotation)\n            parts.push(path.call(print, \"typeAnnotation\"));\n\n        if (n.value)\n            parts.push(\" = \", path.call(print, \"value\"));\n\n        parts.push(\";\");\n        return concat(parts);\n\n    case \"ClassDeclaration\":\n    case \"ClassExpression\":\n        var parts = [\"class\"];\n\n        if (n.id) {\n            parts.push(\n                \" \",\n                path.call(print, \"id\"),\n                path.call(print, \"typeParameters\")\n            );\n        }\n\n        if (n.superClass) {\n            parts.push(\n                \" extends \",\n                path.call(print, \"superClass\"),\n                path.call(print, \"superTypeParameters\")\n            );\n        }\n\n        if (n[\"implements\"]) {\n            parts.push(\n                \" implements \",\n                fromString(\", \").join(path.map(print, \"implements\"))\n            );\n        }\n\n        parts.push(\" \", path.call(print, \"body\"));\n\n        return concat(parts);\n\n    case \"TemplateElement\":\n        return fromString(n.value.raw, options);\n\n    case \"TemplateLiteral\":\n        var expressions = path.map(print, \"expressions\");\n        var parts = [\"`\"];\n\n        path.each(function(childPath) {\n            var i = childPath.getName();\n            parts.push(print(childPath));\n            if (i < expressions.length) {\n                parts.push(\"${\", expressions[i], \"}\");\n            }\n        }, \"quasis\");\n\n        parts.push(\"`\");\n\n        return concat(parts);\n\n    case \"TaggedTemplateExpression\":\n        return concat([\n            path.call(print, \"tag\"),\n            path.call(print, \"quasi\")\n        ]);\n\n    // These types are unprintable because they serve as abstract\n    // supertypes for other (printable) types.\n    case \"Node\":\n    case \"Printable\":\n    case \"SourceLocation\":\n    case \"Position\":\n    case \"Statement\":\n    case \"Function\":\n    case \"Pattern\":\n    case \"Expression\":\n    case \"Declaration\":\n    case \"Specifier\":\n    case \"NamedSpecifier\":\n    case \"Comment\": // Supertype of Block and Line.\n    case \"MemberTypeAnnotation\": // Flow\n    case \"TupleTypeAnnotation\": // Flow\n    case \"Type\": // Flow\n        throw new Error(\"unprintable type: \" + JSON.stringify(n.type));\n\n    case \"CommentBlock\": // Babel block comment.\n    case \"Block\": // Esprima block comment.\n        return concat([\"/*\", fromString(n.value, options), \"*/\"]);\n\n    case \"CommentLine\": // Babel line comment.\n    case \"Line\": // Esprima line comment.\n        return concat([\"//\", fromString(n.value, options)]);\n\n    // Type Annotations for Facebook Flow, typically stripped out or\n    // transformed away before printing.\n    case \"TypeAnnotation\":\n        var parts = [];\n\n        if (n.typeAnnotation) {\n            if (n.typeAnnotation.type !== \"FunctionTypeAnnotation\") {\n                parts.push(\": \");\n            }\n            parts.push(path.call(print, \"typeAnnotation\"));\n            return concat(parts);\n        }\n\n        return fromString(\"\");\n\n    case \"AnyTypeAnnotation\":\n        return fromString(\"any\", options);\n\n    case \"MixedTypeAnnotation\":\n        return fromString(\"mixed\", options);\n\n    case \"ArrayTypeAnnotation\":\n        return concat([\n            path.call(print, \"elementType\"),\n            \"[]\"\n        ]);\n\n    case \"BooleanTypeAnnotation\":\n        return fromString(\"boolean\", options);\n\n    case \"BooleanLiteralTypeAnnotation\":\n        assert.strictEqual(typeof n.value, \"boolean\");\n        return fromString(\"\" + n.value, options);\n\n    case \"DeclareClass\":\n        return concat([\n            fromString(\"declare class \", options),\n            path.call(print, \"id\"),\n            \" \",\n            path.call(print, \"body\"),\n        ]);\n\n    case \"DeclareFunction\":\n        return concat([\n            fromString(\"declare function \", options),\n            path.call(print, \"id\"),\n            \";\"\n        ]);\n\n    case \"DeclareModule\":\n        return concat([\n            fromString(\"declare module \", options),\n            path.call(print, \"id\"),\n            \" \",\n            path.call(print, \"body\"),\n        ]);\n\n    case \"DeclareVariable\":\n        return concat([\n            fromString(\"declare var \", options),\n            path.call(print, \"id\"),\n            \";\"\n        ]);\n\n    case \"FunctionTypeAnnotation\":\n        // FunctionTypeAnnotation is ambiguous:\n        // declare function(a: B): void; OR\n        // var A: (a: B) => void;\n        var parts = [];\n        var parent = path.getParentNode(0);\n        var isArrowFunctionTypeAnnotation = !(\n            namedTypes.ObjectTypeCallProperty.check(parent) ||\n            namedTypes.DeclareFunction.check(path.getParentNode(2))\n        );\n\n        var needsColon =\n            isArrowFunctionTypeAnnotation &&\n            !namedTypes.FunctionTypeParam.check(parent);\n\n        if (needsColon) {\n            parts.push(\": \");\n        }\n\n        parts.push(\n            \"(\",\n            fromString(\", \").join(path.map(print, \"params\")),\n            \")\"\n        );\n\n        // The returnType is not wrapped in a TypeAnnotation, so the colon\n        // needs to be added separately.\n        if (n.returnType) {\n            parts.push(\n                isArrowFunctionTypeAnnotation ? \" => \" : \": \",\n                path.call(print, \"returnType\")\n            );\n        }\n\n        return concat(parts);\n\n    case \"FunctionTypeParam\":\n        return concat([\n            path.call(print, \"name\"),\n            \": \",\n            path.call(print, \"typeAnnotation\"),\n        ]);\n\n    case \"GenericTypeAnnotation\":\n        return concat([\n            path.call(print, \"id\"),\n            path.call(print, \"typeParameters\")\n        ]);\n\n    case \"InterfaceDeclaration\":\n        var parts = [\n            fromString(\"interface \", options),\n            path.call(print, \"id\"),\n            path.call(print, \"typeParameters\"),\n            \" \"\n        ];\n\n        if (n[\"extends\"]) {\n            parts.push(\n                \"extends \",\n                fromString(\", \").join(path.map(print, \"extends\"))\n            );\n        }\n\n        parts.push(\" \", path.call(print, \"body\"));\n\n        return concat(parts);\n\n    case \"ClassImplements\":\n    case \"InterfaceExtends\":\n        return concat([\n            path.call(print, \"id\"),\n            path.call(print, \"typeParameters\")\n        ]);\n\n    case \"IntersectionTypeAnnotation\":\n        return fromString(\" & \").join(path.map(print, \"types\"));\n\n    case \"NullableTypeAnnotation\":\n        return concat([\n            \"?\",\n            path.call(print, \"typeAnnotation\")\n        ]);\n\n    case \"NumberTypeAnnotation\":\n        return fromString(\"number\", options);\n\n    case \"ObjectTypeCallProperty\":\n        return path.call(print, \"value\");\n\n    case \"ObjectTypeIndexer\":\n        return concat([\n            \"[\",\n            path.call(print, \"id\"),\n            \": \",\n            path.call(print, \"key\"),\n            \"]: \",\n            path.call(print, \"value\")\n        ]);\n\n    case \"ObjectTypeProperty\":\n        return concat([\n            path.call(print, \"key\"),\n            \": \",\n            path.call(print, \"value\")\n        ]);\n\n    case \"QualifiedTypeIdentifier\":\n        return concat([\n            path.call(print, \"qualification\"),\n            \".\",\n            path.call(print, \"id\")\n        ]);\n\n    case \"StringLiteralTypeAnnotation\":\n        return fromString(nodeStr(n.value, options), options);\n\n    case \"NumberLiteralTypeAnnotation\":\n        assert.strictEqual(typeof n.value, \"number\");\n        return fromString(\"\" + n.value, options);\n\n    case \"StringTypeAnnotation\":\n        return fromString(\"string\", options);\n\n    case \"TypeAlias\":\n        return concat([\n            \"type \",\n            path.call(print, \"id\"),\n            \" = \",\n            path.call(print, \"right\"),\n            \";\"\n        ]);\n\n    case \"TypeCastExpression\":\n        return concat([\n            \"(\",\n            path.call(print, \"expression\"),\n            path.call(print, \"typeAnnotation\"),\n            \")\"\n        ]);\n\n    case \"TypeParameterDeclaration\":\n    case \"TypeParameterInstantiation\":\n        return concat([\n            \"<\",\n            fromString(\", \").join(path.map(print, \"params\")),\n            \">\"\n        ]);\n\n    case \"TypeofTypeAnnotation\":\n        return concat([\n            fromString(\"typeof \", options),\n            path.call(print, \"argument\")\n        ]);\n\n    case \"UnionTypeAnnotation\":\n        return fromString(\" | \").join(path.map(print, \"types\"));\n\n    case \"VoidTypeAnnotation\":\n        return fromString(\"void\", options);\n\n    // Unhandled types below. If encountered, nodes of these types should\n    // be either left alone or desugared into AST types that are fully\n    // supported by the pretty-printer.\n    case \"ClassHeritage\": // TODO\n    case \"ComprehensionBlock\": // TODO\n    case \"ComprehensionExpression\": // TODO\n    case \"Glob\": // TODO\n    case \"GeneratorExpression\": // TODO\n    case \"LetStatement\": // TODO\n    case \"LetExpression\": // TODO\n    case \"GraphExpression\": // TODO\n    case \"GraphIndexExpression\": // TODO\n\n    // XML types that nobody cares about or needs to print.\n    case \"XMLDefaultDeclaration\":\n    case \"XMLAnyName\":\n    case \"XMLQualifiedIdentifier\":\n    case \"XMLFunctionQualifiedIdentifier\":\n    case \"XMLAttributeSelector\":\n    case \"XMLFilterExpression\":\n    case \"XML\":\n    case \"XMLElement\":\n    case \"XMLList\":\n    case \"XMLEscape\":\n    case \"XMLText\":\n    case \"XMLStartTag\":\n    case \"XMLEndTag\":\n    case \"XMLPointTag\":\n    case \"XMLName\":\n    case \"XMLAttribute\":\n    case \"XMLCdata\":\n    case \"XMLComment\":\n    case \"XMLProcessingInstruction\":\n    default:\n        debugger;\n        throw new Error(\"unknown type: \" + JSON.stringify(n.type));\n    }\n\n    return p;\n}\n\nfunction printStatementSequence(path, options, print) {\n    var inClassBody =\n        namedTypes.ClassBody &&\n        namedTypes.ClassBody.check(path.getParentNode());\n\n    var filtered = [];\n    var sawComment = false;\n    var sawStatement = false;\n\n    path.each(function(stmtPath) {\n        var i = stmtPath.getName();\n        var stmt = stmtPath.getValue();\n\n        // Just in case the AST has been modified to contain falsy\n        // \"statements,\" it's safer simply to skip them.\n        if (!stmt) {\n            return;\n        }\n\n        // Skip printing EmptyStatement nodes to avoid leaving stray\n        // semicolons lying around.\n        if (stmt.type === \"EmptyStatement\") {\n            return;\n        }\n\n        if (namedTypes.Comment.check(stmt)) {\n            // The pretty printer allows a dangling Comment node to act as\n            // a Statement when the Comment can't be attached to any other\n            // non-Comment node in the tree.\n            sawComment = true;\n        } else if (!inClassBody) {\n            namedTypes.Statement.assert(stmt);\n            sawStatement = true;\n        }\n\n        // We can't hang onto stmtPath outside of this function, because\n        // it's just a reference to a mutable FastPath object, so we have\n        // to go ahead and print it here.\n        filtered.push({\n            node: stmt,\n            printed: print(stmtPath)\n        });\n    });\n\n    if (sawComment) {\n        assert.strictEqual(\n            sawStatement, false,\n            \"Comments may appear as statements in otherwise empty statement \" +\n                \"lists, but may not coexist with non-Comment nodes.\"\n        );\n    }\n\n    var prevTrailingSpace = null;\n    var len = filtered.length;\n    var parts = [];\n\n    filtered.forEach(function(info, i) {\n        var printed = info.printed;\n        var stmt = info.node;\n        var multiLine = printed.length > 1;\n        var notFirst = i > 0;\n        var notLast = i < len - 1;\n        var leadingSpace;\n        var trailingSpace;\n        var lines = stmt && stmt.loc && stmt.loc.lines;\n        var trueLoc = lines && options.reuseWhitespace &&\n            util.getTrueLoc(stmt, lines);\n\n        if (notFirst) {\n            if (trueLoc) {\n                var beforeStart = lines.skipSpaces(trueLoc.start, true);\n                var beforeStartLine = beforeStart ? beforeStart.line : 1;\n                var leadingGap = trueLoc.start.line - beforeStartLine;\n                leadingSpace = Array(leadingGap + 1).join(\"\\n\");\n            } else {\n                leadingSpace = multiLine ? \"\\n\\n\" : \"\\n\";\n            }\n        } else {\n            leadingSpace = \"\";\n        }\n\n        if (notLast) {\n            if (trueLoc) {\n                var afterEnd = lines.skipSpaces(trueLoc.end);\n                var afterEndLine = afterEnd ? afterEnd.line : lines.length;\n                var trailingGap = afterEndLine - trueLoc.end.line;\n                trailingSpace = Array(trailingGap + 1).join(\"\\n\");\n            } else {\n                trailingSpace = multiLine ? \"\\n\\n\" : \"\\n\";\n            }\n        } else {\n            trailingSpace = \"\";\n        }\n\n        parts.push(\n            maxSpace(prevTrailingSpace, leadingSpace),\n            printed\n        );\n\n        if (notLast) {\n            prevTrailingSpace = trailingSpace;\n        } else if (trailingSpace) {\n            parts.push(trailingSpace);\n        }\n    });\n\n    return concat(parts);\n}\n\nfunction maxSpace(s1, s2) {\n    if (!s1 && !s2) {\n        return fromString(\"\");\n    }\n\n    if (!s1) {\n        return fromString(s2);\n    }\n\n    if (!s2) {\n        return fromString(s1);\n    }\n\n    var spaceLines1 = fromString(s1);\n    var spaceLines2 = fromString(s2);\n\n    if (spaceLines2.length > spaceLines1.length) {\n        return spaceLines2;\n    }\n\n    return spaceLines1;\n}\n\nfunction printMethod(path, options, print) {\n    var node = path.getNode();\n    var kind = node.kind;\n    var parts = [];\n\n    namedTypes.FunctionExpression.assert(node.value);\n\n    if (node.decorators) {\n        path.each(function(decoratorPath) {\n            parts.push(print(decoratorPath), \"\\n\");\n        }, \"decorators\");\n    }\n\n    if (node.value.async) {\n        parts.push(\"async \");\n    }\n\n    if (!kind || kind === \"init\" || kind === \"method\" || kind === \"constructor\") {\n        if (node.value.generator) {\n            parts.push(\"*\");\n        }\n    } else {\n        assert.ok(kind === \"get\" || kind === \"set\");\n        parts.push(kind, \" \");\n    }\n\n    var key = path.call(print, \"key\");\n    if (node.computed) {\n        key = concat([\"[\", key, \"]\"]);\n    }\n\n    parts.push(\n        key,\n        path.call(print, \"value\", \"typeParameters\"),\n        \"(\",\n        path.call(function(valuePath) {\n            return printFunctionParams(valuePath, options, print);\n        }, \"value\"),\n        \")\",\n        path.call(print, \"value\", \"returnType\"),\n        \" \",\n        path.call(print, \"value\", \"body\")\n    );\n\n    return concat(parts);\n}\n\nfunction printArgumentsList(path, options, print) {\n    var printed = path.map(print, \"arguments\");\n\n    var joined = fromString(\", \").join(printed);\n    if (joined.getLineLength(1) > options.wrapColumn) {\n        joined = fromString(\",\\n\").join(printed);\n        return concat([\n            \"(\\n\",\n            joined.indent(options.tabWidth),\n            options.trailingComma ? \",\\n)\" : \"\\n)\"\n        ]);\n    }\n\n    return concat([\"(\", joined, \")\"]);\n}\n\nfunction printFunctionParams(path, options, print) {\n    var fun = path.getValue();\n    namedTypes.Function.assert(fun);\n\n    var printed = path.map(print, \"params\");\n\n    if (fun.defaults) {\n        path.each(function(defExprPath) {\n            var i = defExprPath.getName();\n            var p = printed[i];\n            if (p && defExprPath.getValue()) {\n                printed[i] = concat([p, \"=\", print(defExprPath)]);\n            }\n        }, \"defaults\");\n    }\n\n    if (fun.rest) {\n        printed.push(concat([\"...\", path.call(print, \"rest\")]));\n    }\n\n    var joined = fromString(\", \").join(printed);\n    if (joined.length > 1 ||\n        joined.getLineLength(1) > options.wrapColumn) {\n        joined = fromString(\",\\n\").join(printed);\n        if (options.trailingComma && !fun.rest) {\n            joined = concat([joined, \",\\n\"]);\n        }\n        return concat([\"\\n\", joined.indent(options.tabWidth)]);\n    }\n\n    return joined;\n}\n\nfunction adjustClause(clause, options) {\n    if (clause.length > 1)\n        return concat([\" \", clause]);\n\n    return concat([\n        \"\\n\",\n        maybeAddSemicolon(clause).indent(options.tabWidth)\n    ]);\n}\n\nfunction lastNonSpaceCharacter(lines) {\n    var pos = lines.lastPos();\n    do {\n        var ch = lines.charAt(pos);\n        if (/\\S/.test(ch))\n            return ch;\n    } while (lines.prevPos(pos));\n}\n\nfunction endsWithBrace(lines) {\n    return lastNonSpaceCharacter(lines) === \"}\";\n}\n\nfunction swapQuotes(str) {\n    return str.replace(/['\"]/g, function(m) {\n        return m === '\"' ? '\\'' : '\"';\n    });\n}\n\nfunction nodeStr(str, options) {\n    isString.assert(str);\n    switch (options.quote) {\n    case \"auto\":\n        var double = JSON.stringify(str);\n        var single = swapQuotes(JSON.stringify(swapQuotes(str)));\n        return double.length > single.length ? single : double;\n    case \"single\":\n        return swapQuotes(JSON.stringify(swapQuotes(str)));\n    case \"double\":\n    default:\n        return JSON.stringify(str);\n    }\n}\n\nfunction maybeAddSemicolon(lines) {\n    var eoc = lastNonSpaceCharacter(lines);\n    if (!eoc || \"\\n};\".indexOf(eoc) < 0)\n        return concat([lines, \";\"]);\n    return lines;\n}\n"]}