{"version":3,"sources":["main.js"],"names":[],"mappings":";;AAAA,IAAI,KAAK,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AACnC,IAAI,KAAK,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC,KAAK,CAAC;AAC1C,IAAI,OAAO,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC,OAAO,CAAC;;AAE/C,SAAS,KAAK,CAAC,IAAI,EAAE,OAAO,EAAE;AAC1B,WAAO,IAAI,OAAO,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;CAC3C;;AAED,SAAS,WAAW,CAAC,IAAI,EAAE,OAAO,EAAE;AAChC,WAAO,IAAI,OAAO,CAAC,OAAO,CAAC,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;CACtD;;AAED,SAAS,GAAG,CAAC,WAAW,EAAE,OAAO,EAAE;AAC/B,WAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,WAAW,EAAE,OAAO,CAAC,CAAC;CACzD;;AAED,SAAS,OAAO,CAAC,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE;AACzC,WAAO,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,OAAO,EAAE,UAAS,GAAG,EAAE,IAAI,EAAE;AACtD,YAAI,GAAG,EAAE;AACL,mBAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACnB,mBAAO;SACV;;AAED,iBAAS,CAAC,IAAI,EAAE,WAAW,EAAE,OAAO,CAAC,CAAC;KACzC,CAAC,CAAC;CACN;;AAED,SAAS,gBAAgB,CAAC,MAAM,EAAE;AAC9B,WAAO,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;CAChC;;AAED,SAAS,SAAS,CAAC,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE;AAC3C,QAAI,SAAS,GAAG,OAAO,IAAI,OAAO,CAAC,SAAS,IAAI,gBAAgB,CAAC;AACjE,eAAW,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,EAAE,UAAS,IAAI,EAAE;AAC7C,iBAAS,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC;KACxC,CAAC,CAAC;CACN;;AAED,MAAM,CAAC,gBAAgB,CAAC,OAAO,EAAE;;;;;AAK7B,SAAK,EAAE;AACH,kBAAU,EAAE,IAAI;AAChB,aAAK,EAAE,KAAK;KACf;;;;;;;;;;;;;;;AAeD,SAAK,EAAE;AACH,kBAAU,EAAE,IAAI;AAChB,aAAK,EAAE,KAAK,CAAC,KAAK;KACrB;;;;;;AAMD,SAAK,EAAE;AACH,kBAAU,EAAE,IAAI;AAChB,aAAK,EAAE,KAAK;KACf;;;;;AAKD,eAAW,EAAE;AACT,kBAAU,EAAE,KAAK;AACjB,aAAK,EAAE,WAAW;KACrB;;;;;AAKD,SAAK,EAAE;AACH,kBAAU,EAAE,KAAK;AACjB,aAAK,EAAE,KAAK;KACf;;;;;AAKD,OAAG,EAAE;AACD,kBAAU,EAAE,KAAK;AACjB,aAAK,EAAE,GAAG;KACb;CACJ,CAAC,CAAC","file":"main-compiled.js","sourcesContent":["var types = require(\"./lib/types\");\nvar parse = require(\"./lib/parser\").parse;\nvar Printer = require(\"./lib/printer\").Printer;\n\nfunction print(node, options) {\n    return new Printer(options).print(node);\n}\n\nfunction prettyPrint(node, options) {\n    return new Printer(options).printGenerically(node);\n}\n\nfunction run(transformer, options) {\n    return runFile(process.argv[2], transformer, options);\n}\n\nfunction runFile(path, transformer, options) {\n    require(\"fs\").readFile(path, \"utf-8\", function(err, code) {\n        if (err) {\n            console.error(err);\n            return;\n        }\n\n        runString(code, transformer, options);\n    });\n}\n\nfunction defaultWriteback(output) {\n    process.stdout.write(output);\n}\n\nfunction runString(code, transformer, options) {\n    var writeback = options && options.writeback || defaultWriteback;\n    transformer(parse(code, options), function(node) {\n        writeback(print(node, options).code);\n    });\n}\n\nObject.defineProperties(exports, {\n    /**\n     * Parse a string of code into an augmented syntax tree suitable for\n     * arbitrary modification and reprinting.\n     */\n    parse: {\n        enumerable: true,\n        value: parse\n    },\n\n    /**\n     * Traverse and potentially modify an abstract syntax tree using a\n     * convenient visitor syntax:\n     *\n     *   recast.visit(ast, {\n     *     names: [],\n     *     visitIdentifier: function(path) {\n     *       var node = path.value;\n     *       this.visitor.names.push(node.name);\n     *       this.traverse(path);\n     *     }\n     *   });\n     */\n    visit: {\n        enumerable: true,\n        value: types.visit\n    },\n\n    /**\n     * Reprint a modified syntax tree using as much of the original source\n     * code as possible.\n     */\n    print: {\n        enumerable: true,\n        value: print\n    },\n\n    /**\n     * Print without attempting to reuse any original source code.\n     */\n    prettyPrint: {\n        enumerable: false,\n        value: prettyPrint\n    },\n\n    /**\n     * Customized version of require(\"ast-types\").\n     */\n    types: {\n        enumerable: false,\n        value: types\n    },\n\n    /**\n     * Convenient command-line interface (see e.g. example/add-braces).\n     */\n    run: {\n        enumerable: false,\n        value: run\n    }\n});\n"]}