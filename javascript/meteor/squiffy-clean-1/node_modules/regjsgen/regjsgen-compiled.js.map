{"version":3,"sources":["regjsgen.js"],"names":[],"mappings":"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","file":"regjsgen-compiled.js","sourcesContent":["/*!\n * RegJSGen\n * Copyright 2014 Benjamin Tan <https://d10.github.io/>\n * Available under MIT license <http://d10.mit-license.org/>\n */\n;(function() {\n  'use strict';\n\n  /** Used to determine if values are of the language type `Object` */\n  var objectTypes = {\n    'function': true,\n    'object': true\n  };\n\n  /** Used as a reference to the global object */\n  var root = (objectTypes[typeof window] && window) || this;\n\n  /** Backup possible global object */\n  var oldRoot = root;\n\n  /** Detect free variable `exports` */\n  var freeExports = objectTypes[typeof exports] && exports;\n\n  /** Detect free variable `module` */\n  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;\n\n  /** Detect free variable `global` from Node.js or Browserified code and use it as `root` */\n  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global;\n  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {\n    root = freeGlobal;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /*! Based on https://mths.be/fromcodepoint v0.2.0 by @mathias */\n\n  var stringFromCharCode = String.fromCharCode;\n  var floor = Math.floor;\n  function fromCodePoint() {\n    var MAX_SIZE = 0x4000;\n    var codeUnits = [];\n    var highSurrogate;\n    var lowSurrogate;\n    var index = -1;\n    var length = arguments.length;\n    if (!length) {\n      return '';\n    }\n    var result = '';\n    while (++index < length) {\n      var codePoint = Number(arguments[index]);\n      if (\n        !isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n        codePoint < 0 || // not a valid Unicode code point\n        codePoint > 0x10FFFF || // not a valid Unicode code point\n        floor(codePoint) != codePoint // not an integer\n      ) {\n        throw RangeError('Invalid code point: ' + codePoint);\n      }\n      if (codePoint <= 0xFFFF) {\n        // BMP code point\n        codeUnits.push(codePoint);\n      } else {\n        // Astral code point; split in surrogate halves\n        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n        codePoint -= 0x10000;\n        highSurrogate = (codePoint >> 10) + 0xD800;\n        lowSurrogate = (codePoint % 0x400) + 0xDC00;\n        codeUnits.push(highSurrogate, lowSurrogate);\n      }\n      if (index + 1 == length || codeUnits.length > MAX_SIZE) {\n        result += stringFromCharCode.apply(null, codeUnits);\n        codeUnits.length = 0;\n      }\n    }\n    return result;\n  }\n\n  function assertType(type, expected) {\n    if (expected.indexOf('|') == -1) {\n      if (type == expected) {\n        return;\n      }\n\n      throw Error('Invalid node type: ' + type);\n    }\n\n    expected = assertType.hasOwnProperty(expected)\n      ? assertType[expected]\n      : (assertType[expected] = RegExp('^(?:' + expected + ')$'));\n\n    if (expected.test(type)) {\n      return;\n    }\n\n    throw Error('Invalid node type: ' + type);\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  function generate(node) {\n    var type = node.type;\n\n    if (generate.hasOwnProperty(type) && typeof generate[type] == 'function') {\n      return generate[type](node);\n    }\n\n    throw Error('Invalid node type: ' + type);\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  function generateAlternative(node) {\n    assertType(node.type, 'alternative');\n\n    var terms = node.body,\n        length = terms ? terms.length : 0;\n\n    if (length == 1) {\n      return generateTerm(terms[0]);\n    } else {\n      var i = -1,\n          result = '';\n\n      while (++i < length) {\n        result += generateTerm(terms[i]);\n      }\n\n      return result;\n    }\n  }\n\n  function generateAnchor(node) {\n    assertType(node.type, 'anchor');\n\n    switch (node.kind) {\n      case 'start':\n        return '^';\n      case 'end':\n        return '$';\n      case 'boundary':\n        return '\\\\b';\n      case 'not-boundary':\n        return '\\\\B';\n      default:\n        throw Error('Invalid assertion');\n    }\n  }\n\n  function generateAtom(node) {\n    assertType(node.type, 'anchor|characterClass|characterClassEscape|dot|group|reference|value');\n\n    return generate(node);\n  }\n\n  function generateCharacterClass(node) {\n    assertType(node.type, 'characterClass');\n\n    var classRanges = node.body,\n        length = classRanges ? classRanges.length : 0;\n\n    var i = -1,\n        result = '[';\n\n    if (node.negative) {\n      result += '^';\n    }\n\n    while (++i < length) {\n      result += generateClassAtom(classRanges[i]);\n    }\n\n    result += ']';\n\n    return result;\n  }\n\n  function generateCharacterClassEscape(node) {\n    assertType(node.type, 'characterClassEscape');\n\n    return '\\\\' + node.value;\n  }\n\n  function generateCharacterClassRange(node) {\n    assertType(node.type, 'characterClassRange');\n\n    var min = node.min,\n        max = node.max;\n\n    if (min.type == 'characterClassRange' || max.type == 'characterClassRange') {\n      throw Error('Invalid character class range');\n    }\n\n    return generateClassAtom(min) + '-' + generateClassAtom(max);\n  }\n\n  function generateClassAtom(node) {\n    assertType(node.type, 'anchor|characterClassEscape|characterClassRange|dot|value');\n\n    return generate(node);\n  }\n\n  function generateDisjunction(node) {\n    assertType(node.type, 'disjunction');\n\n    var body = node.body,\n        length = body ? body.length : 0;\n\n    if (length == 0) {\n      throw Error('No body');\n    } else if (length == 1) {\n      return generate(body[0]);\n    } else {\n      var i = -1,\n          result = '';\n\n      while (++i < length) {\n        if (i != 0) {\n          result += '|';\n        }\n        result += generate(body[i]);\n      }\n\n      return result;\n    }\n  }\n\n  function generateDot(node) {\n    assertType(node.type, 'dot');\n\n    return '.';\n  }\n\n  function generateGroup(node) {\n    assertType(node.type, 'group');\n\n    var result = '(';\n\n    switch (node.behavior) {\n      case 'normal':\n        break;\n      case 'ignore':\n        result += '?:';\n        break;\n      case 'lookahead':\n        result += '?=';\n        break;\n      case 'negativeLookahead':\n        result += '?!';\n        break;\n      default:\n        throw Error('Invalid behaviour: ' + node.behaviour);\n    }\n\n    var body = node.body,\n        length = body ? body.length : 0;\n\n    if (length == 1) {\n      result += generate(body[0]);\n    } else {\n      var i = -1;\n\n      while (++i < length) {\n        result += generate(body[i]);\n      }\n    }\n\n    result += ')';\n\n    return result;\n  }\n\n  function generateQuantifier(node) {\n    assertType(node.type, 'quantifier');\n\n    var quantifier = '',\n        min = node.min,\n        max = node.max;\n\n    switch (max) {\n      case undefined:\n      case null:\n        switch (min) {\n          case 0:\n            quantifier = '*'\n            break;\n          case 1:\n            quantifier = '+';\n            break;\n          default:\n            quantifier = '{' + min + ',}';\n            break;\n        }\n        break;\n      default:\n        if (min == max) {\n          quantifier = '{' + min + '}';\n        }\n        else if (min == 0 && max == 1) {\n          quantifier = '?';\n        } else {\n          quantifier = '{' + min + ',' + max + '}';\n        }\n        break;\n    }\n\n    if (!node.greedy) {\n      quantifier += '?';\n    }\n\n    return generateAtom(node.body[0]) + quantifier;\n  }\n\n  function generateReference(node) {\n    assertType(node.type, 'reference');\n\n    return '\\\\' + node.matchIndex;\n  }\n\n  function generateTerm(node) {\n    assertType(node.type, 'anchor|characterClass|characterClassEscape|empty|group|quantifier|reference|value');\n\n    return generate(node);\n  }\n\n  function generateValue(node) {\n    assertType(node.type, 'value');\n\n    var kind = node.kind,\n        codePoint = node.codePoint;\n\n    switch (kind) {\n      case 'controlLetter':\n        return '\\\\c' + fromCodePoint(codePoint + 64);\n      case 'hexadecimalEscape':\n        return '\\\\x' + ('00' + codePoint.toString(16).toUpperCase()).slice(-2);\n      case 'identifier':\n        return '\\\\' + fromCodePoint(codePoint);\n      case 'null':\n        return '\\\\' + codePoint;\n      case 'octal':\n        return '\\\\' + codePoint.toString(8);\n      case 'singleEscape':\n        switch (codePoint) {\n          case 0x0008:\n            return '\\\\b';\n          case 0x009:\n            return '\\\\t';\n          case 0x00A:\n            return '\\\\n';\n          case 0x00B:\n            return '\\\\v';\n          case 0x00C:\n            return '\\\\f';\n          case 0x00D:\n            return '\\\\r';\n          default:\n            throw Error('Invalid codepoint: ' + codePoint);\n        }\n      case 'symbol':\n        return fromCodePoint(codePoint);\n      case 'unicodeEscape':\n        return '\\\\u' + ('0000' + codePoint.toString(16).toUpperCase()).slice(-4);\n      case 'unicodeCodePointEscape':\n        return '\\\\u{' + codePoint.toString(16).toUpperCase() + '}';\n      default:\n        throw Error('Unsupported node kind: ' + kind);\n    }\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  generate.alternative = generateAlternative;\n  generate.anchor = generateAnchor;\n  generate.characterClass = generateCharacterClass;\n  generate.characterClassEscape = generateCharacterClassEscape;\n  generate.characterClassRange = generateCharacterClassRange;\n  generate.disjunction = generateDisjunction;\n  generate.dot = generateDot;\n  generate.group = generateGroup;\n  generate.quantifier = generateQuantifier;\n  generate.reference = generateReference;\n  generate.value = generateValue;\n\n  /*--------------------------------------------------------------------------*/\n\n  // export regjsgen\n  // some AMD build optimizers, like r.js, check for condition patterns like the following:\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n    // define as an anonymous module so, through path mapping, it can be aliased\n    define(function() {\n      return {\n        'generate': generate\n      };\n    });\n  }\n  // check for `exports` after `define` in case a build optimizer adds an `exports` object\n  else if (freeExports && freeModule) {\n    // in Narwhal, Node.js, Rhino -require, or RingoJS\n    freeExports.generate = generate;\n  }\n  // in a browser or Rhino\n  else {\n    root.regjsgen = {\n      'generate': generate\n    };\n  }\n}.call(this));\n"]}