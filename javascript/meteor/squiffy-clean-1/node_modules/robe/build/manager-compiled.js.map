{"version":3,"sources":["manager.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAGb,IAAI,oBAAoB,GAAG,UAAU,KAAK,EAAE,WAAW,EAAE,aAAa,EAAE;AAAE,MAAI,WAAW,EAAE,MAAM,CAAC,gBAAgB,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC,AAAC,IAAI,aAAa,EAAE,MAAM,CAAC,gBAAgB,CAAC,KAAK,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;CAAE,CAAC;;AAEtN,IAAI,eAAe,GAAG,UAAU,QAAQ,EAAE,WAAW,EAAE;AAAE,MAAI,EAAE,QAAQ,YAAY,WAAW,CAAA,AAAC,EAAE;AAAE,UAAM,IAAI,SAAS,CAAC,mCAAmC,CAAC,CAAC;GAAE;CAAE,CAAC;;AAEjK,IAAI,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC;IACrB,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC;IAChC,KAAK,GAAG,OAAO,CAAC,cAAc,CAAC;IAC/B,CAAC,GAAG,OAAO,CAAC,UAAU,CAAC;IACvB,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC;IACtB,QAAQ,GAAG,OAAO,CAAC,YAAY,CAAC;;;;;;AAAC,AAQrC,IAAI,aAAa,GAAG,EAAE;;;;;AAAC,AAMvB,IAAI,OAAO,GAAG,CAAC,YAAY;AACzB,WAAS,OAAO,GAAG;AACjB,mBAAe,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;GAChC;;AAED,sBAAoB,CAAC,OAAO,EAAE;AAC5B,WAAO,EAAE;;;;;;;;AAQP,WAAK,EAAE,SAAS,OAAO,CAAC,GAAG,EAAE;AAC3B,YAAI,OAAO,GAAG,SAAS,CAAC,CAAC,CAAC,KAAK,SAAS,GAAG,EAAE,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;AAC7D,YAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;AACvB,aAAG,GAAG,CAAC,GAAG,CAAC,CAAC;SACb;;AAED,SAAC,CAAC,QAAQ,CAAC,OAAO,EAAE,OAAO,CAAC,0BAA0B,CAAC,CAAC;;AAExD,aAAK,CAAC,aAAa,GAAG,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;;AAEtC,YAAI,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;;AAE/B,eAAO,IAAI,CAAC,CAAC,SAAS,eAAe,CAAC,OAAO,EAAE,MAAM,EAAE;AACrD,cAAI,iBAAiB,GAAG,UAAU,CAAC,YAAY;AAC7C,kBAAM,CAAC,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC,CAAC;WACjD,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC;;AAEpB,YAAE,CAAC,IAAI,CAAC,MAAM,EAAE,YAAY;AAC1B,wBAAY,CAAC,iBAAiB,CAAC;;;;AAAC,AAIhC,gBAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,EAAE,EAAE,eAAe,CAAC,EAAE;AACxC,oBAAM,CAAC,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC,CAAC;aAC9C,MAAM;AACL,kBAAI,QAAQ,GAAG,IAAI,QAAQ,CAAC,EAAE,CAAC,CAAC;;AAEhC,2BAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;;AAE7B,qBAAO,CAAC,QAAQ,CAAC,CAAC;aACnB;WACF,CAAC,CAAC;SACJ,CAAC,CAAC;OACJ;AACD,cAAQ,EAAE,IAAI;AACd,kBAAY,EAAE,IAAI;KACnB;AACD,YAAQ,EAAE;;;;;;AAOR,WAAK,EAAE,SAAS,QAAQ,GAAG;AACzB,aAAK,CAAC,yBAAyB,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;;AAExD,eAAO,CAAC,CAAC,GAAG,CAAC,aAAa,EAAE,UAAU,EAAE,EAAE;AACxC,iBAAO,EAAE,CAAC,KAAK,EAAE,CAAC;SACnB,CAAC,CAAC,IAAI,CAAC,YAAY;AAClB,uBAAa,GAAG,EAAE,CAAC;SACpB,CAAC,CAAC;OACJ;AACD,cAAQ,EAAE,IAAI;AACd,kBAAY,EAAE,IAAI;KACnB;GACF,CAAC,CAAC;;AAEH,SAAO,OAAO,CAAC;CAChB,CAAA,EAAG;;;;;;AAAC,AAML,OAAO,CAAC,0BAA0B,GAAG;AACnC,SAAO,EAAE,IAAI;CACd,CAAC;;AAEF,OAAO,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;;AAI9B,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC","file":"manager-compiled.js","sourcesContent":["\"use strict\";\n\n\nvar _prototypeProperties = function (child, staticProps, instanceProps) { if (staticProps) Object.defineProperties(child, staticProps); if (instanceProps) Object.defineProperties(child.prototype, instanceProps); };\n\nvar _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } };\n\nvar _ = require(\"lodash\"),\n    debug = require(\"debug\")(\"robe\"),\n    Class = require(\"class-extend\"),\n    Q = require(\"bluebird\"),\n    monk = require(\"monk\"),\n    Database = require(\"./database\");\n\n\n\n/**\n * All db connections.\n * @type {Array}\n */\nvar dbConnections = [];\n\n\n/**\n * Overall database manager and entry point to Robe.\n */\nvar Manager = (function () {\n  function Manager() {\n    _classCallCheck(this, Manager);\n  }\n\n  _prototypeProperties(Manager, {\n    connect: {\n      /**\n       * Connect to given database.\n       * @param {String|Array} url Either db URL or array of replica set URLs.\n       * @param {Object} options Connection options.\n       * @param {Number} options.timeout Connection timeout in milliseconds. Default is 3000.\n       * @return {Promise} which resolves to a database connection if successful.\n       */\n      value: function connect(url) {\n        var options = arguments[1] === undefined ? {} : arguments[1];\n        if (!Array.isArray(url)) {\n          url = [url];\n        }\n\n        _.defaults(options, Manager.DEFAULT_CONNECTION_OPTIONS);\n\n        debug(\"connect to \" + url.join(\", \"));\n\n        var db = monk.apply(null, url);\n\n        return new Q(function checkConnection(resolve, reject) {\n          var connectionTimeout = setTimeout(function () {\n            reject(new Error(\"Timed out connecting to db\"));\n          }, options.timeout);\n\n          db.once(\"open\", function () {\n            clearTimeout(connectionTimeout);\n\n            // until https://github.com/Automattic/monk/issues/24 is resolve we\n            // manually check, see http://stackoverflow.com/questions/27547979/db-connection-error-handling-with-monk\n            if (2 !== _.deepGet(db, \"driver._state\")) {\n              reject(new Error(\"Failed to connect to db\"));\n            } else {\n              var instance = new Database(db);\n\n              dbConnections.push(instance);\n\n              resolve(instance);\n            }\n          });\n        });\n      },\n      writable: true,\n      configurable: true\n    },\n    closeAll: {\n\n\n      /**\n       * Close all opened db connections.\n       * @return {Promise}\n       */\n      value: function closeAll() {\n        debug(\"close all connections: \" + dbConnections.length);\n\n        return Q.map(dbConnections, function (db) {\n          return db.close();\n        }).then(function () {\n          dbConnections = [];\n        });\n      },\n      writable: true,\n      configurable: true\n    }\n  });\n\n  return Manager;\n})();\n\n/**\n * Default connection options.\n * @type {Object}\n */\nManager.DEFAULT_CONNECTION_OPTIONS = {\n  timeout: 3000\n};\n\nManager.extend = Class.extend;\n\n\n\nmodule.exports = Manager;"]}