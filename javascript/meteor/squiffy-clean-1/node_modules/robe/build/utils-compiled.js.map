{"version":3,"sources":["utils.js"],"names":[],"mappings":"AAAA,YAAY;;;;;;;;AAAC,AAQb,IAAI,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC;IACrB,SAAS,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;;AAErC,IAAI,QAAQ,GAAG,OAAO,CAAC,YAAY,CAAC;;;;;;AAAC,AAMrC,OAAO,CAAC,UAAU,GAAG,SAAS,CAAC,MAAM,CAAC,UAAU;;;;;;;AAAC,AAQjD,OAAO,CAAC,UAAU,GAAG,UAAU,IAAI,EAAE;AACnC,SAAO,IAAI,YAAY,SAAS,CAAC,QAAQ,CAAC;CAC3C;;;;;;;AAAC,AASF,OAAO,CAAC,aAAa,GAAG,SAAS,CAAC,MAAM,CAAC,UAAU;;;;;;;;AAAC,AAapD,OAAO,CAAC,OAAO,GAAG,UAAU,KAAK,EAAE,GAAG,EAAE;AACtC,SAAO,aAAa;AAClB,SAAK,IAAI,IAAI,GAAG,SAAS,CAAC,MAAM,EAAE,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,IAAI,GAAG,CAAC,EAAE,IAAI,GAAG,IAAI,EAAE,IAAI,EAAE,EAAE;AACnF,UAAI,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC;KAC9B;;AAED,WAAO,MAAM,KAAK,CAAC,KAAK,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;GACrC,CAAC;CACH;;;;;;;;;AAAC,AAaF,OAAO,CAAC,KAAK,GAAG,UAAU,EAAE,EAAE;AAC5B,MAAI,WAAW,GAAG,EAAE,CAAC,WAAW,CAAC;;AAEjC,MAAI,CAAC,WAAW,EAAE;AAChB,WAAO,KAAK,CAAC;GACd;;AAED,MAAI,mBAAmB,KAAK,WAAW,CAAC,IAAI,IAAI,mBAAmB,KAAK,WAAW,CAAC,WAAW,EAAE;AAC/F,WAAO,IAAI,CAAC;GACb;;AAED,SAAO,UAAU,IAAI,OAAO,WAAW,CAAC,SAAS,CAAC,IAAI,IAAI,UAAU,IAAI,OAAO,WAAW,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;CAC/G,CAAC","file":"utils-compiled.js","sourcesContent":["\"use strict\";\n\n/**\n * @fileOverview \n *\n * This contains various utility methods used by the rest of Robe.\n */\n\nvar _ = require(\"lodash\"),\n    mongoskin = require(\"mongoskin\");\n\nvar Document = require(\"./document\");\n\n/**\n * Convert given string to a Mongo `ObjectID` for querying with.\n * @see mongoskin\n */\nexports.toObjectID = mongoskin.helper.toObjectID;\n\n\n/**\n * Get whether given item represents a Mongo `ObjectID` object.\n * @param {*} item \n * @return {Boolean} `true` if so; `false` otherwise.\n */\nexports.isObjectID = function (item) {\n  return item instanceof mongoskin.ObjectID;\n};\n\n\n\n/**\n * Get whether given item represents a Mongo `ObjectID` string.\n * @param {*} item \n * @return {Boolean} `true` if so; `false` otherwise.\n */\nexports.isObjectIDStr = mongoskin.helper.isObjectID;\n\n\n\n\n\n\n/**\n * Bind generator function to given context.\n * @param  {GeneratorFunction} genFn Generator function.\n * @param  {Object} ctx   Desired `this` context.\n * @return {GeneratorFunction}\n */\nexports.bindGen = function (genFn, ctx) {\n  return function* () {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return yield genFn.apply(ctx, args);\n  };\n};\n\n\n\n\n\n/** \n * Get whether given function is a generator function.\n *\n * @param {Function} fn A function.\n *\n * @return {Boolean} true if so; false otherwise.\n */\nexports.isGen = function (fn) {\n  var constructor = fn.constructor;\n\n  if (!constructor) {\n    return false;\n  }\n\n  if (\"GeneratorFunction\" === constructor.name || \"GeneratorFunction\" === constructor.displayName) {\n    return true;\n  }\n\n  return \"function\" == typeof constructor.prototype.next && \"function\" == typeof constructor.prototype[\"throw\"];\n};"]}