{"version":3,"sources":["mongodb_scram.js"],"names":[],"mappings":"AAAA,IAAI,SAAS,GAAG,OAAO,CAAC,wBAAwB,CAAC,CAAC,SAAS;IACvD,KAAK,GAAG,OAAO,CAAC,UAAU,CAAC;IAC3B,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC;IAC1B,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM;IAC/B,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC;;AAE/B,IAAI,YAAY,GAAG,UAAS,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE;AAC7E,MAAI,mBAAmB,GAAG,CAAC,CAAC;AAC5B,MAAI,WAAW,GAAG,IAAI,CAAC;AACvB,MAAI,wBAAwB,GAAG,CAAC,CAAC;AACjC,MAAI,gBAAgB,GAAG,KAAK,CAAC;AAC7B,SAAO,GAAG,OAAO,IAAI,EAAE;;;AAAC,AAGxB,MAAI,WAAW,GAAG,OAAO,CAAC,YAAY,CAAC,IAAI,IAAI,GAAG,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,GAAG,EAAE,CAAC,YAAY,CAAC,iBAAiB,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACzH,MAAG,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;AACzB,WAAO,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC;GACzB;;;AAAA,AAGD,MAAI,KAAK,GAAG,WAAW,CAAC,MAAM,CAAC;AAC/B,MAAG,KAAK,IAAI,CAAC,EAAE,OAAO,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;;;AAAA,AAG3C,MAAI,wBAAwB,GAAG,CAAC,CAAC;AACjC,MAAI,gBAAgB,GAAG,KAAK,CAAC;AAC7B,MAAI,WAAW,GAAG,IAAI;;;AAAC,AAGvB,SAAM,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;;AAE5B,QAAI,YAAY,GAAG,UAAS,UAAU,EAAE;;AAEtC,cAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC;;;AAAC,AAG5D,UAAI,KAAK,GAAG,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;AACtD,UAAI,SAAS,GAAG,CAAC,CAAC,WAAW,EAAE,QAAQ,EAAE,KAAK,CAAC;;;AAAC,AAGhD,UAAI,GAAG,GAAG;AACN,iBAAS,EAAE,CAAC;AACZ,iBAAS,EAAE,aAAa;AACxB,eAAO,EAAE,IAAI,MAAM,CAAC,CAAC,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;AAC1C,qBAAa,EAAE,CAAC;OACnB;;;AAAA,AAGD,UAAI,WAAW,GAAG,UAAS,GAAG,EAAE,CAAC,EAAE;AACjC,YAAG,GAAG,EAAE;AACN,qBAAW,GAAG,GAAG,CAAC,AAAC,OAAO,KAAK,CAAC;SACjC,MAAM,IAAG,CAAC,CAAC,MAAM,CAAC,EAAE;AACnB,qBAAW,GAAG,CAAC,CAAC,AAAC,OAAO,KAAK,CAAC;SAC/B,MAAM,IAAG,CAAC,CAAC,QAAQ,CAAC,EAAE;AACrB,qBAAW,GAAG,CAAC,CAAC,AAAC,OAAO,KAAK,CAAC;SAC/B,MAAM;AACL,0BAAgB,GAAG,IAAI,CAAC;AACxB,kCAAwB,GAAG,wBAAwB,GAAG,CAAC,CAAC;SACzD;;AAED,eAAO,IAAI,CAAA;OACZ;;;AAAA,AAGD,UAAI,MAAM,GAAG,UAAS,MAAM,EAAE,yBAAyB,EAAE;AACvD,YAAG,MAAM,IAAI,CAAC,IAAI,yBAAyB,GAAG,CAAC,EAAE;AAC/C,YAAE,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,EAAE,CAAC,YAAY,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,CAAC;;AAAC,AAErF,iBAAO,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;SAC7B,MAAM,IAAG,MAAM,IAAI,CAAC,EAAE;AACrB,cAAG,WAAW,IAAI,IAAI,EAAE,WAAW,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,oCAAoC,CAAC,CAAC,CAAC;AAC7F,iBAAO,QAAQ,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;SACrC;OACF,CAAA;;AAED,UAAI,SAAS,GAAG,UAAS,IAAI,EAAE,EAAE,EAAE;;AAEjC,mBAAW,CAAC,IAAI,EAAE,EAAE,CAAC;;AAAA,AAErB,aAAK,GAAG,KAAK,GAAG,CAAC;;AAAC,AAElB,cAAM,CAAC,KAAK,EAAE,wBAAwB,CAAC,CAAC;OACzC;;;AAAA,AAGD,QAAE,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,UAAU,EAAE,UAAU,EAAE,EAAE,UAAS,GAAG,EAAE,CAAC,EAAE;;AAEtE,YAAG,WAAW,CAAC,GAAG,EAAE,CAAC,CAAC,IAAI,KAAK,EAAE;AAC/B,eAAK,GAAG,KAAK,GAAG,CAAC,CAAC;;AAElB,cAAG,KAAK,IAAI,CAAC,IAAI,wBAAwB,GAAG,CAAC,EAAE;;AAE7C,0BAAc,CAAC,IAAI,WAAW,CAAC,EAAE,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;;AAAC,AAExD,mBAAO,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;WAC7B,MAAM,IAAG,KAAK,IAAI,CAAC,EAAE;AACpB,gBAAG,WAAW,IAAI,IAAI,EAAE,WAAW,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,oCAAoC,CAAC,CAAC,CAAC;AAC7F,mBAAO,QAAQ,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;WACrC;;AAED,iBAAO;SACR;;;AAAA,AAGD,YAAI,IAAI,GAAG,YAAY,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;;;AAAA,AAG1C,YAAI,UAAU,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;AACtC,YAAI,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC;AAClB,YAAI,MAAM,GAAG,IAAI,CAAC,CAAC;;;AAAC,AAGpB,YAAI,YAAY,GAAG,CAAC,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;AAC5C,YAAI,WAAW,GAAG,cAAc,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;AACrD,YAAI,cAAc,GAAG,EAAE,CAAC,WAAW,EAC7B,IAAI,MAAM,CAAC,IAAI,EAAE,QAAQ,CAAC,EAC1B,UAAU,CAAC;;;AAAC,AAGlB,YAAI,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;AACrD,YAAI,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC;AACtC,YAAI,SAAS,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,QAAQ,CAAC;;;AAAC,AAG5D,YAAI,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;AACrC,YAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;AACvB,YAAI,SAAS,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,QAAQ,CAAC;;;AAAC,AAG5D,YAAI,OAAO,GAAG,CAAC,SAAS,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,YAAY,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;;;AAAC,AAGxF,YAAI,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;AAChD,YAAI,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;AACjC,YAAI,SAAS,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,QAAQ,CAAC;;;AAAC,AAG5D,YAAI,WAAW,GAAG,CAAC,CAAC,MAAM,EAAE,IAAI,MAAM,CAAC,GAAG,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;;;AAAC,AAGtF,YAAI,WAAW,GAAG,CAAC,YAAY,EAAE,WAAW,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;;;AAAC,AAIxD,YAAI,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;AACrD,YAAI,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,YAAY,CAAC,CAAC,CAAA;AACrC,YAAI,SAAS,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,QAAQ,CAAC;;;AAAC,AAG5D,YAAI,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;AAChD,YAAI,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,CAAC,CAAA;AAChC,YAAI,SAAS,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,QAAQ,CAAC;;;;AAAC,AAI5D,YAAI,GAAG,GAAG;AACN,sBAAY,EAAE,CAAC;AACf,wBAAc,EAAE,CAAC,CAAC,cAAc;AAChC,iBAAO,EAAE,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,WAAW,CAAC,CAAC;SAC/C;;;;AAAA,AAID,UAAE,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,UAAU,EAAE,UAAU,EAAE,EAAE,UAAS,GAAG,EAAE,CAAC,EAAE;AACtE,cAAG,GAAG,EAAE,OAAO,SAAS,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;AACjC,cAAG,CAAC,IAAI,CAAC,CAAC,IAAI,IAAI,KAAK,EAAE;AACvB,gBAAI,GAAG,GAAG;AACN,0BAAY,EAAE,CAAC;AACf,4BAAc,EAAE,CAAC,CAAC,cAAc;AAChC,qBAAO,EAAE,IAAI,MAAM,CAAC,CAAC,CAAC;aACzB,CAAA;;AAED,cAAE,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,UAAU,EAAE,UAAU,EAAE,EAAE,UAAS,GAAG,EAAE,CAAC,EAAE;AACtE,uBAAS,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;aACnB,CAAC,CAAC;WACJ,MAAM;AACL,qBAAS,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;WACnB;SACF,CAAC,CAAC;OACJ,CAAC,CAAC;KACJ;;;AAAA,AAGD,gBAAY,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC,CAAC;GACnC;CACF,CAAA;;AAED,IAAI,YAAY,GAAG,UAAS,OAAO,EAAE;AACnC,MAAI,IAAI,GAAG,EAAE,CAAC;AACd,MAAI,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;;AAE/B,OAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACpC,QAAI,UAAU,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACrC,QAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;GACrC;;AAED,SAAO,IAAI,CAAC;CACb,CAAA;;AAED,IAAI,cAAc,GAAG,UAAS,QAAQ,EAAE,QAAQ,EAAE;AAChD,MAAG,OAAO,QAAQ,IAAI,QAAQ,EAAE,MAAM,KAAK,CAAC,OAAO,CAAC,2BAA2B,CAAC,CAAC;AACjF,MAAG,OAAO,QAAQ,IAAI,QAAQ,EAAE,MAAM,KAAK,CAAC,OAAO,CAAC,2BAA2B,CAAC,CAAC;AACjF,MAAG,QAAQ,CAAC,MAAM,IAAI,CAAC,EAAE,MAAM,KAAK,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAAC;;AAAA,AAEzE,MAAI,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC;;AAAC,AAEnC,KAAG,CAAC,MAAM,CAAC,QAAQ,GAAG,SAAS,GAAG,QAAQ,CAAC,CAAC;AAC5C,SAAO,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;CAC1B;;;AAAA,AAGD,IAAI,GAAG,GAAG,UAAS,CAAC,EAAE,CAAC,EAAE;AACvB,MAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC,CAAA;AAC1C,MAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC,CAAA;AAC1C,MAAI,GAAG,GAAG,EAAE,CAAA;AACZ,MAAI,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,EAAE;AACvB,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACjC,SAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;KACtB;GACF,MAAM;AACL,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACjC,SAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;KACtB;GACF;AACD,SAAO,IAAI,MAAM,CAAC,GAAG,CAAC,CAAC;CACxB;;;AAAA,AAGD,IAAI,EAAE,GAAG,UAAS,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE;;AAExC,MAAI,MAAM,GAAG,UAAS,GAAG,EAAE;AACzB,QAAI,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;AAC3C,QAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;AACjB,QAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC;;AAAA,AAElC,WAAO,IAAI,MAAM,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;GACrC;;;AAAA,AAGD,MAAI,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,IAAI,MAAM,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAA;AAC5D,MAAI,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;AACtB,MAAI,EAAE,GAAG,EAAE,CAAC;;AAEZ,OAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;AACtC,MAAE,GAAG,MAAM,CAAC,EAAE,CAAC,CAAC;AAChB,MAAE,GAAG,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;GAClB;;AAED,SAAO,EAAE,CAAC;CACX,CAAA;;AAED,OAAO,CAAC,YAAY,GAAG,YAAY,CAAC","file":"mongodb_scram-compiled.js","sourcesContent":["var DbCommand = require('../commands/db_command').DbCommand\n  , utils = require('../utils')\n  , crypto = require('crypto')\n  , Binary = require('bson').Binary\n  , f = require('util').format;\n\nvar authenticate = function(db, username, password, authdb, options, callback) {\n  var numberOfConnections = 0;\n  var errorObject = null;\n  var numberOfValidConnections = 0;\n  var credentialsValid = false;\n  options = options || {};\n\n  // Grab all the connections\n  var connections = options['connection'] != null ? [options['connection']] : db.serverConfig.allRawConnections().slice(0);\n  if(connections.length > 1) {\n    options['onAll'] = true; \n  }\n\n  // Total connections\n  var count = connections.length;\n  if(count == 0) return callback(null, null);\n\n  // Valid connections\n  var numberOfValidConnections = 0;\n  var credentialsValid = false;\n  var errorObject = null;\n\n  // For each connection we need to authenticate\n  while(connections.length > 0) {    \n    // Execute MongoCR\n    var executeScram = function(connection) {\n      // Clean up the user\n      username = username.replace('=', \"=3D\").replace(',', '=2C');\n\n      // Create a random nonce\n      var nonce = crypto.randomBytes(24).toString('base64');\n      var firstBare = f(\"n=%s,r=%s\", username, nonce);\n\n      // Build command structure\n      var cmd = {\n          saslStart: 1\n        , mechanism: 'SCRAM-SHA-1'\n        , payload: new Binary(f(\"n,,%s\", firstBare))\n        , autoAuthorize: 1\n      }\n\n      // Handle the error\n      var handleError = function(err, r) {\n        if(err) {\n          errorObject = err; return false;\n        } else if(r['$err']) {\n          errorObject = r; return false;\n        } else if(r['errmsg']) {\n          errorObject = r; return false;\n        } else {\n          credentialsValid = true;\n          numberOfValidConnections = numberOfValidConnections + 1;            \n        }\n\n        return true\n      }\n\n      // Finish up\n      var finish = function(_count, _numberOfValidConnections) {\n        if(_count == 0 && _numberOfValidConnections > 0) {\n          db.serverConfig.auth.add('SCRAM-SHA-1', db.databaseName, username, password, authdb);\n          // Return correct authentication\n          return callback(null, true);\n        } else if(_count == 0) {\n          if(errorObject == null) errorObject = utils.toError(f(\"failed to authenticate using scram\"));\n          return callback(errorObject, false);\n        }\n      }\n\n      var handleEnd = function(_err, _r) {\n        // Handle any error\n        handleError(_err, _r)\n        // Adjust the number of connections\n        count = count - 1;\n        // Execute the finish\n        finish(count, numberOfValidConnections);                \n      }\n\n      // Execute start sasl command\n      db.db(authdb).command(cmd, { connection: connection }, function(err, r) {\n        // Do we have an error, handle it\n        if(handleError(err, r) == false) {\n          count = count - 1;\n\n          if(count == 0 && numberOfValidConnections > 0) {\n            // Store the auth details\n            addAuthSession(new AuthSession(db, username, password));\n            // Return correct authentication\n            return callback(null, true);\n          } else if(count == 0) {\n            if(errorObject == null) errorObject = utils.toError(f(\"failed to authenticate using scram\"));\n            return callback(errorObject, false);\n          }\n\n          return;\n        }\n\n        // Get the dictionary\n        var dict = parsePayload(r.payload.value())\n\n        // Unpack dictionary\n        var iterations = parseInt(dict.i, 10);\n        var salt = dict.s;\n        var rnonce = dict.r;\n\n        // Set up start of proof\n        var withoutProof = f(\"c=biws,r=%s\", rnonce);\n        var passwordDig = passwordDigest(username, password);\n        var saltedPassword = hi(passwordDig\n            , new Buffer(salt, 'base64')\n            , iterations);\n\n        // Create the client key\n        var hmac = crypto.createHmac('sha1', saltedPassword);\n        hmac.update(new Buffer(\"Client Key\"));\n        var clientKey = new Buffer(hmac.digest('base64'), 'base64');\n\n        // Create the stored key\n        var hash = crypto.createHash('sha1');\n        hash.update(clientKey);\n        var storedKey = new Buffer(hash.digest('base64'), 'base64');\n\n        // Create the authentication message\n        var authMsg = [firstBare, r.payload.value().toString('base64'), withoutProof].join(',');\n\n        // Create client signature\n        var hmac = crypto.createHmac('sha1', storedKey);\n        hmac.update(new Buffer(authMsg));          \n        var clientSig = new Buffer(hmac.digest('base64'), 'base64');\n\n        // Create client proof\n        var clientProof = f(\"p=%s\", new Buffer(xor(clientKey, clientSig)).toString('base64'));\n\n        // Create client final\n        var clientFinal = [withoutProof, clientProof].join(',');\n\n\n        // Generate server key\n        var hmac = crypto.createHmac('sha1', saltedPassword);\n        hmac.update(new Buffer('Server Key'))\n        var serverKey = new Buffer(hmac.digest('base64'), 'base64');\n\n        // Generate server signature\n        var hmac = crypto.createHmac('sha1', serverKey);\n        hmac.update(new Buffer(authMsg))\n        var serverSig = new Buffer(hmac.digest('base64'), 'base64');\n\n        //\n        // Create continue message\n        var cmd = {\n            saslContinue: 1\n          , conversationId: r.conversationId\n          , payload: new Binary(new Buffer(clientFinal))\n        }\n\n        //\n        // Execute sasl continue\n        db.db(authdb).command(cmd, { connection: connection }, function(err, r) {\n          if(err) return handleEnd(err, r);\n          if(r && r.done == false) {\n            var cmd = {\n                saslContinue: 1\n              , conversationId: r.conversationId\n              , payload: new Buffer(0)\n            }\n\n            db.db(authdb).command(cmd, { connection: connection }, function(err, r) {\n              handleEnd(err, r);\n            });\n          } else {\n            handleEnd(err, r);\n          }\n        });\n      });\n    }\n\n    // Get the connection\n    executeScram(connections.shift());\n  }\n}\n\nvar parsePayload = function(payload) {\n  var dict = {};\n  var parts = payload.split(',');\n\n  for(var i = 0; i < parts.length; i++) {\n    var valueParts = parts[i].split('=');\n    dict[valueParts[0]] = valueParts[1];\n  }\n\n  return dict;\n}\n\nvar passwordDigest = function(username, password) {\n  if(typeof username != 'string') throw utils.toError(\"username must be a string\");\n  if(typeof password != 'string') throw utils.toError(\"password must be a string\");\n  if(password.length == 0) throw utils.toError(\"password cannot be empty\");\n  // Use node md5 generator\n  var md5 = crypto.createHash('md5');\n  // Generate keys used for authentication\n  md5.update(username + \":mongo:\" + password);\n  return md5.digest('hex');\n}\n\n// XOR two buffers\nvar xor = function(a, b) {\n  if (!Buffer.isBuffer(a)) a = new Buffer(a)\n  if (!Buffer.isBuffer(b)) b = new Buffer(b)\n  var res = []\n  if (a.length > b.length) {\n    for (var i = 0; i < b.length; i++) {\n      res.push(a[i] ^ b[i])\n    }\n  } else {\n    for (var i = 0; i < a.length; i++) {\n      res.push(a[i] ^ b[i])\n    }\n  }\n  return new Buffer(res);\n}\n\n// Create a final digest\nvar hi = function(data, salt, iterations) {\n  // Create digest\n  var digest = function(msg) {\n    var hmac = crypto.createHmac('sha1', data);\n    hmac.update(msg);\n    var result = hmac.digest('base64')\n    // if(typeof result == 'string') result = new Buffer(result);\n    return new Buffer(result, 'base64');\n  }\n\n  // Create variables\n  salt = Buffer.concat([salt, new Buffer('\\x00\\x00\\x00\\x01')])\n  var ui = digest(salt);\n  var u1 = ui;\n  \n  for(var i = 0; i < iterations - 1; i++) {\n    u1 = digest(u1);\n    ui = xor(ui, u1);\n  }\n\n  return ui;\n}\n\nexports.authenticate = authenticate;\n"]}