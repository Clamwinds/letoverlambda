{"version":3,"sources":["mongodb_sspi.js"],"names":[],"mappings":"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","file":"mongodb_sspi-compiled.js","sourcesContent":["var DbCommand = require('../commands/db_command').DbCommand\n  , utils = require('../utils')\n  , format = require('util').format;\n\n// Kerberos class\nvar Kerberos = null;\nvar MongoAuthProcess = null;\n// Try to grab the Kerberos class\ntry {\n  Kerberos = require('kerberos').Kerberos\n  // Authentication process for Mongo\n  MongoAuthProcess = require('kerberos').processes.MongoAuthProcess\n} catch(err) {}\n\nvar authenticate = function(db, username, password, authdb, options, callback) {\n  var numberOfConnections = 0;\n  var errorObject = null;  \n  var numberOfValidConnections = 0;\n  var credentialsValid = false;\n  options = options || {};\n\n  // We don't have the Kerberos library\n  if(Kerberos == null) return callback(new Error(\"Kerberos library is not installed\"));\n\n  if(options['connection'] != null) {\n    //if a connection was explicitly passed on options, then we have only one...\n    numberOfConnections = 1;\n  } else {\n    // Get the amount of connections in the pool to ensure we have authenticated all comments\n    numberOfConnections = db.serverConfig.allRawConnections().length;\n    options['onAll'] = true;\n  }\n\n  // Set the sspi server name\n  var gssapiServiceName = options['gssapiServiceName'] || 'mongodb';\n\n  // Grab all the connections\n  var connections = db.serverConfig.allRawConnections();\n  \n  // Authenticate all connections\n  for(var i = 0; i < numberOfConnections; i++) {\n    // Start Auth process for a connection\n    SSIPAuthenticate(db, username, password, authdb, gssapiServiceName, connections[i], function(err, result) {\n      // Adjust number of connections left to connect\n      numberOfConnections = numberOfConnections - 1;\n\n      // Ensure we save any error\n      if(err) { \n        errorObject = err;\n      } else {\n        credentialsValid = true;\n        numberOfValidConnections = numberOfValidConnections + 1;\n      }\n\n      // Work around the case where the number of connections are 0\n      if(numberOfConnections <= 0 && typeof callback == 'function') {\n        var internalCallback = callback;\n        callback = null;\n\n        if(errorObject == null) {\n          // We authenticated correctly save the credentials\n          db.serverConfig.auth.add('GSSAPI', db.databaseName, username, password, authdb, gssapiServiceName);\n          // Return valid callback\n          return internalCallback(null, true);          \n        } else if(numberOfValidConnections > 0 && numberOfValidConnections != numberOfConnections\n          && credentialsValid) {\n            // We authenticated correctly save the credentials\n            db.serverConfig.auth.add('GSSAPI', db.databaseName, username, password, authdb, gssapiServiceName);\n            // Return valid callback\n            return internalCallback(null, true);                    \n        } else {\n          return internalCallback(errorObject, false);\n        }\n      }\n    });    \n  }\n}\n\nvar SSIPAuthenticate = function(db, username, password, authdb, service_name, connection, callback) {\n  // --------------------------------------------------------------\n  // Async Version\n  // --------------------------------------------------------------\n  var command = {\n      saslStart: 1\n    , mechanism: 'GSSAPI'\n    , payload: ''\n    , autoAuthorize: 1\n  };\n\n  // Create authenticator\n  var mongo_auth_process = new MongoAuthProcess(connection.socketOptions.host, connection.socketOptions.port, service_name);\n\n  // Execute first sasl step\n  db._executeQueryCommand(DbCommand.createDbCommand(db, command, {}, '$external'), {connection:connection}, function(err, doc) {\n    if(err) return callback(err);\n    doc = doc.documents[0];\n\n    mongo_auth_process.init(username, password, function(err) {\n      if(err) return callback(err);\n\n      mongo_auth_process.transition(doc.payload, function(err, payload) {\n        if(err) return callback(err);\n\n        // Perform the next step against mongod\n        var command = {\n            saslContinue: 1\n          , conversationId: doc.conversationId\n          , payload: payload\n        };\n\n        // Execute the command\n        db._executeQueryCommand(DbCommand.createDbCommand(db, command, {}, '$external'), {connection:connection}, function(err, doc) {\n          if(err) return callback(err);\n          doc = doc.documents[0];\n\n          mongo_auth_process.transition(doc.payload, function(err, payload) {\n            if(err) return callback(err);\n\n            // Perform the next step against mongod\n            var command = {\n                saslContinue: 1\n              , conversationId: doc.conversationId\n              , payload: payload\n            };\n\n            // Execute the command\n            db._executeQueryCommand(DbCommand.createDbCommand(db, command, {}, '$external'), {connection:connection}, function(err, doc) {\n              if(err) return callback(err);\n              doc = doc.documents[0];\n              \n              mongo_auth_process.transition(doc.payload, function(err, payload) {\n                // Perform the next step against mongod\n                var command = {\n                    saslContinue: 1\n                  , conversationId: doc.conversationId\n                  , payload: payload\n                };\n\n                // Execute the command\n                db._executeQueryCommand(DbCommand.createDbCommand(db, command, {}, '$external'), {connection:connection}, function(err, doc) {\n                  if(err) return callback(err);\n                  doc = doc.documents[0];\n\n                  if(doc.done) return callback(null, true);\n                  callback(new Error(\"Authentication failed\"), false);\n                });        \n              });\n            });\n          });\n        });\n      });\n    });\n  });  \n}\n\nexports.authenticate = authenticate;"]}