{"version":3,"sources":["common.js"],"names":[],"mappings":"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","file":"common-compiled.js","sourcesContent":["var utils = require('../../utils');\n\n// Error codes\nvar UNKNOWN_ERROR = 8;\nvar INVALID_BSON_ERROR = 22;\nvar WRITE_CONCERN_ERROR = 64;\nvar MULTIPLE_ERROR = 65;\n\n// Insert types\nvar INSERT = 1;\nvar UPDATE = 2;\nvar REMOVE = 3\n\n/**\n * Helper function to define properties\n */\nvar defineReadOnlyProperty = function(self, name, value) {\n  Object.defineProperty(self, name, {\n      enumerable: true\n    , get: function() {\n      return value;\n    }\n  });\n}\n\n/**\n * Keeps the state of a unordered batch so we can rewrite the results\n * correctly after command execution\n */\nvar Batch = function(batchType, originalZeroIndex) {  \n  this.originalZeroIndex = originalZeroIndex;\n  this.currentIndex = 0;\n  this.originalIndexes = [];\n  this.batchType = batchType;\n  this.operations = [];\n  this.size = 0;\n  this.sizeBytes = 0;\n}\n\n/**\n * Wraps a legacy operation so we can correctly rewrite it's error\n */\nvar LegacyOp = function(batchType, operation, index) {\n  this.batchType = batchType;\n  this.index = index;\n  this.operation = operation;\n}\n\n/**\n * Create a new BatchWriteResult instance (INTERNAL TYPE, do not instantiate directly)\n *\n * @class Represents a BatchWriteResult\n * @property **ok** {boolean} did bulk operation correctly execute\n * @property **nInserted** {number} number of inserted documents\n * @property **nUpdated** {number} number of documents updated logically\n * @property **nUpserted** {number} number of upserted documents\n * @property **nModified** {number} number of documents updated physically on disk\n * @property **nRemoved** {number} number of removed documents\n * @param {Object} batchResult internal data structure with results.\n * @return {BatchWriteResult} a BatchWriteResult instance\n */\nvar BatchWriteResult = function(bulkResult) {\n  defineReadOnlyProperty(this, \"ok\", bulkResult.ok);\n  defineReadOnlyProperty(this, \"nInserted\", bulkResult.nInserted);\n  defineReadOnlyProperty(this, \"nUpserted\", bulkResult.nUpserted);\n  defineReadOnlyProperty(this, \"nMatched\", bulkResult.nMatched);\n  defineReadOnlyProperty(this, \"nModified\", bulkResult.nModified);\n  defineReadOnlyProperty(this, \"nRemoved\", bulkResult.nRemoved);\n  \n  /**\n   * Return an array of upserted ids\n   *\n   * @return {Array}\n   * @api public\n   */\n  this.getUpsertedIds = function() {\n    return bulkResult.upserted;\n  }\n\n  /**\n   * Return the upserted id at position x\n   *\n   * @param {Number} index the number of the upserted id to return, returns undefined if no result for passed in index\n   * @return {Array}\n   * @api public\n   */\n  this.getUpsertedIdAt = function(index) {\n    return bulkResult.upserted[index]; \n  }\n\n  /**\n   * Return raw internal result\n   *\n   * @return {Object}\n   * @api public\n   */\n  this.getRawResponse = function() {\n    return bulkResult;\n  }\n\n  /**\n   * Returns true if the bulk operation contains a write error\n   *\n   * @return {Boolean}\n   * @api public\n   */\n  this.hasWriteErrors = function() {\n    return bulkResult.writeErrors.length > 0;\n  }\n\n  /**\n   * Returns the number of write errors off the bulk operation\n   *\n   * @return {Number}\n   * @api public\n   */\n  this.getWriteErrorCount = function() {\n    return bulkResult.writeErrors.length;\n  }\n\n  /**\n   * Returns a specific write error object\n   *\n   * @return {WriteError}\n   * @api public\n   */\n  this.getWriteErrorAt = function(index) {\n    if(index < bulkResult.writeErrors.length) {\n      return bulkResult.writeErrors[index];\n    }\n    return null;\n  }\n\n  /**\n   * Retrieve all write errors\n   *\n   * @return {Array}\n   * @api public\n   */\n  this.getWriteErrors = function() {\n    return bulkResult.writeErrors;\n  }\n\n  /**\n   * Retrieve lastOp if available\n   *\n   * @return {Array}\n   * @api public\n   */\n  this.getLastOp = function() {\n    return bulkResult.lastOp;\n  }\n\n  /**\n   * Retrieve the write concern error if any\n   *\n   * @return {WriteConcernError}\n   * @api public\n   */\n  this.getWriteConcernError = function() {\n    if(bulkResult.writeConcernErrors.length == 0) {\n      return null;\n    } else if(bulkResult.writeConcernErrors.length == 1) {\n      // Return the error\n      return bulkResult.writeConcernErrors[0];\n    } else {\n\n      // Combine the errors\n      var errmsg = \"\";\n      for(var i = 0; i < bulkResult.writeConcernErrors.length; i++) {\n        var err = bulkResult.writeConcernErrors[i];\n        errmsg = errmsg + err.errmsg;\n        \n        // TODO: Something better\n        if(i == 0) errmsg = errmsg + \" and \";\n      }\n\n      return new WriteConcernError({ errmsg : errmsg, code : WRITE_CONCERN_ERROR });\n    }\n  }\n\n  this.toJSON = function() {\n    return bulkResult;\n  }\n\n  this.toString = function() {\n    return \"BatchWriteResult(\" + this.toJSON(bulkResult) + \")\";\n  }\n\n  this.isOk = function() {\n    return bulkResult.ok == 1;\n  }\n}\n\n/**\n * Wraps a write concern error\n */\nvar WriteConcernError = function(err) {\n  if(!(this instanceof WriteConcernError)) return new WriteConcernError(err);\n\n  // Define properties\n  defineReadOnlyProperty(this, \"code\", err.code);\n  defineReadOnlyProperty(this, \"errmsg\", err.errmsg);\n\n  this.toJSON = function() {\n    return {code: err.code, errmsg: err.errmsg};\n  }\n\n  this.toString = function() {\n    return \"WriteConcernError(\" + err.errmsg + \")\";\n  }\n}\n\n/**\n * Wraps the error\n */\nvar WriteError = function(err) {\n  if(!(this instanceof WriteError)) return new WriteError(err);\n\n  // Define properties\n  defineReadOnlyProperty(this, \"code\", err.code);\n  defineReadOnlyProperty(this, \"index\", err.index);\n  defineReadOnlyProperty(this, \"errmsg\", err.errmsg);\n\n  //\n  // Define access methods\n  this.getOperation = function() {\n    return err.op;\n  }\n\n  this.toJSON = function() {\n    return {code: err.code, index: err.index, errmsg: err.errmsg, op: err.op};\n  }\n\n  this.toString = function() {\n    return \"WriteError(\" + JSON.stringify(this.toJSON()) + \")\";\n  }\n}\n\n/**\n * Merges results into shared data structure\n */\nvar mergeBatchResults = function(ordered, batch, bulkResult, err, result) {\n  // If we have an error set the result to be the err object\n  if(err) {\n    result = err;\n  }\n\n  // Do we have a top level error stop processing and return\n  if(result.ok == 0 && bulkResult.ok == 1) {\n    bulkResult.ok = 0;\n    bulkResult.error = utils.toError(result);\n    return;\n  } else if(result.ok == 0 && bulkResult.ok == 0) {\n    return;\n  }\n\n  // Add lastop if available\n  if(result.lastOp) {\n    bulkResult.lastOp = result.lastOp;\n  }\n\n  // If we have an insert Batch type\n  if(batch.batchType == INSERT && result.n) {\n    bulkResult.nInserted = bulkResult.nInserted + result.n;\n  }\n\n  // If we have an insert Batch type\n  if(batch.batchType == REMOVE && result.n) {\n    bulkResult.nRemoved = bulkResult.nRemoved + result.n;\n  }\n\n  var nUpserted = 0;\n\n  // We have an array of upserted values, we need to rewrite the indexes\n  if(Array.isArray(result.upserted)) {\n    nUpserted = result.upserted.length;\n\n    for(var i = 0; i < result.upserted.length; i++) {\n      bulkResult.upserted.push({\n          index: result.upserted[i].index + batch.originalZeroIndex\n        , _id: result.upserted[i]._id\n      });\n    }\n  } else if(result.upserted) {\n\n    nUpserted = 1;\n\n    bulkResult.upserted.push({\n        index: batch.originalZeroIndex\n      , _id: result.upserted\n    });\n  }\n\n  // If we have an update Batch type\n  if(batch.batchType == UPDATE && result.n) {\n    var nModified = result.nModified;\n    bulkResult.nUpserted = bulkResult.nUpserted + nUpserted;\n    bulkResult.nMatched = bulkResult.nMatched + (result.n - nUpserted);\n    \n    if(typeof nModified == 'number') {\n      bulkResult.nModified = bulkResult.nModified + nModified;\n    } else {\n      bulkResult.nModified = null;\n    }\n  }\n\n  if(Array.isArray(result.writeErrors)) {\n    for(var i = 0; i < result.writeErrors.length; i++) {\n\n      var writeError = {\n          index: batch.originalZeroIndex + result.writeErrors[i].index\n        , code: result.writeErrors[i].code\n        , errmsg: result.writeErrors[i].errmsg\n        , op: batch.operations[result.writeErrors[i].index]\n      };\n\n      bulkResult.writeErrors.push(new WriteError(writeError));\n    }\n  }\n\n  if(result.writeConcernError) {\n    bulkResult.writeConcernErrors.push(new WriteConcernError(result.writeConcernError));\n  }\n}\n\n// \n// Merge a legacy result into the master results\nvar mergeLegacyResults = function(_ordered, _op, _batch, _results, _result, _index) {\n  // If we have an error already\n  if(_results.ok == 0) return false;\n  // Handle error\n  if((_result.errmsg || _result.err || _result instanceof Error) && _result.wtimeout != true) {\n    // && ((_result.wtimeout == null && _result.jnote == null && _result.wnote == null)) || _result.err == \"norepl\") {\n    var code = _result.code || UNKNOWN_ERROR; // Returned error code or unknown code\n    var errmsg = _result.errmsg || _result.err;\n    errmsg = errmsg || _result.message;\n\n    // Result is replication issue, rewrite error to match write command      \n    if(_result.wnote || _result.wtimeout || _result.jnote) {\n      // Set the code to replication error\n      code = WRITE_CONCERN_ERROR;\n      // Ensure we get the right error message\n      errmsg = _result.wnote || errmsg;\n      errmsg = _result.jnote || errmsg;\n    }\n\n    //\n    // We have an error that is a show stopper, 16544 and 13 are auth errors that should stop processing\n    if(_result.wnote \n      || _result.jnote == \"journaling not enabled on this server\" \n      || _result.err == \"norepl\"\n      || _result.code == 16544 \n      || _result.code == 13) {\n      _results.ok = 0;\n      _results.error = utils.toError({code: code, errmsg: errmsg});\n      return false;\n    }    \n\n    // Create a write error\n    var errResult = new WriteError({\n        index: _index\n      , code: code\n      , errmsg: errmsg\n      , op: _op      \n    });\n    \n    // Err details\n    _results.writeErrors.push(errResult);\n\n    // Check if we any errors\n    if(_ordered == true \n      && _result.jnote == null \n      && _result.wnote == null \n      && _result.wtimeout == null) {\n      return false;\n    }\n  } else if(_batch.batchType == INSERT) {\n    _results.nInserted = _results.nInserted + 1;\n  } else if(_batch.batchType == UPDATE) {\n    // If we have an upserted value or if the user provided a custom _id value\n    if(_result.upserted || (!_result.updatedExisting && _result.upserted == null)) {\n      _results.nUpserted = _results.nUpserted + 1;\n    } else {\n      _results.nMatched = _results.nMatched + _result.n;\n      _results.nModified = null;\n     }\n  } else if(_batch.batchType == REMOVE) {\n    _results.nRemoved = _results.nRemoved + _result;\n  }\n\n  // We have a write concern error, add a write concern error to the results\n  if(_result.wtimeout != null || _result.jnote != null || _result.wnote != null) {\n    var error = _result.err || _result.errmsg || _result.wnote || _result.jnote || _result.wtimeout;\n    var code = _result.code || WRITE_CONCERN_ERROR;\n    // Push a write concern error to the list\n    _results.writeConcernErrors.push(new WriteConcernError({errmsg: error, code: code}));\n  }\n\n  // We have an upserted field (might happen with a write concern error)\n  if(_result.upserted) {\n    _results.upserted.push({\n        index: _index\n      , _id: _result.upserted\n    })\n  } else if(!_result.updatedExisting && _result.upserted == null && _op.q && _op.q._id) {\n    _results.upserted.push({\n        index: _index\n      , _id: _op.q._id\n    })    \n  }\n}\n\n//\n// Clone the options\nvar cloneOptions = function(options) {\n  var clone = {};\n  var keys = Object.keys(options);\n  for(var i = 0; i < keys.length; i++) {\n    clone[keys[i]] = options[keys[i]];\n  }\n\n  return clone;\n}\n\n// Exports symbols\nexports.BatchWriteResult = BatchWriteResult;\nexports.WriteError = WriteError;\nexports.Batch = Batch;\nexports.LegacyOp = LegacyOp;\nexports.mergeBatchResults = mergeBatchResults;\nexports.cloneOptions = cloneOptions;\nexports.mergeLegacyResults = mergeLegacyResults;\nexports.INVALID_BSON_ERROR = INVALID_BSON_ERROR;\nexports.WRITE_CONCERN_ERROR = WRITE_CONCERN_ERROR;\nexports.MULTIPLE_ERROR = MULTIPLE_ERROR;\nexports.UNKNOWN_ERROR = UNKNOWN_ERROR;\nexports.INSERT = INSERT;\nexports.UPDATE = UPDATE;\nexports.REMOVE = REMOVE;"]}