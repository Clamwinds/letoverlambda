{"version":3,"sources":["ordered.js"],"names":[],"mappings":"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","file":"ordered-compiled.js","sourcesContent":["var shared = require('../shared')\n\t, common = require('./common')\n\t, utils = require('../../utils')\n  , hasWriteCommands = utils.hasWriteCommands\n  , WriteError = common.WriteError\n  , BatchWriteResult = common.BatchWriteResult\n  , LegacyOp = common.LegacyOp\n  , ObjectID = require('bson').ObjectID\n  , Batch = common.Batch\n  , mergeBatchResults = common.mergeBatchResults;\n\n/**\n * Create a new OrderedBulkOperation instance (INTERNAL TYPE, do not instantiate directly)\n *\n * Options\n *  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write\n *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)\n *  - **fsync**, (Boolean, default:false) write waits for fsync before returning, from MongoDB 2.6 on, fsync cannot be combined with journal\n *  - **j**, (Boolean, default:false) write waits for journal sync before returning\n *\n * @class Represents a OrderedBulkOperation\n * @param {Object} collection collection instance.\n * @param {Object} [options] additional options for the collection.\n * @return {Object} a ordered bulk operation instance.\n */\nfunction OrderedBulkOperation (collection, options) {\n\toptions = options == null ? {} : options;\n\t// TODO Bring from driver information in isMaster\n\tvar self = this;\n\tvar executed = false;\n\t\n\t// Current item\n\tvar currentOp = null;\n\n\t// Handle to the bson serializer, used to calculate running sizes\n  var db = collection.db;\n\tvar bson = db.bson;\n\n\t// Namespace for the operation\n  var namespace = collection.collectionName;  \n\n  // Set max byte size\n\tvar maxWriteBatchSize = db.serverConfig.checkoutWriter().maxWriteBatchSize || 1000;\n\tvar maxBatchSizeBytes = db.serverConfig.checkoutWriter().maxBsonSize;\n\n  // Get the write concern\n  var writeConcern = shared._getWriteConcern(collection, options);\n\t\n  // Current batch\n  var currentBatch = null;\n  var currentIndex = 0;\n  var currentBatchSize = 0;\n  var currentBatchSizeBytes = 0;\n  var batches = [];\n\n  // Final results\n  var bulkResult = {\n  \t  ok: 1\n    , writeErrors: []\n    , writeConcernErrors: []\n    , nInserted: 0\n    , nUpserted: 0\n    , nMatched: 0\n    , nModified: 0\n    , nRemoved: 0\n    , upserted: []\n  };\n\n  // Specify a full class so we can generate documentation correctly\n\tvar FindOperators = function() {\n\t\t/**\n\t\t * Add a single update document to the bulk operation\n\t\t *\n\t\t * @param {Object} doc update operations\n\t\t * @return {OrderedBulkOperation}\n\t\t * @api public\n\t\t */\n\t\tthis.update = function(updateDocument) {\n\t\t\t// Perform upsert\n\t\t\tvar upsert = typeof currentOp.upsert == 'boolean' ? currentOp.upsert : false;\n\t\t\t\n\t\t\t// Establish the update command\n\t\t\tvar document = {\n\t\t\t\t\tq: currentOp.selector\n\t\t\t\t, u: updateDocument\n\t\t\t\t, multi: true\n\t\t\t\t, upsert: upsert\n\t\t\t}\n\n\t\t\t// Clear out current Op\n\t\t\tcurrentOp = null;\n\t\t\t// Add the update document to the list\n\t\t\treturn addToOperationsList(self, common.UPDATE, document);\n\t\t}\t\n\n\t\t/**\n\t\t * Add a single update one document to the bulk operation\n\t\t *\n\t\t * @param {Object} doc update operations\n\t\t * @return {OrderedBulkOperation}\n\t\t * @api public\n\t\t */\n\t\tthis.updateOne = function(updateDocument) {\n\t\t\t// Perform upsert\n\t\t\tvar upsert = typeof currentOp.upsert == 'boolean' ? currentOp.upsert : false;\n\t\t\t\n\t\t\t// Establish the update command\n\t\t\tvar document = {\n\t\t\t\t\tq: currentOp.selector\n\t\t\t\t, u: updateDocument\n\t\t\t\t, multi: false\n\t\t\t\t, upsert: upsert\n\t\t\t}\n\n\t\t\t// Clear out current Op\n\t\t\tcurrentOp = null;\n\t\t\t// Add the update document to the list\n\t\t\treturn addToOperationsList(self, common.UPDATE, document);\n\t\t}\n\n\t\t/**\n\t\t * Add a replace one operation to the bulk operation\n\t\t *\n\t\t * @param {Object} doc the new document to replace the existing one with\n\t\t * @return {OrderedBulkOperation}\n\t\t * @api public\n\t\t */\n\t\tthis.replaceOne = function(updateDocument) {\n\t\t\tthis.updateOne(updateDocument);\n\t\t}\n\n\t\t/**\n\t\t * Upsert modifier for update bulk operation\n\t\t *\n\t\t * @return {OrderedBulkOperation}\n\t\t * @api public\n\t\t */\n\t\tthis.upsert = function() {\n\t\t\tcurrentOp.upsert = true;\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n\t\t * Add a remove one operation to the bulk operation\n\t\t *\n\t\t * @param {Object} doc selector for the removal of documents\n\t\t * @return {OrderedBulkOperation}\n\t\t * @api public\n\t\t */\n\t\tthis.removeOne = function() {\t\t\n\t\t\t// Establish the update command\n\t\t\tvar document = {\n\t\t\t\t\tq: currentOp.selector\n\t\t\t\t, limit: 1\n\t\t\t}\n\n\t\t\t// Clear out current Op\n\t\t\tcurrentOp = null;\n\t\t\t// Add the remove document to the list\n\t\t\treturn addToOperationsList(self, common.REMOVE, document);\n\t\t}\n\n\t\t/**\n\t\t * Add a remove operation to the bulk operation\n\t\t *\n\t\t * @param {Object} doc selector for the single document to remove\n\t\t * @return {OrderedBulkOperation}\n\t\t * @api public\n\t\t */\n\t\tthis.remove = function() {\n\t\t\t// Establish the update command\n\t\t\tvar document = {\n\t\t\t\t\tq: currentOp.selector\n\t\t\t\t, limit: 0\n\t\t\t}\n\n\t\t\t// Clear out current Op\n\t\t\tcurrentOp = null;\n\t\t\t// Add the remove document to the list\n\t\t\treturn addToOperationsList(self, common.REMOVE, document);\t\t\t\t\n\t\t}\n\t}\n\n\t/**\n\t * Add a single insert document to the bulk operation\n\t *\n\t * @param {Object} doc the document to insert\n\t * @return {OrderedBulkOperation}\n\t * @api public\n\t */\n\tthis.insert = function(document) {\n\t\tif(document._id == null) document._id = new ObjectID();\n\t\treturn addToOperationsList(self, common.INSERT, document);\n\t}\n\n\tvar getOrderedCommand = function(_self, _namespace, _docType, _operationDocuments) {\n\t\t// Set up the types of operation\n\t\tif(_docType == common.INSERT) {\n\t\t\treturn {\n\t\t\t\t\tinsert: _namespace\n\t\t\t\t, documents: _operationDocuments\n\t\t\t\t, ordered:true \n\t\t\t}\n\t\t} else if(_docType == common.UPDATE) {\n\t\t\treturn {\n\t\t\t\t\tupdate: _namespace\n\t\t\t\t, updates: _operationDocuments\n\t\t\t\t, ordered:true\n\t\t\t};\n\t\t} else if(_docType == common.REMOVE) {\n\t\t\treturn {\n\t\t\t\t\tdelete: _namespace\n\t\t\t\t, deletes: _operationDocuments\n\t\t\t\t, ordered:true\n\t\t\t};\n\t\t}\t\t\n\t}\n\n\t// Add to internal list of documents\n\tvar addToOperationsList = function(_self, docType, document) {\n    // Get the bsonSize\n    var bsonSize = bson.calculateObjectSize(document, false);\n    // Throw error if the doc is bigger than the max BSON size\n    if(bsonSize >= maxBatchSizeBytes) throw utils.toError(\"document is larger than the maximum size \" + maxBatchSizeBytes);\n    // Create a new batch object if we don't have a current one\n    if(currentBatch == null) currentBatch = new Batch(docType, currentIndex);\n    \n    // Check if we need to create a new batch\n    if(((currentBatchSize + 1) >= maxWriteBatchSize)\n      || ((currentBatchSizeBytes +  currentBatchSizeBytes) >= maxBatchSizeBytes)\n      || (currentBatch.batchType != docType)) {\n      // Save the batch to the execution stack\n      batches.push(currentBatch);\n      \n      // Create a new batch\n      currentBatch = new Batch(docType, currentIndex);\n      \n      // Reset the current size trackers\n      currentBatchSize = 0;\n      currentBatchSizeBytes = 0;\n    } else {\n\t    // Update current batch size\n\t    currentBatchSize = currentBatchSize + 1;\n\t    currentBatchSizeBytes = currentBatchSizeBytes + bsonSize;\n    }\n\n    // We have an array of documents\n    if(Array.isArray(document)) {\n\t\t\tthrow utils.toError(\"operation passed in cannot be an Array\");\n    } else {\n    \tcurrentBatch.originalIndexes.push(currentIndex);\n      currentBatch.operations.push(document)\n      currentIndex = currentIndex + 1;\n    }\n\n    // Return self\n\t\treturn _self;\n\t}\n\n\t/**\n\t * Initiate a find operation for an update/updateOne/remove/removeOne/replaceOne\n\t *\n\t * @param {Object} doc\n\t * @return {OrderedBulkOperation}\n\t * @api public\n\t */\n\tthis.find = function(selector) {\n\t\tif (!selector) {\n\t\t\tthrow utils.toError(\"Bulk find operation must specify a selector\");\n\t\t}\n\n\t\t// Save a current selector\n\t\tcurrentOp = {\n\t\t\tselector: selector\n\t\t}\n\n\t\treturn new FindOperators();\n\t}\n\n\t//\n\t// Execute next write command in a chain\n\tvar executeCommands = function(callback) {\n\t\tif(batches.length == 0) {\n\t\t\treturn callback(null, new BatchWriteResult(bulkResult));\n\t\t}\n\n\t\t// Ordered execution of the command\n\t\tvar batch = batches.shift();\n\t\t\n\t\t// Build the command\n\t\tvar cmd = null;\n\n    // Generate the right update\n    if(batch.batchType == common.UPDATE) {\n      cmd = { update: namespace, updates: batch.operations, ordered: true }\n    } else if(batch.batchType == common.INSERT) {\n      cmd = { insert: namespace, documents: batch.operations, ordered: true }\n    } else if(batch.batchType == common.REMOVE) {\n      cmd = { delete: namespace, deletes: batch.operations, ordered: true }\n    }\n\n    // If we have a write concern\n    if(writeConcern != null) {\n      cmd.writeConcern = writeConcern;\n    }    \n\n\t\t// Execute it\n\t\tdb.command(cmd, function(err, result) {\t\n\t\t\t// Merge the results together\n\t\t\tvar mergeResult = mergeBatchResults(true, batch, bulkResult, err, result);\n\t\t\tif(mergeResult != null) {\n\t\t\t\treturn callback(null, new BatchWriteResult(bulkResult));\n\t\t\t}\n\n\t\t\t// If we had a serious error\n\t\t\tif(bulkResult.ok == 0) {\n\t\t\t\treturn callback(bulkResult.error, null);\n\t\t\t}\n\n      // If we are ordered and have errors and they are \n      // not all replication errors terminate the operation          \n      if(bulkResult.writeErrors.length > 0) {\n        return callback(null, new BatchWriteResult(bulkResult));\n      }\n\n\t\t\t// Execute the next command in line\n\t\t\texecuteCommands(callback);\n\t\t});\n\t}\n\n\t// \n\t// Execute the inserts\n\tvar executeInserts = function(_collection, _batch, _result, _callback) {\n\t\tif(_batch.operations.length == 0) {\n\t\t\treturn _callback(null, _result);\n\t\t}\n\n\t\t// Get the first update\n\t\tvar document = _batch.operations.shift();\n\t\tvar index = _batch.originalIndexes.shift();\n\t\t\n\t\t// Options for the update operation\n\t\tvar options = writeConcern || {};\n\n\t\t// Execute the update\n\t\t_collection.insert(document, options, function(err, r) {\n\t\t\t// If we have don't have w:0 merge the result\n\t\t\tif(options.w == null || options.w != 0) {\n\t\t\t\t// Merge the results in \n\t\t\t\tvar result = common.mergeLegacyResults(true, document, _batch, bulkResult, err || r, index);\n\n\t\t\t\tif(result == false) {\n\t\t\t\t\treturn _callback(null, new BatchWriteResult(bulkResult));\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\n\t\t\t// Update the index\n\t\t\t_batch.currentIndex = _batch.currentIndex + 1;\n\n\t\t\t// Execute the next insert\t\t\n\t\t\texecuteInserts(_collection, _batch, _result, _callback);\n\t\t});\n\t}\n\n\t//\n\t// Execute updates\n\tvar executeUpdates = function(_collection, _batch, _result, _callback) {\n\t\tif(_batch.operations.length == 0) {\n\t\t\treturn _callback(null, _result);\n\t\t}\n\n\t\t// Get the first update\n\t\tvar update = _batch.operations.shift();\n\t\tvar index = _batch.originalIndexes.shift();\n\t\t\n\t\t// Options for the update operation\n\t\tvar options = writeConcern != null ? common.cloneOptions(writeConcern) : {};\n\t\t\n\t\t// Add any additional options\n\t\tif(update.multi) options.multi = update.multi;\n\t\tif(update.upsert) options.upsert = update.upsert;\n\n\t\t// Execute the update\n\t\t_collection.update(update.q, update.u, options, function(err, r, full) {\n\t\t\t// If we have don't have w:0 merge the result\n\t\t\tif(options.w == null || options.w != 0) {\n\t\t\t\t// Merge the results in \n\t\t\t\tvar result = common.mergeLegacyResults(true, update, _batch, bulkResult, err || full, index);\n\t\t\t\tif(result == false) {\n\t\t\t\t\treturn _callback(null, new BatchWriteResult(bulkResult));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Update the index\n\t\t\t_batch.currentIndex = _batch.currentIndex + 1;\n\n\t\t\t// Execute the next insert\t\t\n\t\t\texecuteUpdates(_collection, _batch, _result, _callback);\n\t\t});\n\t}\n\n\t//\n\t// Execute updates\n\tvar executeRemoves = function(_collection, _batch, _result, _callback) {\n\t\tif(_batch.operations.length == 0) {\n\t\t\treturn _callback(null, _result);\n\t\t}\n\n\t\t// Get the first update\n\t\tvar remove = _batch.operations.shift();\n\t\tvar index = _batch.originalIndexes.shift();\n\t\t\n\t\t// Options for the update operation\n\t\tvar options = writeConcern != null ? common.cloneOptions(writeConcern) : {};\n\t\t\n\t\t// Add any additional options\n\t\toptions.single = remove.limit == 1 ? true : false;\n\n\t\t// Execute the update\n\t\t_collection.remove(remove.q, options, function(err, r) {\n\t\t\t// If we have don't have w:0 merge the result\n\t\t\tif(options.w == null || options.w != 0) {\n\t\t\t\t// Merge the results in \n\t\t\t\tvar result = common.mergeLegacyResults(true, remove, _batch, bulkResult, err || r, index);\n\t\t\t\tif(result == false) {\n\t\t\t\t\treturn _callback(null, new BatchWriteResult(bulkResult));\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Update the index\n\t\t\t_batch.currentIndex = _batch.currentIndex + 1;\n\n\t\t\t// Execute the next insert\t\t\n\t\t\texecuteRemoves(_collection, _batch, _result, _callback);\n\t\t});\n\t}\n\n\t//\n\t// Execute all operation in backwards compatible fashion\n\tvar backwardsCompatibilityExecuteCommands = function(callback) {\n\t\tif(batches.length == 0) {\n\t\t\treturn callback(null, new BatchWriteResult(bulkResult));\n\t\t}\n\n\t\t// Ordered execution of the command\n\t\tvar batch = batches.shift();\n\n\t\t// Process the legacy operations\n\t\tvar processLegacyOperations = function(err, results) {\n\t\t\t// If we have any errors stop executing\n      if(bulkResult.writeErrors.length > 0) {\n\t\t\t\treturn callback(null, new BatchWriteResult(bulkResult));\n\t\t\t}\n\n\t\t\t// If we have a top level error stop\n\t\t\tif(bulkResult.ok == 0) {\n\t\t\t\treturn callback(bulkResult.error, null);\n\t\t\t}\n\n\t\t\t// Execute the next step\n\t\t\tbackwardsCompatibilityExecuteCommands(callback);\t\t\t\n\t\t}\n\n\t\t// Execute an insert batch\n\t\tif(batch.batchType == common.INSERT) {\n\t\t\treturn executeInserts(collection, batch, {n: 0}, processLegacyOperations);\n\t\t}\n\n\t\t// Execute an update batch\n\t\tif(batch.batchType == common.UPDATE) {\n\t\t\treturn executeUpdates(collection, batch, {n: 0}, processLegacyOperations);\n\t\t}\n\n\t\t// Execute an update batch\n\t\tif(batch.batchType == common.REMOVE) {\n\t\t\treturn executeRemoves(collection, batch, {n: 0}, processLegacyOperations);\n\t\t}\n\t}\n\n\t/**\n\t * Execute the ordered bulk operation\n\t *\n\t * Options\n\t *  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write\n\t *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)\n\t *  - **fsync**, (Boolean, default:false) write waits for fsync before returning, from MongoDB 2.6 on, fsync cannot be combined with journal\n\t *  - **j**, (Boolean, default:false) write waits for journal sync before returning\n\t *\n\t * @param {Object} [options] additional options during update.\n\t * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from from the ordered bulk operation.\n\t * @return {null}\n\t * @api public\n\t */\n\tthis.execute = function(_writeConcern, callback) {\n\t\tif(executed) throw new utils.toError(\"batch cannot be re-executed\");\n\t\tif(typeof _writeConcern == 'function') {\n\t\t\tcallback = _writeConcern;\n\t\t} else {\n\t\t\twriteConcern = _writeConcern;\n\t\t}\n\n    // If we have current batch\n    if(currentBatch) batches.push(currentBatch);\n\n\t\t// If we have no operations in the bulk raise an error\n\t\tif(batches.length == 0) {\n\t\t\tthrow utils.toError(\"Invalid Operation, No operations in bulk\");\n\t\t}\n\n\t\t// Check if we support bulk commands, override if needed to use legacy ops\n\t\tif(hasWriteCommands(db.serverConfig.checkoutWriter()))\n\t\t\treturn executeCommands(callback);\n\n\t\t// Set nModified to null as we don't support this field\n\t\tbulkResult.nModified = null;\n\n\t\t// Run in backward compatibility mode\n\t\tbackwardsCompatibilityExecuteCommands(callback);\n\t}\n}\n\n/**\n * Returns an unordered batch object\n *\n */\nvar initializeOrderedBulkOp = function(options) {\n\treturn new OrderedBulkOperation(this, options);\n}\n\nexports.initializeOrderedBulkOp = initializeOrderedBulkOp;"]}