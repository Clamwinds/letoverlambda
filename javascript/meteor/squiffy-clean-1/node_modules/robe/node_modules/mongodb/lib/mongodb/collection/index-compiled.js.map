{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["var utils = require('../utils')\n  , CommandCursor = require('../command_cursor').CommandCursor;\n\nvar _getWriteConcern = require('./shared')._getWriteConcern;\n\nvar createIndex = function createIndex (fieldOrSpec, options, callback) {\n  // Clean up call\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = args.pop();\n  options = args.length ? args.shift() || {} : {};\n  options = typeof callback === 'function' ? options : callback;\n  options = options == null ? {} : options;\n\n  // Collect errorOptions\n  var errorOptions = _getWriteConcern(this, options);\n  // Execute create index\n  this.db.createIndex(this.collectionName, fieldOrSpec, options, callback);\n};\n\nvar indexExists = function indexExists(indexes, callback) {\n this.indexInformation(function(err, indexInformation) {\n   // If we have an error return\n   if(err != null) return callback(err, null);\n   // Let's check for the index names\n   if(Array.isArray(indexes)) {\n     for(var i = 0; i < indexes.length; i++) {\n       if(indexInformation[indexes[i]] == null) {\n         return callback(null, false);\n       }\n     }\n\n     // All keys found return true\n     return callback(null, true);\n   } else {\n     return callback(null, indexInformation[indexes] != null);\n   }\n });\n}\n\nvar dropAllIndexes = function dropIndexes (callback) {\n  this.db.dropIndex(this.collectionName, '*', function (err, result) {\n    if(err) return callback(err, false);\n    callback(null, true);\n  });\n};\n\nvar indexInformation = function indexInformation (options, callback) {\n  // Unpack calls\n  var args = Array.prototype.slice.call(arguments, 0);\n  callback = args.pop();\n  options = args.length ? args.shift() || {} : {};\n  // Call the index information\n  this.db.indexInformation(this.collectionName, options, callback);\n};\n\nvar ensureIndex = function ensureIndex (fieldOrSpec, options, callback) {\n  // Clean up call\n  if (typeof callback === 'undefined' && typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  if (options == null) {\n    options = {};\n  }\n\n  // Execute create index\n  this.db.ensureIndex(this.collectionName, fieldOrSpec, options, callback);\n};\n\nvar listIndexes = function listIndexes(options) {\n  options = options || {};\n  // Clone the options\n  options = utils.shallowObjectCopy(options);\n\n  // Checkout the writer\n  var connection = this.db.serverConfig.checkoutReader();\n\n  // We have a list collections command\n  if(connection && connection.serverCapabilities && connection.serverCapabilities.hasListIndexesCommand) {\n    // Cursor options\n    var cursor = options.batchSize ? {batchSize: options.batchSize} : {}\n    // Build the command\n    var command = { listIndexes: this.collectionName, cursor: cursor };\n    // Get the command cursor\n    return new CommandCursor(this.db, this.db.databaseName + \".$cmd\", command);\n  }\n\n  var collection = this.db.collection('system.indexes');\n  return collection.find({ns: this.db.databaseName + \".\" + this.collectionName});\n};\n\nexports.createIndex = createIndex;\nexports.indexExists = indexExists;\nexports.dropAllIndexes = dropAllIndexes;\nexports.indexInformation = indexInformation;\nexports.ensureIndex = ensureIndex;\nexports.listIndexes = listIndexes;\n"]}