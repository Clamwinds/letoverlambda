{"version":3,"sources":["insert_command.js"],"names":[],"mappings":"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","file":"insert_command-compiled.js","sourcesContent":["var BaseCommand = require('./base_command').BaseCommand,\n  inherits = require('util').inherits;\n\n/**\n  Insert Document Command\n**/\nvar InsertCommand = exports.InsertCommand = function(db, collectionName, checkKeys, options) {\n  BaseCommand.call(this);\n\n  this.collectionName = collectionName;\n  this.documents = [];\n  this.checkKeys = checkKeys == null ? true : checkKeys;\n  this.db = db;\n  this.flags = 0;\n  this.serializeFunctions = false;\n\n  // Ensure valid options hash\n  options = options == null ? {} : options;\n\n  // Check if we have keepGoing set -> set flag if it's the case\n  if(options['keepGoing'] != null && options['keepGoing']) {\n    // This will finish inserting all non-index violating documents even if it returns an error\n    this.flags = 1;\n  }\n\n  // Check if we have keepGoing set -> set flag if it's the case\n  if(options['continueOnError'] != null && options['continueOnError']) {\n    // This will finish inserting all non-index violating documents even if it returns an error\n    this.flags = 1;\n  }\n\n  // Let us defined on a command basis if we want functions to be serialized or not\n  if(options['serializeFunctions'] != null && options['serializeFunctions']) {\n    this.serializeFunctions = true;\n  }\n};\n\ninherits(InsertCommand, BaseCommand);\n\n// OpCodes\nInsertCommand.OP_INSERT =\t2002;\n\nInsertCommand.prototype.add = function(document) {\n  if(Buffer.isBuffer(document)) {\n    var object_size = document[0] | document[1] << 8 | document[2] << 16 | document[3] << 24;\n    if(object_size != document.length)  {\n      var error = new Error(\"insert raw message size does not match message header size [\" + document.length + \"] != [\" + object_size + \"]\");\n      error.name = 'MongoError';\n      throw error;\n    }\n  }\n\n  this.documents.push(document);\n  return this;\n};\n\n/*\nstruct {\n    MsgHeader header;             // standard message header\n    int32     ZERO;               // 0 - reserved for future use\n    cstring   fullCollectionName; // \"dbname.collectionname\"\n    BSON[]    documents;          // one or more documents to insert into the collection\n}\n*/\nInsertCommand.prototype.toBinary = function(bsonSettings) {\n  // Validate that we are not passing 0x00 in the colletion name\n  if(!!~this.collectionName.indexOf(\"\\x00\")) {\n    throw new Error(\"namespace cannot contain a null character\");\n  }\n\n  // Calculate total length of the document\n  var totalLengthOfCommand = 4 + Buffer.byteLength(this.collectionName) + 1 + (4 * 4);\n  // var docLength = 0\n  for(var i = 0; i < this.documents.length; i++) {\n    if(Buffer.isBuffer(this.documents[i])) {\n      totalLengthOfCommand += this.documents[i].length;\n    } else {\n      // Calculate size of document\n      totalLengthOfCommand += this.db.bson.calculateObjectSize(this.documents[i], this.serializeFunctions, true);\n    }\n  }\n\n  // Enforce maximum bson size\n  if(!bsonSettings.disableDriverBSONSizeCheck \n    && totalLengthOfCommand > bsonSettings.maxBsonSize) \n    throw new Error(\"Document exceeds maximum allowed bson size of \" + bsonSettings.maxBsonSize + \" bytes\");\n\n  if(bsonSettings.disableDriverBSONSizeCheck \n    && totalLengthOfCommand > bsonSettings.maxMessageSizeBytes) \n    throw new Error(\"Command exceeds maximum message size of \" + bsonSettings.maxMessageSizeBytes + \" bytes\");\n\n  // Let's build the single pass buffer command\n  var _index = 0;\n  var _command = new Buffer(totalLengthOfCommand);\n  // Write the header information to the buffer\n  _command[_index + 3] = (totalLengthOfCommand >> 24) & 0xff;\n  _command[_index + 2] = (totalLengthOfCommand >> 16) & 0xff;\n  _command[_index + 1] = (totalLengthOfCommand >> 8) & 0xff;\n  _command[_index] = totalLengthOfCommand & 0xff;\n  // Adjust index\n  _index = _index + 4;\n  // Write the request ID\n  _command[_index + 3] = (this.requestId >> 24) & 0xff;\n  _command[_index + 2] = (this.requestId >> 16) & 0xff;\n  _command[_index + 1] = (this.requestId >> 8) & 0xff;\n  _command[_index] = this.requestId & 0xff;\n  // Adjust index\n  _index = _index + 4;\n  // Write zero\n  _command[_index++] = 0;\n  _command[_index++] = 0;\n  _command[_index++] = 0;\n  _command[_index++] = 0;\n  // Write the op_code for the command\n  _command[_index + 3] = (InsertCommand.OP_INSERT >> 24) & 0xff;\n  _command[_index + 2] = (InsertCommand.OP_INSERT >> 16) & 0xff;\n  _command[_index + 1] = (InsertCommand.OP_INSERT >> 8) & 0xff;\n  _command[_index] = InsertCommand.OP_INSERT & 0xff;\n  // Adjust index\n  _index = _index + 4;\n  // Write flags if any\n  _command[_index + 3] = (this.flags >> 24) & 0xff;\n  _command[_index + 2] = (this.flags >> 16) & 0xff;\n  _command[_index + 1] = (this.flags >> 8) & 0xff;\n  _command[_index] = this.flags & 0xff;\n  // Adjust index\n  _index = _index + 4;\n  // Write the collection name to the command\n  _index = _index + _command.write(this.collectionName, _index, 'utf8') + 1;\n  _command[_index - 1] = 0;\n\n  // Write all the bson documents to the buffer at the index offset\n  for(var i = 0; i < this.documents.length; i++) {\n    // Document binary length\n    var documentLength = 0\n    var object = this.documents[i];\n\n    // Serialize the selector\n    // If we are passing a raw buffer, do minimal validation\n    if(Buffer.isBuffer(object)) {\n      documentLength = object.length;\n      // Copy the data into the current buffer\n      object.copy(_command, _index);\n    } else {\n      // Serialize the document straight to the buffer\n      documentLength = this.db.bson.serializeWithBufferAndIndex(object, this.checkKeys, _command, _index, this.serializeFunctions) - _index + 1;\n    }\n\n    // Write the length to the document\n    _command[_index + 3] = (documentLength >> 24) & 0xff;\n    _command[_index + 2] = (documentLength >> 16) & 0xff;\n    _command[_index + 1] = (documentLength >> 8) & 0xff;\n    _command[_index] = documentLength & 0xff;\n    // Update index in buffer\n    _index = _index + documentLength;\n    // Add terminating 0 for the object\n    _command[_index - 1] = 0;\n  }\n\n  return _command;\n};\n"]}