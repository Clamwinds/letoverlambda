{"version":3,"sources":["connection.js"],"names":[],"mappings":"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","file":"connection-compiled.js","sourcesContent":["var utils = require('./connection_utils'),\n  inherits = require('util').inherits,\n  net = require('net'),\n  EventEmitter = require('events').EventEmitter,\n  inherits = require('util').inherits,\n  binaryutils = require('../utils'),\n  tls = require('tls');\n\nvar Connection = exports.Connection = function(id, socketOptions) {\n  var self = this;\n  // Set up event emitter\n  EventEmitter.call(this);\n  // Store all socket options\n  this.socketOptions = socketOptions ? socketOptions : {host:'localhost', port:27017, domainSocket:false};\n  // Set keep alive default if not overriden\n  if(this.socketOptions.keepAlive == null && !(process.platform == \"sunos\" || process.platform == \"win32\")) this.socketOptions.keepAlive = 100;\n  // Id for the connection\n  this.id = id;\n  // State of the connection\n  this.connected = false;\n  // Set if this is a domain socket\n  this.domainSocket = this.socketOptions.domainSocket;\n\n  // Supported min and max wire protocol\n  this.minWireVersion = 0;\n  this.maxWireVersion = 3;\n\n  //\n  // Connection parsing state\n  //\n  this.maxBsonSize = socketOptions.maxBsonSize ? socketOptions.maxBsonSize : Connection.DEFAULT_MAX_BSON_SIZE;\n  this.maxMessageSizeBytes = socketOptions.maxMessageSizeBytes ? socketOptions.maxMessageSizeBytes : Connection.DEFAULT_MAX_MESSAGE_SIZE;\n  this.maxNumberOfDocsInBatch = socketOptions.maxWriteBatchSize ? socketOptions.maxWriteBatchSize : Connection.DEFAULT_MAX_WRITE_BATCH_SIZE;\n  // Contains the current message bytes\n  this.buffer = null;\n  // Contains the current message size\n  this.sizeOfMessage = 0;\n  // Contains the readIndex for the messaage\n  this.bytesRead = 0;\n  // Contains spill over bytes from additional messages\n  this.stubBuffer = 0;\n\n  // Just keeps list of events we allow\n  this.eventHandlers = {error:[], parseError:[], poolReady:[], message:[], close:[], timeout:[], end:[]};\n\n  // Just keeps list of events we allow\n  resetHandlers(this, false);\n  \n  // Bson object\n  this.maxBsonSettings = {\n      disableDriverBSONSizeCheck: this.socketOptions['disableDriverBSONSizeCheck'] || false\n    , maxBsonSize: this.maxBsonSize\n    , maxMessageSizeBytes: this.maxMessageSizeBytes\n  }\n\n  // Allow setting the socketTimeoutMS on all connections\n  // to work around issues such as secondaries blocking due to compaction\n  Object.defineProperty(this, \"socketTimeoutMS\", {\n      enumerable: true\n    , get: function () { return self.socketOptions.socketTimeoutMS; }\n    , set: function (value) { \n      // Set the socket timeoutMS value\n      self.socketOptions.socketTimeoutMS = value;\n      // Set the physical connection timeout\n      self.connection.setTimeout(self.socketOptions.socketTimeoutMS);\n    }\n  });  \n}\n\n// Set max bson size\nConnection.DEFAULT_MAX_BSON_SIZE = 1024 * 1024 * 4;\n// Set default to max bson to avoid overflow or bad guesses\nConnection.DEFAULT_MAX_MESSAGE_SIZE = Connection.DEFAULT_MAX_BSON_SIZE;\n// Max default write bulk ops\nConnection.DEFAULT_MAX_WRITE_BATCH_SIZE = 2000;\n\n// Inherit event emitter so we can emit stuff wohoo\ninherits(Connection, EventEmitter);\n\nConnection.prototype.start = function() {\n  var self = this;\n\n  // If we have a normal connection\n  if(this.socketOptions.ssl) {\n    // Create new connection instance\n    if(this.domainSocket) {\n      this.connection = net.createConnection(this.socketOptions.host);\n    } else {\n      this.connection = net.createConnection(this.socketOptions.port, this.socketOptions.host);\n    }\n    if(this.logger != null && this.logger.doDebug){\n      this.logger.debug(\"opened connection\", this.socketOptions);\n    }\n\n    // Set options on the socket\n    this.connection.setTimeout(this.socketOptions.connectTimeoutMS != null ? this.socketOptions.connectTimeoutMS : this.socketOptions.timeout);\n    // Work around for 0.4.X\n    if(process.version.indexOf(\"v0.4\") == -1) this.connection.setNoDelay(this.socketOptions.noDelay);\n    // Set keep alive if defined\n    if(process.version.indexOf(\"v0.4\") == -1) {\n      if(this.socketOptions.keepAlive > 0) {\n        this.connection.setKeepAlive(true, this.socketOptions.keepAlive);\n      } else {\n        this.connection.setKeepAlive(false);\n      }\n    }\n\n    // Check if the driver should validate the certificate\n    var validate_certificates = this.socketOptions.sslValidate == true ? true : false;\n\n    // Create options for the tls connection\n    var tls_options = {\n        socket: this.connection\n      , rejectUnauthorized: false\n    }\n\n    // If we wish to validate the certificate we have provided a ca store\n    if(validate_certificates) {\n      tls_options.ca = this.socketOptions.sslCA;\n    }\n\n    // If we have a certificate to present\n    if(this.socketOptions.sslCert) {      \n      tls_options.cert = this.socketOptions.sslCert;\n      tls_options.key = this.socketOptions.sslKey;\n    }\n\n    // If the driver has been provided a private key password\n    if(this.socketOptions.sslPass) {\n      tls_options.passphrase = this.socketOptions.sslPass;\n    }\n\n    // Contains the cleartext stream\n    var cleartext = null;\n    // Attempt to establish a TLS connection to the server\n    try {\n      cleartext = tls.connect(this.socketOptions.port, this.socketOptions.host, tls_options, function() {      \n        // If we have a ssl certificate validation error return an error\n        if(cleartext.authorizationError && validate_certificates) {          \n          // Emit an error\n          return self.emit(\"error\", cleartext.authorizationError, self, {ssl:true});        \n        }\n        \n        // Connect to the server\n        connectHandler(self)();\n      })      \n    } catch(err) {\n      return self.emit(\"error\", \"SSL connection failed\", self, {ssl:true});\n    }\n\n    // Save the output stream\n    this.writeSteam = cleartext;\n\n    // Set up data handler for the clear stream\n    cleartext.on(\"data\", createDataHandler(this));\n    // Do any handling of end event of the stream\n    cleartext.on(\"end\", endHandler(this));\n    cleartext.on(\"error\", errorHandler(this));    \n\n    // Handle any errors\n    this.connection.on(\"error\", errorHandler(this));    \n    // Handle timeout\n    this.connection.on(\"timeout\", timeoutHandler(this));\n    // Handle drain event\n    this.connection.on(\"drain\", drainHandler(this));\n    // Handle the close event\n    this.connection.on(\"close\", closeHandler(this));\n  } else {\n    // Create new connection instance\n    if(this.domainSocket) {\n      this.connection = net.createConnection(this.socketOptions.host);\n    } else {\n      this.connection = net.createConnection(this.socketOptions.port, this.socketOptions.host);\n    }\n    if(this.logger != null && this.logger.doDebug){\n      this.logger.debug(\"opened connection\", this.socketOptions);\n    }\n\n    // Set options on the socket\n    this.connection.setTimeout(this.socketOptions.connectTimeoutMS != null ? this.socketOptions.connectTimeoutMS : this.socketOptions.timeout);\n    // Work around for 0.4.X\n    if(process.version.indexOf(\"v0.4\") == -1) this.connection.setNoDelay(this.socketOptions.noDelay);\n    // Set keep alive if defined\n    if(process.version.indexOf(\"v0.4\") == -1) {\n      if(this.socketOptions.keepAlive > 0) {\n        this.connection.setKeepAlive(true, this.socketOptions.keepAlive);\n      } else {\n        this.connection.setKeepAlive(false);\n      }\n    }\n\n    // Set up write stream\n    this.writeSteam = this.connection;\n    // Add handlers\n    this.connection.on(\"error\", errorHandler(this));\n    // Add all handlers to the socket to manage it\n    this.connection.on(\"connect\", connectHandler(this));\n    // this.connection.on(\"end\", endHandler(this));\n    this.connection.on(\"data\", createDataHandler(this));\n    this.connection.on(\"timeout\", timeoutHandler(this));\n    this.connection.on(\"drain\", drainHandler(this));\n    this.connection.on(\"close\", closeHandler(this));\n  }\n}\n\n/**\n * @ignore\n */\nConnection.prototype.setSocketOptions = function(options) {\n  options = options || {};\n\n  if(typeof options.connectTimeoutMS == 'number') {\n    this.socketOptions.connectTimeoutMS = options.connectTimeoutMS;\n  }\n\n  if(typeof options.socketTimeoutMS == 'number') {\n    this.socketOptions.socketTimeoutMS = options.socketTimeoutMS;\n    // Set the current socket timeout\n    this.connection.setTimeout(options.socketTimeoutMS);\n  }\n}\n\n// Check if the sockets are live\nConnection.prototype.isConnected = function() {\n  return this.connected && !this.connection.destroyed && this.connection.writable;\n}\n\n// Validate if the driver supports this server\nConnection.prototype.isCompatible = function() {\n  if(this.serverCapabilities == null) return true;\n\n  // Is compatible with backward server\n  if(this.serverCapabilities.minWireVersion == 0 \n    && this.serverCapabilities.maxWireVersion ==0) return true;\n\n  // Check if we overlap\n  if(this.serverCapabilities.minWireVersion >= this.minWireVersion\n    && this.serverCapabilities.maxWireVersion <= this.maxWireVersion) return true;\n\n  // Not compatible\n  return false;\n}\n\n// Write the data out to the socket\nConnection.prototype.write = function(command, callback) {\n  try {\n    // If we have a list off commands to be executed on the same socket\n    if(Array.isArray(command)) {\n      for(var i = 0; i < command.length; i++) {\n        try {\n          // Pass in the bson validation settings (validate early)\n          var binaryCommand = command[i].toBinary(this.maxBsonSettings);\n\n          if(this.logger != null && this.logger.doDebug) \n            this.logger.debug(\"writing command to mongodb\", {binary: binaryCommand, json: command[i]});\n\n          this.writeSteam.write(binaryCommand);\n        } catch(err) {\n          return callback(err, null);\n        }\n      }\n    } else {\n      try {\n        // Pass in the bson validation settings (validate early)\n        var binaryCommand = command.toBinary(this.maxBsonSettings);\n        // Do we have a logger active log the event\n        if(this.logger != null && this.logger.doDebug) \n          this.logger.debug(\"writing command to mongodb\", {binary: binaryCommand, json: command});\n        // Write the binary command out to socket\n        this.writeSteam.write(binaryCommand);\n      } catch(err) {\n        return callback(err, null);\n      }\n    }\n  } catch (err) {\n    if(typeof callback === 'function') callback(err);\n  }\n}\n\n// Force the closure of the connection\nConnection.prototype.close = function() {\n  // clear out all the listeners\n  resetHandlers(this, true);\n  // Add a dummy error listener to catch any weird last moment errors (and ignore them)\n  this.connection.on(\"error\", function() {})\n  // destroy connection\n  this.connection.destroy();\n  if(this.logger != null && this.logger.doDebug){\n    this.logger.debug(\"closed connection\", this.connection);\n  }\n}\n\n// Reset all handlers\nvar resetHandlers = function(self, clearListeners) {\n  self.eventHandlers = {error:[], connect:[], close:[], end:[], timeout:[], parseError:[], message:[]};\n\n  // If we want to clear all the listeners\n  if(clearListeners && self.connection != null) {\n    var keys = Object.keys(self.eventHandlers);\n    // Remove all listeners\n    for(var i = 0; i < keys.length; i++) {\n      self.connection.removeAllListeners(keys[i]);\n    }\n  }\n}\n\n//\n// Handlers\n//\n\n// Connect handler\nvar connectHandler = function(self) {\n  return function(data) {\n    // Set connected\n    self.connected = true;\n    // Now that we are connected set the socket timeout\n    self.connection.setTimeout(self.socketOptions.socketTimeoutMS != null ? self.socketOptions.socketTimeoutMS : self.socketOptions.timeout);\n    // Emit the connect event with no error\n    self.emit(\"connect\", null, self);\n  }\n}\n\nvar createDataHandler = exports.Connection.createDataHandler = function(self) {\n  // We need to handle the parsing of the data\n  // and emit the messages when there is a complete one\n  return function(data) {\n    // Parse until we are done with the data\n    while(data.length > 0) {\n      // If we still have bytes to read on the current message\n      if(self.bytesRead > 0 && self.sizeOfMessage > 0) {\n        // Calculate the amount of remaining bytes\n        var remainingBytesToRead = self.sizeOfMessage - self.bytesRead;\n        // Check if the current chunk contains the rest of the message\n        if(remainingBytesToRead > data.length) {\n          // Copy the new data into the exiting buffer (should have been allocated when we know the message size)\n          data.copy(self.buffer, self.bytesRead);\n          // Adjust the number of bytes read so it point to the correct index in the buffer\n          self.bytesRead = self.bytesRead + data.length;\n\n          // Reset state of buffer\n          data = new Buffer(0);\n        } else {\n          // Copy the missing part of the data into our current buffer\n          data.copy(self.buffer, self.bytesRead, 0, remainingBytesToRead);\n          // Slice the overflow into a new buffer that we will then re-parse\n          data = data.slice(remainingBytesToRead);\n\n          // Emit current complete message\n          try {\n            var emitBuffer = self.buffer;\n            // Reset state of buffer\n            self.buffer = null;\n            self.sizeOfMessage = 0;\n            self.bytesRead = 0;\n            self.stubBuffer = null;\n            // Emit the buffer\n            self.emit(\"message\", emitBuffer, self);\n          } catch(err) {\n            var errorObject = {err:\"socketHandler\", trace:err, bin:self.buffer, parseState:{\n              sizeOfMessage:self.sizeOfMessage,\n              bytesRead:self.bytesRead,\n              stubBuffer:self.stubBuffer}};\n            if(self.logger != null && self.logger.doError) self.logger.error(\"parseError\", errorObject);\n            // We got a parse Error fire it off then keep going\n            self.emit(\"parseError\", errorObject, self);\n          }\n        }\n      } else {\n        // Stub buffer is kept in case we don't get enough bytes to determine the\n        // size of the message (< 4 bytes)\n        if(self.stubBuffer != null && self.stubBuffer.length > 0) {\n\n          // If we have enough bytes to determine the message size let's do it\n          if(self.stubBuffer.length + data.length > 4) {\n            // Prepad the data\n            var newData = new Buffer(self.stubBuffer.length + data.length);\n            self.stubBuffer.copy(newData, 0);\n            data.copy(newData, self.stubBuffer.length);\n            // Reassign for parsing\n            data = newData;\n\n            // Reset state of buffer\n            self.buffer = null;\n            self.sizeOfMessage = 0;\n            self.bytesRead = 0;\n            self.stubBuffer = null;\n\n          } else {\n\n            // Add the the bytes to the stub buffer\n            var newStubBuffer = new Buffer(self.stubBuffer.length + data.length);\n            // Copy existing stub buffer\n            self.stubBuffer.copy(newStubBuffer, 0);\n            // Copy missing part of the data\n            data.copy(newStubBuffer, self.stubBuffer.length);\n            // Exit parsing loop\n            data = new Buffer(0);\n          }\n        } else {\n          if(data.length > 4) {\n            // Retrieve the message size\n            var sizeOfMessage = binaryutils.decodeUInt32(data, 0);\n            // If we have a negative sizeOfMessage emit error and return\n            if(sizeOfMessage < 0 || sizeOfMessage > self.maxMessageSizeBytes) {\n              var errorObject = {err:\"socketHandler\", trace:'', bin:self.buffer, parseState:{\n                sizeOfMessage: sizeOfMessage,\n                bytesRead: self.bytesRead,\n                stubBuffer: self.stubBuffer}};\n              if(self.logger != null && self.logger.doError) self.logger.error(\"parseError\", errorObject);\n              // We got a parse Error fire it off then keep going\n              self.emit(\"parseError\", errorObject, self);\n              return;\n            }\n\n            // Ensure that the size of message is larger than 0 and less than the max allowed\n            if(sizeOfMessage > 4 && sizeOfMessage < self.maxMessageSizeBytes && sizeOfMessage > data.length) {\n              self.buffer = new Buffer(sizeOfMessage);\n              // Copy all the data into the buffer\n              data.copy(self.buffer, 0);\n              // Update bytes read\n              self.bytesRead = data.length;\n              // Update sizeOfMessage\n              self.sizeOfMessage = sizeOfMessage;\n              // Ensure stub buffer is null\n              self.stubBuffer = null;\n              // Exit parsing loop\n              data = new Buffer(0);\n\n            } else if(sizeOfMessage > 4 && sizeOfMessage < self.maxMessageSizeBytes && sizeOfMessage == data.length) {\n              try {\n                var emitBuffer = data;\n                // Reset state of buffer\n                self.buffer = null;\n                self.sizeOfMessage = 0;\n                self.bytesRead = 0;\n                self.stubBuffer = null;\n                // Exit parsing loop\n                data = new Buffer(0);\n                // Emit the message\n                self.emit(\"message\", emitBuffer, self);\n              } catch (err) {\n                var errorObject = {err:\"socketHandler\", trace:err, bin:self.buffer, parseState:{\n                  sizeOfMessage:self.sizeOfMessage,\n                  bytesRead:self.bytesRead,\n                  stubBuffer:self.stubBuffer}};\n                if(self.logger != null && self.logger.doError) self.logger.error(\"parseError\", errorObject);\n                // We got a parse Error fire it off then keep going\n                self.emit(\"parseError\", errorObject, self);\n              }\n            } else if(sizeOfMessage <= 4 || sizeOfMessage > self.maxMessageSizeBytes) {\n              var errorObject = {err:\"socketHandler\", trace:null, bin:data, parseState:{\n                sizeOfMessage:sizeOfMessage,\n                bytesRead:0,\n                buffer:null,\n                stubBuffer:null}};\n              if(self.logger != null && self.logger.doError) self.logger.error(\"parseError\", errorObject);\n              // We got a parse Error fire it off then keep going\n              self.emit(\"parseError\", errorObject, self);\n\n              // Clear out the state of the parser\n              self.buffer = null;\n              self.sizeOfMessage = 0;\n              self.bytesRead = 0;\n              self.stubBuffer = null;\n              // Exit parsing loop\n              data = new Buffer(0);\n\n            } else {\n              try {\n                var emitBuffer = data.slice(0, sizeOfMessage);\n                // Reset state of buffer\n                self.buffer = null;\n                self.sizeOfMessage = 0;\n                self.bytesRead = 0;\n                self.stubBuffer = null;\n                // Copy rest of message\n                data = data.slice(sizeOfMessage);\n                // Emit the message\n                self.emit(\"message\", emitBuffer, self);\n              } catch (err) {\n                var errorObject = {err:\"socketHandler\", trace:err, bin:self.buffer, parseState:{\n                  sizeOfMessage:sizeOfMessage,\n                  bytesRead:self.bytesRead,\n                  stubBuffer:self.stubBuffer}};\n                if(self.logger != null && self.logger.doError) self.logger.error(\"parseError\", errorObject);\n                // We got a parse Error fire it off then keep going\n                self.emit(\"parseError\", errorObject, self);\n              }\n\n            }\n          } else {\n            // Create a buffer that contains the space for the non-complete message\n            self.stubBuffer = new Buffer(data.length)\n            // Copy the data to the stub buffer\n            data.copy(self.stubBuffer, 0);\n            // Exit parsing loop\n            data = new Buffer(0);\n          }\n        }\n      }\n    }\n  }\n}\n\nvar endHandler = function(self) {\n  return function() {\n    // Set connected to false\n    self.connected = false;\n    // Emit end event\n    self.emit(\"end\", {err: 'connection received Fin packet from [' + self.socketOptions.host + ':' + self.socketOptions.port + ']'}, self);\n  }\n}\n\nvar timeoutHandler = function(self) {\n  return function() {\n    // Set connected to false\n    self.connected = false;\n    // Emit timeout event\n    self.emit(\"timeout\", {err: 'connection to [' + self.socketOptions.host + ':' + self.socketOptions.port + '] timed out'}, self);\n  }\n}\n\nvar drainHandler = function(self) {\n  return function() {\n  }\n}\n\nvar errorHandler = function(self) {\n  return function(err) {\n    self.connection.destroy();\n    // Set connected to false\n    self.connected = false;\n    // Emit error\n    self.emit(\"error\", {err: 'failed to connect to [' + self.socketOptions.host + ':' + self.socketOptions.port + ']'}, self);\n  }\n}\n\nvar closeHandler = function(self) {\n  return function(hadError) {\n    // If we have an error during the connection phase\n    if(hadError && !self.connected) {\n      // Set disconnected\n      self.connected = false;\n      // Emit error\n      self.emit(\"error\", {err: 'failed to connect to [' + self.socketOptions.host + ':' + self.socketOptions.port + ']'}, self);\n    } else {\n      // Set disconnected\n      self.connected = false;\n      // Emit close\n      self.emit(\"close\", {err: 'connection closed to [' + self.socketOptions.host + ':' + self.socketOptions.port + ']'}, self);\n    }\n  }\n}\n\n// Some basic defaults\nConnection.DEFAULT_PORT = 27017;\n\n\n\n\n\n\n\n"]}