{"version":3,"sources":["connection_pool.js"],"names":[],"mappings":"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","file":"connection_pool-compiled.js","sourcesContent":["var utils = require('./connection_utils'),\n  inherits = require('util').inherits,\n  net = require('net'),\n  timers = require('timers'),\n  EventEmitter = require('events').EventEmitter,\n  inherits = require('util').inherits,\n  MongoReply = require(\"../responses/mongo_reply\").MongoReply,\n  Connection = require(\"./connection\").Connection;\n\n// Set processor, setImmediate if 0.10 otherwise nextTick\nvar processor = require('../utils').processor();\n\nvar ConnectionPool = exports.ConnectionPool = function(host, port, poolSize, bson, socketOptions) {\n  if(typeof host !== 'string') {\n    throw new Error(\"host must be specified [\" + host + \"]\");\n  }\n\n  // Set up event emitter\n  EventEmitter.call(this);\n\n  // Keep all options for the socket in a specific collection allowing the user to specify the\n  // Wished upon socket connection parameters\n  this.socketOptions = typeof socketOptions === 'object' ? socketOptions : {};\n  this.socketOptions.host = host;\n  this.socketOptions.port = port;\n  this.socketOptions.domainSocket = false;\n  this.bson = bson;\n  // PoolSize is always + 1 for special reserved \"measurment\" socket (like ping, stats etc)\n  if (typeof poolSize !== 'number') {\n    poolSize = parseInt(poolSize.toString(), 10);\n    if (isNaN(poolSize)) {\n      throw new Error(\"poolSize must be a number!\");\n    }\n  }\n  this.poolSize = poolSize;\n  this.minPoolSize = Math.floor(this.poolSize / 2) + 1;\n\n  // Check if the host is a socket\n  if(host.match(/^\\//)) {\n    this.socketOptions.domainSocket = true;\n  } else if(typeof port === 'string') {\n    try { \n      port = parseInt(port, 10); \n    } catch(err) { \n      new Error(\"port must be specified or valid integer[\"  + port + \"]\"); \n    }\n  } else if(typeof port !== 'number') {\n    throw new Error(\"port must be specified [\"  + port + \"]\");\n  }\n\n  // Set default settings for the socket options\n  utils.setIntegerParameter(this.socketOptions, 'timeout', 0);\n  // Delay before writing out the data to the server\n  utils.setBooleanParameter(this.socketOptions, 'noDelay', true);\n  // Delay before writing out the data to the server\n  utils.setIntegerParameter(this.socketOptions, 'keepAlive', 0);\n  // Set the encoding of the data read, default is binary == null\n  utils.setStringParameter(this.socketOptions, 'encoding', null);\n  // Allows you to set a throttling bufferSize if you need to stop overflows\n  utils.setIntegerParameter(this.socketOptions, 'bufferSize', 0);\n\n  // Internal structures\n  this.openConnections = [];\n  // Assign connection id's\n  this.connectionId = 0;\n\n  // Current index for selection of pool connection\n  this.currentConnectionIndex = 0;\n  // The pool state\n  this._poolState = 'disconnected';\n  // timeout control\n  this._timeout = false;\n  // Time to wait between connections for the pool\n  this._timeToWait = 10;\n}\n\ninherits(ConnectionPool, EventEmitter);\n\nConnectionPool.prototype.setMaxBsonSize = function(maxBsonSize) {\n  if(maxBsonSize == null){\n    maxBsonSize = Connection.DEFAULT_MAX_BSON_SIZE;\n  }\n\n  for(var i = 0; i < this.openConnections.length; i++) {\n    this.openConnections[i].maxBsonSize = maxBsonSize;\n    this.openConnections[i].maxBsonSettings.maxBsonSize = maxBsonSize;\n  }\n}\n\nConnectionPool.prototype.setMaxMessageSizeBytes = function(maxMessageSizeBytes) {\n  if(maxMessageSizeBytes == null){\n    maxMessageSizeBytes = Connection.DEFAULT_MAX_MESSAGE_SIZE;\n  }\n\n  for(var i = 0; i < this.openConnections.length; i++) {\n    this.openConnections[i].maxMessageSizeBytes = maxMessageSizeBytes;\n    this.openConnections[i].maxBsonSettings.maxMessageSizeBytes = maxMessageSizeBytes;\n  }\n}\n\nConnectionPool.prototype.setMaxWriteBatchSize = function(maxWriteBatchSize) {\n  if(maxWriteBatchSize == null){\n    maxWriteBatchSize = Connection.DEFAULT_MAX_WRITE_BATCH_SIZE;\n  }\n\n  for(var i = 0; i < this.openConnections.length; i++) {\n    this.openConnections[i].maxWriteBatchSize = maxWriteBatchSize;\n  }  \n}\n\n// Start a function\nvar _connect = function(_self) {\n  // return new function() {\n    // Create a new connection instance\n    var connection = new Connection(_self.connectionId++, _self.socketOptions);\n    // Set logger on pool\n    connection.logger = _self.logger;\n    // Connect handler\n    connection.on(\"connect\", function(err, connection) {\n      // Add connection to list of open connections\n      _self.openConnections.push(connection);\n      // If the number of open connections is equal to the poolSize signal ready pool\n      if(_self.openConnections.length === _self.poolSize && _self._poolState !== 'disconnected') {\n        // Set connected\n        _self._poolState = 'connected';\n        // Emit pool ready\n        _self.emit(\"poolReady\");\n      } else if(_self.openConnections.length < _self.poolSize) {\n        // Wait a little bit of time to let the close event happen if the server closes the connection\n        // so we don't leave hanging connections around\n        if(typeof _self._timeToWait == 'number') {\n          setTimeout(function() {\n            // If we are still connecting (no close events fired in between start another connection)\n            if(_self._poolState == 'connecting') {\n              _connect(_self);\n            }\n          }, _self._timeToWait);\n        } else {\n          processor(function() {\n            // If we are still connecting (no close events fired in between start another connection)\n            if(_self._poolState == 'connecting') {\n              _connect(_self);\n            }\n          });\n        }\n      }\n    });\n\n    var numberOfErrors = 0\n\n    // Error handler\n    connection.on(\"error\", function(err, connection, error_options) {\n      numberOfErrors++;\n      // If we are already disconnected ignore the event\n      if(_self._poolState != 'disconnected' && _self.listeners(\"error\").length > 0) {\n        _self.emit(\"error\", err, connection, error_options);\n      }\n\n      // Close the connection\n      connection.close();\n      // Set pool as disconnected\n      _self._poolState = 'disconnected';\n      // Stop the pool\n      _self.stop();\n    });\n\n    // Close handler\n    connection.on(\"close\", function() {\n      // If we are already disconnected ignore the event\n      if(_self._poolState !== 'disconnected' && _self.listeners(\"close\").length > 0) {\n        _self.emit(\"close\");\n      }\n\n      // Set disconnected\n      _self._poolState = 'disconnected';\n      // Stop\n      _self.stop();\n    });\n\n    // Timeout handler\n    connection.on(\"timeout\", function(err, connection) {\n      // If we are already disconnected ignore the event\n      if(_self._poolState !== 'disconnected' && _self.listeners(\"timeout\").length > 0) {\n        _self.emit(\"timeout\", err);\n      }\n\n      // Close the connection\n      connection.close();\n      // Set disconnected\n      _self._poolState = 'disconnected';\n      _self.stop();\n    });\n\n    // Parse error, needs a complete shutdown of the pool\n    connection.on(\"parseError\", function() {\n      // If we are already disconnected ignore the event\n      if(_self._poolState !== 'disconnected' && _self.listeners(\"parseError\").length > 0) {\n        _self.emit(\"parseError\", new Error(\"parseError occured\"));\n      }\n\n      // Set disconnected\n      _self._poolState = 'disconnected';\n      _self.stop();\n    });\n\n    connection.on(\"message\", function(message) {\n      _self.emit(\"message\", message);\n    });\n\n    // Start connection in the next tick\n    connection.start();\n  // }();\n}\n\n\n// Start method, will throw error if no listeners are available\n// Pass in an instance of the listener that contains the api for\n// finding callbacks for a given message etc.\nConnectionPool.prototype.start = function() {\n  var markerDate = new Date().getTime();\n  var self = this;\n\n  if(this.listeners(\"poolReady\").length == 0) {\n    throw \"pool must have at least one listener ready that responds to the [poolReady] event\";\n  }\n\n  // Set pool state to connecting\n  this._poolState = 'connecting';\n  this._timeout = false;\n\n  _connect(self);\n}\n\n// Restart a connection pool (on a close the pool might be in a wrong state)\nConnectionPool.prototype.restart = function() {\n  // Close all connections\n  this.stop(false);\n  // Now restart the pool\n  this.start();\n}\n\n// Stop the connections in the pool\nConnectionPool.prototype.stop = function(removeListeners) {\n  removeListeners = removeListeners == null ? true : removeListeners;\n  // Set disconnected\n  this._poolState = 'disconnected';\n\n  // Clear all listeners if specified\n  if(removeListeners) {\n    this.removeAllEventListeners();\n  }\n\n  // Close all connections\n  for(var i = 0; i < this.openConnections.length; i++) {\n    this.openConnections[i].close();\n  }\n\n  // Clean up\n  this.openConnections = [];\n}\n\n// Check the status of the connection\nConnectionPool.prototype.isConnected = function() {\n  // return this._poolState === 'connected';\n  return this.openConnections.length > 0 && this.openConnections[0].isConnected();\n}\n\n// Checkout a connection from the pool for usage, or grab a specific pool instance\nConnectionPool.prototype.checkoutConnection = function(id) {\n  var index = (this.currentConnectionIndex++ % (this.openConnections.length));\n  var connection = this.openConnections[index];\n  return connection;\n}\n\nConnectionPool.prototype.getAllConnections = function() {\n  return this.openConnections;\n}\n\n// Remove all non-needed event listeners\nConnectionPool.prototype.removeAllEventListeners = function() {\n  this.removeAllListeners(\"close\");\n  this.removeAllListeners(\"error\");\n  this.removeAllListeners(\"timeout\");\n  this.removeAllListeners(\"connect\");\n  this.removeAllListeners(\"end\");\n  this.removeAllListeners(\"parseError\");\n  this.removeAllListeners(\"message\");\n  this.removeAllListeners(\"poolReady\");\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]}