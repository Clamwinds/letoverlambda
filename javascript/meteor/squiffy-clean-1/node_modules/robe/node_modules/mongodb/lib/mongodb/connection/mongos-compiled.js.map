{"version":3,"sources":["mongos.js"],"names":[],"mappings":"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","file":"mongos-compiled.js","sourcesContent":["var ReadPreference = require('./read_preference').ReadPreference\n  , Base = require('./base').Base\n  , ServerCapabilities = require('./server_capabilities').ServerCapabilities\n  , Server = require('./server').Server\n  , format = require('util').format\n  , timers = require('timers')\n  , utils = require('../utils')\n  , inherits = require('util').inherits;\n\n// Set processor, setImmediate if 0.10 otherwise nextTick\nvar processor = require('../utils').processor();\n\n/**\n * Mongos constructor provides a connection to a mongos proxy including failover to additional servers\n *\n * Options\n *  - **socketOptions** {Object, default:null}, an object containing socket options to use (noDelay:(boolean), keepAlive:(number), connectTimeoutMS:(number), socketTimeoutMS:(number))\n *  - **ha** {Boolean, default:true}, turn on high availability, attempts to reconnect to down proxies\n *  - **haInterval** {Number, default:2000}, time between each replicaset status check.\n *\n * @class Represents a Mongos connection with failover to backup proxies\n * @param {Array} list of mongos server objects\n * @param {Object} [options] additional options for the mongos connection\n */\nvar Mongos = function Mongos(servers, options) {\n  // Set up basic\n  if(!(this instanceof Mongos))\n    return new Mongos(servers, options);\n\n  // Set up event emitter\n  Base.call(this);\n\n  // Throw error on wrong setup\n  if(servers == null || !Array.isArray(servers) || servers.length == 0)\n    throw new Error(\"At least one mongos proxy must be in the array\");\n\n  // Ensure we have at least an empty options object\n  this.options = options == null ? {} : options;\n  // Set default connection pool options\n  this.socketOptions = this.options.socketOptions != null ? this.options.socketOptions : {};\n  // Enabled ha\n  this.haEnabled = this.options['ha'] == null ? true : this.options['ha'];\n  this._haInProgress = false;\n  // How often are we checking for new servers in the replicaset\n  this.mongosStatusCheckInterval = this.options['haInterval'] == null ? 1000 : this.options['haInterval'];\n  // Save all the server connections\n  this.servers = servers;\n  // Servers we need to attempt reconnect with\n  this.downServers = {};\n  // Servers that are up\n  this.upServers = {};\n  // Up servers by ping time\n  this.upServersByUpTime = {};\n  // Set poolsize or default\n  this.poolSize = this.options.poolSize || 5;\n  // Emit open setup\n  this.emitOpen = this.options.emitOpen || true;\n  // Just contains the current lowest ping time and server\n  this.lowestPingTimeServer = null;\n  this.lowestPingTime = 0;\n  // Connection timeout\n  this._connectTimeoutMS = this.socketOptions.connectTimeoutMS\n    ? this.socketOptions.connectTimeoutMS\n    : 1000;\n\n  // Add options to servers\n  for(var i = 0; i < this.servers.length; i++) {\n    var server = this.servers[i];\n    server._callBackStore = this._callBackStore;\n    server.auto_reconnect = false;\n    \n    // Override pool size\n    if(typeof this.poolSize == 'number') {\n      server.poolSize = this.poolSize\n    }\n    \n    // Default empty socket options object\n    var socketOptions = {host: server.host, port: server.port};\n    // If a socket option object exists clone it\n    if(this.socketOptions != null) {\n      var keys = Object.keys(this.socketOptions);\n      for(var k = 0; k < keys.length;k++) socketOptions[keys[i]] = this.socketOptions[keys[i]];\n    }\n\n    // Set socket options\n    server.socketOptions = socketOptions;\n  }\n\n  // Allow setting the socketTimeoutMS on all connections\n  // to work around issues such as secondaries blocking due to compaction\n  utils.setSocketTimeoutProperty(this, this.socketOptions);  \n}\n\n/**\n * @ignore\n */\ninherits(Mongos, Base);\n\n/**\n * @ignore\n */\nMongos.prototype.isMongos = function() {\n  return true;\n}\n\n/**\n * @ignore\n */\nMongos.prototype.connect = function(db, options, callback) {\n  if('function' === typeof options) callback = options, options = {};\n  if(options == null) options = {};\n  if(!('function' === typeof callback)) callback = null;\n  var self = this;\n\n  // Keep reference to parent\n  this.db = db;\n  // Set server state to connecting\n  this._serverState = 'connecting';\n  // Number of total servers that need to initialized (known servers)\n  this._numberOfServersLeftToInitialize = this.servers.length;  \n  // Connect handler\n  var connectHandler = function(_server) {\n    return function(err, result) {\n      self._numberOfServersLeftToInitialize = self._numberOfServersLeftToInitialize - 1;\n\n      // Add server capabilities\n      if(_server.isMasterDoc) {\n        // Set server capabilities\n        _server.serverCapabilities = new ServerCapabilities(_server.isMasterDoc);\n\n        // Set server capabilities on all the connections\n        var connections = _server.allRawConnections();\n        for(var i = 0; i < connections.length; i++) {\n          connections[i].serverCapabilities = _server.serverCapabilities;\n        }                \n      }\n\n      // Add the server to the list of servers that are up\n      if(!err) {\n        self.upServers[format(\"%s:%s\", _server.host, _server.port)] = _server;\n      }\n\n      // We are done connecting\n      if(self._numberOfServersLeftToInitialize == 0) {\n        // If we have no valid mongos server instances error out\n        if(Object.keys(self.upServers).length == 0) {\n          // return self.emit(\"connectionError\", new Error(\"No valid mongos instances found\"));\n          return callback(new Error(\"No valid mongos instances found\"), null);\n        }\n\n        // Start ha function if it exists\n        if(self.haEnabled) {\n          // Setup the ha process\n          if(self._replicasetTimeoutId != null) clearInterval(self._replicasetTimeoutId);\n          self._replicasetTimeoutId = setInterval(self.mongosCheckFunction, self.mongosStatusCheckInterval);\n        }\n\n        // Set the mongos to connected\n        self._serverState = \"connected\";\n\n        // Emit the open event\n        if(self.emitOpen)\n          self._emitAcrossAllDbInstances(self, null, \"open\", null, null, null);        \n\n        self._emitAcrossAllDbInstances(self, null, \"fullsetup\", null, null, null);      \n        // Callback\n        callback(null, self.db);\n      }\n    }\n  };\n\n  // Error handler\n  var errorOrCloseHandler = function(_server) {\n    return function(err, result) {\n      // Emit left event, signaling mongos left the ha\n      self.emit('left', 'mongos', _server);\n      // Execute all the callbacks with errors\n      self.__executeAllCallbacksWithError(err);\n      // Check if we have the server\n      var found = false;\n      \n      // Get the server name\n      var server_name = format(\"%s:%s\", _server.host, _server.port);\n      // Add the downed server\n      self.downServers[server_name] = _server;\n      // Remove the current server from the list\n      delete self.upServers[server_name]; \n\n      // Emit close across all the attached db instances\n      if(Object.keys(self.upServers).length == 0) {\n        self._emitAcrossAllDbInstances(self, null, \"close\", new Error(\"mongos disconnected, no valid proxies contactable over tcp\"), null, null);\n      }\n    }\n  }\n\n  // Mongo function\n  this.mongosCheckFunction = function() {\n    // Set as not waiting for check event \n    self._haInProgress = true;\n    \n    // Servers down\n    var numberOfServersLeft = Object.keys(self.downServers).length;\n    \n    // Check downed servers\n    if(numberOfServersLeft > 0) {\n      for(var name in self.downServers) {\n        // Pop a downed server      \n        var downServer = self.downServers[name];\n        // Set up the connection options for a Mongos\n        var options = {\n          auto_reconnect: false,\n          returnIsMasterResults: true,\n          slaveOk: true,\n          poolSize: self.poolSize,\n          socketOptions: { \n            connectTimeoutMS: self._connectTimeoutMS,\n            socketTimeoutMS: self._socketTimeoutMS\n          }          \n        }\n\n        // Create a new server object\n        var newServer = new Server(downServer.host, downServer.port, options);\n        // Setup the connection function\n        var connectFunction = function(_db, _server, _options, _callback)  {\n          return function() {\n            // Attempt to connect\n            _server.connect(_db, _options, function(err, result) {\n              numberOfServersLeft = numberOfServersLeft - 1;\n\n              // Add server capabilities\n              if(_server.isMasterDoc) {\n                // Set server capabilities\n                _server.serverCapabilities = new ServerCapabilities(_server.isMasterDoc);\n\n                // Set server capabilities on all the connections\n                var connections = _server.allRawConnections();\n                for(var i = 0; i < connections.length; i++) {\n                  connections[i].serverCapabilities = _server.serverCapabilities;\n                }                \n              }\n\n              if(err) {\n                return _callback(err, _server);\n              } else {                \n                // Set the new server settings\n                _server._callBackStore = self._callBackStore;\n\n                // Add server event handlers\n                _server.on(\"close\", errorOrCloseHandler(_server));\n                _server.on(\"timeout\", errorOrCloseHandler(_server));\n                _server.on(\"error\", errorOrCloseHandler(_server));\n                \n                // Get a read connection\n                var _connection = _server.checkoutReader();\n                // Get the start time\n                var startTime = new Date().getTime();\n                \n                // Execute ping command to mark each server with the expected times\n                self.db.command({ping:1}\n                  , {failFast:true, connection:_connection}, function(err, result) {\n                  // Get the start time\n                  var endTime = new Date().getTime();\n                  // Mark the server with the ping time\n                  _server.runtimeStats['pingMs'] = endTime - startTime;\n\n                  // If we have any buffered commands let's signal reconnect event\n                  if(self._commandsStore.count() > 0) {\n                    self.emit('reconnect');\n                  }\n\n                  // Execute any waiting reads\n                  self._commandsStore.execute_writes();   \n                  self._commandsStore.execute_queries();   \n                  // Callback\n                  return _callback(null, _server);\n                });\n              }\n            });\n          }\n        } \n\n        // Attempt to connect to the database\n        connectFunction(self.db, newServer, options, function(err, _server) {\n          // If we have an error\n          if(err) {\n            self.downServers[format(\"%s:%s\", _server.host, _server.port)] = _server;\n          }\n\n          // Connection function\n          var connectionFunction = function(_auth, _connection, _callback) {\n            var pending = _auth.length();\n\n            for(var j = 0; j < pending; j++) {\n              // Get the auth object\n              var _auth = _auth.get(j);\n              // Unpack the parameter\n              var username = _auth.username;\n              var password = _auth.password;\n              var options = { \n                  authMechanism: _auth.authMechanism\n                , authSource: _auth.authdb\n                , connection: _connection \n              };\n\n              // If we have changed the service name\n              if(_auth.gssapiServiceName) \n                options.gssapiServiceName = _auth.gssapiServiceName;\n\n              // Hold any error\n              var _error = null;\n              // Authenticate against the credentials\n              self.db.authenticate(username, password, options, function(err, result) {\n                _error = err != null ? err : _error;\n                // Adjust the pending authentication\n                pending = pending - 1;\n                // Finished up\n                if(pending == 0) _callback(_error ? _error : null, _error ? false : true);\n              });\n            }\n          }\n\n          // Run auths against the connections\n          if(self.auth.length() > 0) {\n            var connections = _server.allRawConnections();\n            var pendingAuthConn = connections.length;\n\n            // No connections we are done\n            if(connections.length == 0) {\n              // Set ha done\n              if(numberOfServersLeft == 0) {\n                self._haInProgress = false;\n              }              \n            }\n\n            // Final error object\n            var finalError = null;\n            // Go over all the connections\n            for(var j = 0; j < connections.length; j++) {\n              \n              // Execute against all the connections\n              connectionFunction(self.auth, connections[j], function(err, result) {\n                // Pending authentication\n                pendingAuthConn = pendingAuthConn - 1 ;\n\n                // Save error if any\n                finalError = err ? err : finalError;\n\n                // If we are done let's finish up\n                if(pendingAuthConn == 0) {\n                  // Set ha done\n                  if(numberOfServersLeft == 0) {\n                    self._haInProgress = false;\n                  }\n\n                  if(!err) {\n                    add_server(self, _server);\n                  }\n\n                  // If we have any buffered commands let's signal reconnect event\n                  if(self._commandsStore.count() > 0) {\n                    self.emit('reconnect');\n                  }\n\n                  // Execute any waiting reads\n                  self._commandsStore.execute_writes();   \n                  self._commandsStore.execute_queries();                  \n                }\n              });\n            }\n          } else {\n            if(!err) {\n              add_server(self, _server);\n            }\n\n            // Set ha done\n            if(numberOfServersLeft == 0) {\n              self._haInProgress = false;\n\n              // If we have any buffered commands let's signal reconnect event\n              if(self._commandsStore.count() > 0) {\n                self.emit('reconnect');\n              }\n\n              // Execute any waiting reads\n              self._commandsStore.execute_writes();   \n              self._commandsStore.execute_queries();   \n            }\n          }\n        })();\n      }\n    } else {\n      self._haInProgress = false;\n    }\n  }\n\n  // Connect all the server instances\n  for(var i = 0; i < this.servers.length; i++) {\n    // Get the connection\n    var server = this.servers[i];\n    server.mongosInstance = this;\n    // Add server event handlers\n    server.on(\"close\", errorOrCloseHandler(server));\n    server.on(\"timeout\", errorOrCloseHandler(server));\n    server.on(\"error\", errorOrCloseHandler(server));\n    \n    // Configuration\n    var options = {\n      slaveOk: true,\n      poolSize: this.poolSize || server.poolSize,\n      socketOptions: { connectTimeoutMS: self._connectTimeoutMS },\n      returnIsMasterResults: true\n    }        \n\n    // Connect the instance\n    server.connect(self.db, options, connectHandler(server));\n  }\n}\n\n/**\n * @ignore\n * Add a server to the list of up servers and sort them by ping time\n */\nvar add_server = function(self, _server) {\n  // Emit a new server joined\n  self.emit('joined', \"mongos\", null, _server);\n  // Get the server url\n  var server_key = format(\"%s:%s\", _server.host, _server.port);\n  // Push to list of valid server\n  self.upServers[server_key] = _server;\n  // Remove the server from the list of downed servers\n  delete self.downServers[server_key];              \n\n  // Sort the keys by ping time\n  var keys = Object.keys(self.upServers);\n  var _upServersSorted = {};\n  var _upServers = []\n  \n  // Get all the servers\n  for(var name in self.upServers) {\n    _upServers.push(self.upServers[name]);\n  }\n\n  // Sort all the server\n  _upServers.sort(function(a, b) {\n    return a.runtimeStats['pingMs'] > b.runtimeStats['pingMs'];\n  });\n\n  // Rebuild the upServer\n  for(var i = 0; i < _upServers.length; i++) {\n    _upServersSorted[format(\"%s:%s\", _upServers[i].host, _upServers[i].port)] = _upServers[i];\n  }\n\n  // Set the up servers\n  self.upServers = _upServersSorted;\n}\n\n/**\n * @ignore\n * Just return the currently picked active connection\n */\nMongos.prototype.allServerInstances = function() {\n  return this.servers;\n}\n\n/**\n * @ignore\n */\nMongos.prototype.setSocketOptions = function(options) {\n  var servers = this.allServerInstances();\n  for(var i = 0; i < servers.length; i++) {\n    servers[i].setSocketOptions(options);\n  }\n}\n\n/**\n * Always ourselves\n * @ignore\n */\nMongos.prototype.setReadPreference = function() {}\n\n/**\n * @ignore\n */\nMongos.prototype.allRawConnections = function() {\n  // Neeed to build a complete list of all raw connections, start with master server\n  var allConnections = [];\n  // Get all connected connections\n  for(var name in this.upServers) {\n    allConnections = allConnections.concat(this.upServers[name].allRawConnections());\n  }\n  // Return all the conections\n  return allConnections;\n}\n\n/**\n * @ignore\n */\nMongos.prototype.isConnected = function() {\n  return Object.keys(this.upServers).length > 0;\n}\n\n/**\n * @ignore\n */\nMongos.prototype.isAutoReconnect = function() {\n  return true;\n}\n\n/**\n * @ignore\n */\nMongos.prototype.canWrite = Mongos.prototype.isConnected;\n\n/**\n * @ignore\n */\nMongos.prototype.canRead = Mongos.prototype.isConnected;\n\n/**\n * @ignore\n */\nMongos.prototype.isDestroyed = function() {\n  return this._serverState == 'destroyed';\n}\n\n/**\n * @ignore\n */\nMongos.prototype.checkoutWriter = function() {\n  // Checkout a writer\n  var keys = Object.keys(this.upServers);\n  if(keys.length == 0) return null;\n  return this.upServers[keys[0]].checkoutWriter();\n}\n\n/**\n * @ignore\n */\nMongos.prototype.checkoutReader = function(read) {\n  // If read is set to null default to primary\n  read = read || 'primary'\n  // If we have a read preference object unpack it\n  if(read != null && typeof read == 'object' && read['_type'] == 'ReadPreference') {\n    // Validate if the object is using a valid mode\n    if(!read.isValid()) throw new Error(\"Illegal readPreference mode specified, \" + JSON.stringify(read));\n  } else if(!ReadPreference.isValid(read)) {\n    throw new Error(\"Illegal readPreference mode specified, \" + JSON.stringify(read));\n  }\n\n  // Checkout a writer\n  var keys = Object.keys(this.upServers);\n  if(keys.length == 0) return null;\n  return this.upServers[keys[0]].checkoutWriter();\n}\n\n/**\n * @ignore\n */\nMongos.prototype.close = function(callback) {\n  var self = this;\n  // Set server status as disconnected\n  this._serverState = 'destroyed';\n  // Number of connections to close\n  var numberOfConnectionsToClose = self.servers.length;\n  // If we have a ha process running kill it\n  if(self._replicasetTimeoutId != null) clearInterval(self._replicasetTimeoutId);\n  self._replicasetTimeoutId = null;\n  \n  // Emit close event\n  processor(function() {\n    self._emitAcrossAllDbInstances(self, null, \"close\", null, null, true)    \n  });\n\n  // Flush out any remaining call handlers\n  self._flushAllCallHandlers(utils.toError(\"Connection Closed By Application\"));\n\n  // No up servers just return\n  if(Object.keys(this.upServers) == 0) {\n    return callback(null);\n  }\n\n  // Close all the up servers\n  for(var name in this.upServers) {\n    this.upServers[name].close(function(err, result) {\n      numberOfConnectionsToClose = numberOfConnectionsToClose - 1;\n\n      // Callback if we have one defined\n      if(numberOfConnectionsToClose == 0 && typeof callback == 'function') {\n        callback(null);\n      }\n    });\n  }\n}\n\n/**\n * @ignore\n * Return the used state\n */\nMongos.prototype._isUsed = function() {\n  return this._used;\n}\n\nexports.Mongos = Mongos;"]}