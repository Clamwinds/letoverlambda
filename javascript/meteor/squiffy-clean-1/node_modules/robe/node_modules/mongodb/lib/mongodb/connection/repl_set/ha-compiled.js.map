{"version":3,"sources":["ha.js"],"names":[],"mappings":"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","file":"ha-compiled.js","sourcesContent":["var DbCommand = require('../../commands/db_command').DbCommand\n  , ServerCapabilities = require('../server_capabilities').ServerCapabilities\n  , format = require('util').format;\n\nvar HighAvailabilityProcess = function(replset, options) {  \n  this.replset = replset;\n  this.options = options;\n  this.server = null;\n  this.state = HighAvailabilityProcess.INIT;\n  this.selectedIndex = 0;\n}\n\nHighAvailabilityProcess.INIT = 'init';\nHighAvailabilityProcess.RUNNING = 'running';\nHighAvailabilityProcess.STOPPED = 'stopped';\n\nHighAvailabilityProcess.prototype.start = function() {  \n  var self = this;\n  if(this.replset._state \n    && Object.keys(this.replset._state.addresses).length == 0) {\n    if(this.server) this.server.close();\n    this.state = HighAvailabilityProcess.STOPPED;\n    return;      \n  }\n\n  if(this.server) this.server.close();\n  // Start the running\n  this._haProcessInProcess = false;\n  this.state = HighAvailabilityProcess.RUNNING;\n  \n  // Get all possible reader servers\n  var candidate_servers = this.replset._state.getAllReadServers();\n  if(candidate_servers.length == 0) {\n    return;\n  }\n\n  // Select a candidate server for the connection\n  var server = candidate_servers[this.selectedIndex % candidate_servers.length];\n  this.selectedIndex = this.selectedIndex + 1;\n  \n  // Unpack connection options\n  var connectTimeoutMS = self.options.connectTimeoutMS || 10000;\n  var socketTimeoutMS = self.options.socketTimeoutMS || 30000;\n\n  // Just ensure we don't have a full cycle dependency\n  var Db = require('../../db').Db\n  var Server = require('../server').Server;\n\n  // Set up a new server instance\n  var newServer = new Server(server.host, server.port, {\n      auto_reconnect: false\n    , returnIsMasterResults: true\n    , poolSize: 1\n    , socketOptions: { \n        connectTimeoutMS: connectTimeoutMS,\n        socketTimeoutMS: socketTimeoutMS,\n        keepAlive: 100\n      }\n    , ssl: self.replset.options.ssl\n    , sslValidate: self.replset.options.sslValidate\n    , sslCA: self.replset.options.sslCA\n    , sslCert: self.replset.options.sslCert\n    , sslKey: self.replset.options.sslKey\n    , sslPass: self.replset.options.sslPass\n  });\n\n  // Create new dummy db for app\n  self.db = new Db('local', newServer, {w:1});\n\n  // Set up the event listeners\n  newServer.once(\"error\", _handle(this, newServer));\n  newServer.once(\"close\", _handle(this, newServer));\n  newServer.once(\"timeout\", _handle(this, newServer));\n  newServer.name = format(\"%s:%s\", server.host, server.port);\n\n  // Let's attempt a connection over here\n  newServer.connect(self.db, function(err, result, _server) {\n    // Emit ha_connect\n    self.replset.emit(\"ha_connect\", err, result, _server);\n\n    if(self.state == HighAvailabilityProcess.STOPPED) {\n      _server.close();\n    }\n\n    // Ensure server capabilities object is on all connections\n    if(_server.isMasterDoc) {\n      // Set server capabilities\n      _server.serverCapabilities = new ServerCapabilities(_server.isMasterDoc);\n\n      // Set server capabilities on all the connections\n      var connections = _server.allRawConnections();\n      for(var i = 0; i < connections.length; i++) {\n        connections[i].serverCapabilities = _server.serverCapabilities;\n      }      \n    }\n\n    if(err) {\n      // Close the server\n      _server.close();\n      // Check if we can even do HA (is there anything running)\n      if(Object.keys(self.replset._state.addresses).length == 0) {\n        return;\n      }\n      \n      // Let's boot the ha timeout settings\n      setTimeout(function() {\n        self.start();\n      }, self.options.haInterval);\n    } else {\n      self.server = _server;\n      // Let's boot the ha timeout settings\n      setTimeout(_timeoutHandle(self), self.options.haInterval);\n    }\n  });\n}\n\nHighAvailabilityProcess.prototype.stop = function() {\n  this.state = HighAvailabilityProcess.STOPPED;\n  if(this.server) this.server.close();\n}\n\nvar _timeoutHandle = function(self) {\n  return function() {\n    if(self.state == HighAvailabilityProcess.STOPPED) {\n      // Stop all server instances\n      for(var name in self.replset._state.addresses) {\n        self.replset._state.addresses[name].close();\n        delete self.replset._state.addresses[name];\n      }\n\n      // Finished pinging\n      return;\n    }\n\n    // If the server is connected\n    if(self.server.isConnected() && !self._haProcessInProcess) {\n      // Start HA process\n      self._haProcessInProcess = true;\n      // Execute is master command\n      self.db._executeQueryCommand(DbCommand.createIsMasterCommand(self.db), \n          {failFast:true, connection: self.server.checkoutReader()}\n        , function(err, res) {\n          // Emit ha event\n          self.replset.emit(\"ha_ismaster\", err, res);\n\n          // If we have an error close\n          if(err) {\n            self.server.close();\n            // Re-run loop\n            return setTimeout(_timeoutHandle(self), self.options.haInterval);\n          }\n\n          // Master document\n          var master = res.documents[0];\n          var hosts = master.hosts || [];\n          var reconnect_servers = [];\n          var state = self.replset._state;\n\n          // We are in recovery mode, let's remove the current server\n          if(!master.ismaster \n            && !master.secondary\n            && state.addresses[master.me]) {\n              self.server.close();\n              state.addresses[master.me].close();\n              delete state.secondaries[master.me];\n              // Re-run loop\n              return setTimeout(_timeoutHandle(self), self.options.haInterval);\n          }\n\n          // We have a new master different front he current one\n          if((master.primary && state.master == null)\n            || (master.primary && state.master.name != master.primary)) {\n\n            // Locate the primary and set it\n            if(state.addresses[master.primary]) {\n              if(state.master) state.master.close();\n              delete state.secondaries[master.primary];\n              state.master = state.addresses[master.primary];\n            }\n\n            // Emit joined event due to primary change\n            self.replset.emit('joined', \"primary\", master, state.master);\n            \n            // Set up the changes\n            if(state.master != null && state.master.isMasterDoc != null) {\n              state.master.isMasterDoc.ismaster = true;\n              state.master.isMasterDoc.secondary = false;                \n            } else if(state.master != null) {\n              state.master.isMasterDoc = master;\n              state.master.isMasterDoc.ismaster = true;\n              state.master.isMasterDoc.secondary = false;                \n            }\n\n            // If we have any buffered commands let's signal reconnect event\n            if(self.replset._commandsStore.count() > 0) {\n              self.replset.emit('reconnect');\n            }\n\n            // Execute any waiting commands (queries or writes)\n            self.replset._commandsStore.execute_queries();\n            self.replset._commandsStore.execute_writes();   \n          }\n\n          // For all the hosts let's check that we have connections\n          for(var i = 0; i < hosts.length; i++) {\n            var host = hosts[i];\n            \n            // Check if we need to reconnect to a server\n            if(state.addresses[host] == null) {\n              reconnect_servers.push(host);\n            } else if(state.addresses[host] && !state.addresses[host].isConnected()) {\n              state.addresses[host].close();\n              delete state.secondaries[host];\n              reconnect_servers.push(host);              \n            }\n          }\n\n          // Let's reconnect to any server needed\n          if(reconnect_servers.length > 0) {\n            _reconnect_servers(self, reconnect_servers);  \n          } else {\n            self._haProcessInProcess = false\n            return setTimeout(_timeoutHandle(self), self.options.haInterval);\n          }\n      });\n    } else if(!self.server.isConnected()) {\n      setTimeout(function() {\n        return self.start();\n      }, self.options.haInterval);\n    } else {\n      setTimeout(_timeoutHandle(self), self.options.haInterval);\n    }\n  }\n}\n\nvar _reconnect_servers = function(self, reconnect_servers) {\n  if(reconnect_servers.length == 0) {\n    self._haProcessInProcess = false    \n    return setTimeout(_timeoutHandle(self), self.options.haInterval);\n  }\n\n  // Unpack connection options\n  var connectTimeoutMS = self.options.connectTimeoutMS || 10000;\n  var socketTimeoutMS = self.options.socketTimeoutMS || 0;\n\n  // Server class\n  var Db = require('../../db').Db\n  var Server = require('../server').Server;\n  // Get the host\n  var host = reconnect_servers.shift();\n  // Split it up\n  var _host = host.split(\":\")[0];\n  var _port = parseInt(host.split(\":\")[1], 10);\n\n  // Set up a new server instance\n  var newServer = new Server(_host, _port, {\n      auto_reconnect: false\n    , returnIsMasterResults: true\n    , poolSize: self.options.poolSize\n    , socketOptions: { \n        connectTimeoutMS: connectTimeoutMS,\n        socketTimeoutMS: socketTimeoutMS\n      }\n    , ssl: self.replset.options.ssl\n    , sslValidate: self.replset.options.sslValidate\n    , sslCA: self.replset.options.sslCA\n    , sslCert: self.replset.options.sslCert\n    , sslKey: self.replset.options.sslKey\n    , sslPass: self.replset.options.sslPass\n  });\n\n  // Create new dummy db for app\n  var db = new Db('local', newServer, {w:1});\n  var state = self.replset._state;\n\n  // Set up the event listeners\n  newServer.once(\"error\", _repl_set_handler(\"error\", self.replset, newServer));\n  newServer.once(\"close\", _repl_set_handler(\"close\", self.replset, newServer));\n  newServer.once(\"timeout\", _repl_set_handler(\"timeout\", self.replset, newServer));\n\n  // Set shared state\n  newServer.name = host;\n  newServer._callBackStore = self.replset._callBackStore;\n  newServer.replicasetInstance = self.replset;\n  newServer.enableRecordQueryStats(self.replset.recordQueryStats);\n\n  // Let's attempt a connection over here\n  newServer.connect(db, function(err, result, _server) {\n    // Emit ha_connect\n    self.replset.emit(\"ha_connect\", err, result, _server);\n\n    if(self.state == HighAvailabilityProcess.STOPPED) {\n      _server.close();\n    }\n\n    // Ensure server capabilities object is on all connections\n    if(_server.isMasterDoc) {\n      // Set server capabilities\n      _server.serverCapabilities = new ServerCapabilities(_server.isMasterDoc);\n\n      // Set server capabilities on all the connections\n      var connections = _server.allRawConnections();\n      for(var i = 0; i < connections.length; i++) {\n        connections[i].serverCapabilities = _server.serverCapabilities;\n      }      \n    }\n\n    // If we connected let's check what kind of server we have\n    if(!err) {\n      _apply_auths(self, db, _server, function(err, result) {\n        if(err) {\n          _server.close();\n          // Process the next server\n          return setTimeout(function() {\n            _reconnect_servers(self, reconnect_servers);  \n          }, self.options.haInterval);                      \n        }\n        \n        var doc = _server.isMasterDoc;    \n        // Fire error on any unknown callbacks for this server\n        self.replset.__executeAllServerSpecificErrorCallbacks(_server.socketOptions.host, _server.socketOptions.port, err);    \n\n        if(doc.ismaster) {\n          // Emit primary added\n          self.replset.emit('joined', \"primary\", doc, _server);\n\n          // If it was a secondary remove it\n          if(state.secondaries[doc.me]) {\n            delete state.secondaries[doc.me];\n          }\n\n          // Override any server in list of addresses\n          state.addresses[doc.me] = _server;\n          // Set server as master\n          state.master = _server;\n\n          // If we have any buffered commands let's signal reconnect event\n          if(self.replset._commandsStore.count() > 0) {\n            self.replset.emit('reconnect');\n          }\n\n          // Execute any waiting writes\n          self.replset._commandsStore.execute_writes();   \n        } else if(doc.secondary) {\n          // Emit secondary added\n          self.replset.emit('joined', \"secondary\", doc, _server);\n          // Add the secondary to the state\n          state.secondaries[doc.me] = _server;\n          // Override any server in list of addresses\n          state.addresses[doc.me] = _server;\n\n          // If we have any buffered commands let's signal reconnect event\n          if(self.replset._commandsStore.count() > 0) {\n            self.replset.emit('reconnect');\n          }\n\n          // Execute any waiting reads\n          self.replset._commandsStore.execute_queries();   \n        } else {\n          _server.close();\n        }\n\n        // Set any tags on the instance server\n        _server.name = doc.me;\n        _server.tags = doc.tags;\n        // Process the next server\n        setTimeout(function() {\n          _reconnect_servers(self, reconnect_servers);  \n        }, self.options.haInterval);            \n      });\n    } else {\n      _server.close();\n      self.replset.__executeAllServerSpecificErrorCallbacks(_server.socketOptions.host, _server.socketOptions.port, err);    \n\n      setTimeout(function() {\n        _reconnect_servers(self, reconnect_servers);  \n      }, self.options.haInterval);            \n    }\n  });\n}\n\nvar _apply_auths = function(self, _db, _server, _callback) {\n  if(self.replset.auth.length() == 0) return _callback(null);\n  // Apply any authentication needed\n  if(self.replset.auth.length() > 0) {\n    var pending = self.replset.auth.length();\n    var connections = _server.allRawConnections();\n    var pendingAuthConn = connections.length;\n    // Connection function\n    var connectionFunction = function(auth, _connection, __callback) {\n      var pending = auth.length();\n\n      for(var j = 0; j < pending; j++) {\n        // Get the auth object\n        var _auth = auth.get(j);\n        // Unpack the parameter\n        var username = _auth.username;\n        var password = _auth.password;\n        var options = { \n            authMechanism: _auth.authMechanism            \n          , authSource: _auth.authdb\n          , connection: _connection \n        };\n\n        // If we have changed the service name\n        if(_auth.gssapiServiceName) \n          options.gssapiServiceName = _auth.gssapiServiceName;\n        \n        // Hold any error\n        var _error = null;\n        \n        // Authenticate against the credentials\n        _db.authenticate(username, password, options, function(err, result) {\n          _error = err != null ? err : _error;\n          // Adjust the pending authentication\n          pending = pending - 1;\n          // Finished up\n          if(pending == 0) __callback(_error ? _error : null, _error ? false : true);\n        });\n      }\n    }\n\n    // Final error object\n    var finalError = null;\n    // Iterate over all the connections\n    for(var i = 0; i < connections.length; i++) {\n      connectionFunction(self.replset.auth, connections[i], function(err, result) {\n        // Pending authentication\n        pendingAuthConn = pendingAuthConn - 1 ;\n\n        // Save error if any\n        finalError = err ? err : finalError;\n\n        // If we are done let's finish up\n        if(pendingAuthConn == 0) {\n          _callback(null);\n        }\n      });\n    }\n  }\n}\n\nvar _handle = function(self, server) {\n  return function(err) {\n    server.close();    \n  }\n}\n\nvar _repl_set_handler = function(event, self, server) {\n  var ReplSet = require('./repl_set').ReplSet;\n\n  return function(err, doc) {\n    server.close();\n\n    // The event happened to a primary\n    // Remove it from play\n    if(self._state.isPrimary(server)) {\n      self._state.master == null;\n      self._serverState = ReplSet.REPLSET_READ_ONLY;\n    } else if(self._state.isSecondary(server)) {\n      delete self._state.secondaries[server.name];\n    }\n\n    // Unpack variables\n    var host = server.socketOptions.host;\n    var port = server.socketOptions.port;\n\n    // Fire error on any unknown callbacks\n    self.__executeAllServerSpecificErrorCallbacks(host, port, err);    \n  }\n}\n\nexports.HighAvailabilityProcess = HighAvailabilityProcess;\n"]}