{"version":3,"sources":["repl_set.js"],"names":[],"mappings":"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","file":"repl_set-compiled.js","sourcesContent":["var ReadPreference = require('../read_preference').ReadPreference\n  , DbCommand = require('../../commands/db_command').DbCommand\n  , inherits = require('util').inherits\n  , format = require('util').format\n  , timers = require('timers')\n  , Server = require('../server').Server\n  , utils = require('../../utils')\n  , PingStrategy = require('./strategies/ping_strategy').PingStrategy\n  , StatisticsStrategy = require('./strategies/statistics_strategy').StatisticsStrategy\n  , Options = require('./options').Options\n  , ServerCapabilities = require('../server_capabilities').ServerCapabilities\n  , ReplSetState = require('./repl_set_state').ReplSetState\n  , HighAvailabilityProcess = require('./ha').HighAvailabilityProcess\n  , Base = require('../base').Base;\n\nvar STATE_STARTING_PHASE_1 = 0;\nvar STATE_PRIMARY = 1;\nvar STATE_SECONDARY = 2;\nvar STATE_RECOVERING = 3;\nvar STATE_FATAL_ERROR = 4;\nvar STATE_STARTING_PHASE_2 = 5;\nvar STATE_UNKNOWN = 6;\nvar STATE_ARBITER = 7;\nvar STATE_DOWN = 8;\nvar STATE_ROLLBACK = 9;\n\n// Set processor, setImmediate if 0.10 otherwise nextTick\nvar processor = require('../../utils').processor();\n\n/**\n * ReplSet constructor provides replicaset functionality\n *\n * Options\n *  - **ha** {Boolean, default:true}, turn on high availability.\n *  - **haInterval** {Number, default:2000}, time between each replicaset status check.\n *  - **reconnectWait** {Number, default:1000}, time to wait in miliseconds before attempting reconnect.\n *  - **retries** {Number, default:30}, number of times to attempt a replicaset reconnect.\n *  - **rs_name** {String}, the name of the replicaset to connect to.\n *  - **socketOptions** {Object, default:null}, an object containing socket options to use (noDelay:(boolean), keepAlive:(number), connectTimeoutMS:(number), socketTimeoutMS:(number))\n *  - **strategy** {String, default:'ping'}, selection strategy for reads choose between (ping, statistical and none, default is ping)\n *  - **secondaryAcceptableLatencyMS** {Number, default:15}, sets the range of servers to pick when using NEAREST (lowest ping ms + the latency fence, ex: range of 1 to (1 + 15) ms)\n *  - **connectWithNoPrimary** {Boolean, default:false}, sets if the driver should connect even if no primary is available\n *  - **connectArbiter** {Boolean, default:false}, sets if the driver should connect to arbiters or not.\n *  - **logger** {Object, default:null}, an object representing a logger that you want to use, needs to support functions debug, log, error **({error:function(message, object) {}, log:function(message, object) {}, debug:function(message, object) {}})**.\n *  - **poolSize** {Number, default:5}, number of connections in the connection pool for each server instance, set to 5 as default for legacy reasons.\n *  - **ssl** {Boolean, default:false}, use ssl connection (needs to have a mongod server with ssl support)\n *  - **sslValidate** {Boolean, default:false}, validate mongod server certificate against ca (needs to have a mongod server with ssl support, 2.4 or higher)\n *  - **sslCA** {Array, default:null}, Array of valid certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher)\n *  - **sslCert** {Buffer/String, default:null}, String or buffer containing the certificate we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)\n *  - **sslKey** {Buffer/String, default:null}, String or buffer containing the certificate private key we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)\n *  - **sslPass** {Buffer/String, default:null}, String or buffer containing the certificate password (needs to have a mongod server with ssl support, 2.4 or higher)\n *\n * @class Represents a \n Replicaset Configuration\n * @param {Array} list of server objects participating in the replicaset.\n * @param {Object} [options] additional options for the replicaset connection.\n */\nvar ReplSet = exports.ReplSet = function(servers, options) {\n  // Set up basic\n  if(!(this instanceof ReplSet))\n    return new ReplSet(servers, options);\n\n  // Set up event emitter\n  Base.call(this);\n\n  // Ensure we have a list of servers\n  if(!Array.isArray(servers)) throw Error(\"The parameter must be an array of servers and contain at least one server\");\n  // Ensure no Mongos's\n  for(var i = 0; i < servers.length; i++) {\n    if(!(servers[i] instanceof Server)) throw new Error(\"list of servers must be of type Server\");\n  }\n\n  // Save the options\n  this.options = new Options(options);\n  // Ensure basic validation of options\n  this.options.init();\n\n  // Server state\n  this._serverState = ReplSet.REPLSET_DISCONNECTED;\n  // Add high availability process\n  this._haProcess = new HighAvailabilityProcess(this, this.options);\n\n  // Let's iterate over all the provided server objects and decorate them\n  this.servers = this.options.decorateAndClean(servers, this._callBackStore);\n  // Throw error if no seed servers\n  if(this.servers.length == 0) throw new Error(\"No valid seed servers in the array\");\n\n  // Let's set up our strategy object for picking secondaries\n  if(this.options.strategy == 'ping') {\n    // Create a new instance\n    this.strategyInstance = new PingStrategy(this, this.options.secondaryAcceptableLatencyMS);\n  } else if(this.options.strategy == 'statistical') {\n    // Set strategy as statistical\n    this.strategyInstance = new StatisticsStrategy(this);\n    // Add enable query information\n    this.enableRecordQueryStats(true);\n  }\n\n  this.emitOpen = this.options.emitOpen || true;\n  // Set up a clean state\n  this._state = new ReplSetState(this);\n  // Current round robin selected server\n  this._currentServerChoice = 0;\n  // Ensure up the server callbacks\n  for(var i = 0; i < this.servers.length; i++) {\n    this.servers[i]._callBackStore = this._callBackStore;\n    this.servers[i].name = format(\"%s:%s\", this.servers[i].host, this.servers[i].port)\n    this.servers[i].replicasetInstance = this;\n    this.servers[i].options.auto_reconnect = false;\n    this.servers[i].poolSize = this.options.poolSize;\n    this.servers[i].inheritReplSetOptionsFrom(this);\n  }\n\n  // Allow setting the socketTimeoutMS on all connections\n  // to work around issues such as secondaries blocking due to compaction\n  utils.setSocketTimeoutProperty(this, this.options.socketOptions);\n}\n\n/**\n * @ignore\n */\ninherits(ReplSet, Base);\n\n// Replicaset states\nReplSet.REPLSET_CONNECTING = 'connecting';\nReplSet.REPLSET_DISCONNECTED = 'disconnected';\nReplSet.REPLSET_CONNECTED = 'connected';\nReplSet.REPLSET_RECONNECTING = 'reconnecting';\nReplSet.REPLSET_DESTROYED = 'destroyed';\nReplSet.REPLSET_READ_ONLY = 'readonly';\n\nReplSet.prototype.isAutoReconnect = function() {\n  return true;\n}\n\nReplSet.prototype.canWrite = function() {\n  return this._state.master && this._state.master.isConnected();\n}\n\nReplSet.prototype.canRead = function(read) {\n  if((read == ReadPreference.PRIMARY \n      || (typeof read == 'object' && read.mode == ReadPreference.PRIMARY)\n      || read == null || read == false) && (this._state.master == null || !this._state.master.isConnected())) return false;\n  return Object.keys(this._state.secondaries).length > 0;\n}\n\n/**\n * @ignore\n */\nReplSet.prototype.enableRecordQueryStats = function(enable) {\n  // Set the global enable record query stats\n  this.recordQueryStats = enable;\n\n  // Enable all the servers\n  for(var i = 0; i < this.servers.length; i++) {\n    this.servers[i].enableRecordQueryStats(enable);\n  }\n}\n\n/**\n * @ignore\n */\nReplSet.prototype.setSocketOptions = function(options) {\n  var servers = this.allServerInstances();\n  \n  if(typeof options.socketTimeoutMS == 'number') {\n    this.options.socketOptions.socketTimeoutMS = options.socketTimeoutMS;\n  }\n\n  if(typeof options.connectTimeoutMS == 'number')\n    this.options.socketOptions.connectTimeoutMS = options.connectTimeoutMS;\n\n  for(var i = 0; i < servers.length; i++) {\n    servers[i].setSocketOptions(options);\n  }\n}\n\n/**\n * @ignore\n */\nReplSet.prototype.setReadPreference = function(preference) {\n  this.options.readPreference = preference;\n}\n\nReplSet.prototype.connect = function(parent, options, callback) {\n  if(this._serverState != ReplSet.REPLSET_DISCONNECTED) \n    return callback(new Error(\"in process of connection\"));\n\n  // If no callback throw\n  if(!(typeof callback == 'function')) \n    throw new Error(\"cannot call ReplSet.prototype.connect with no callback function\");\n\n  var self = this;\n  // Save db reference\n  this.options.db = parent;\n  // Set replicaset as connecting\n  this._serverState = ReplSet.REPLSET_CONNECTING\n  // Copy all the servers to our list of seeds\n  var candidateServers = this.servers.slice(0);\n  // Pop the first server\n  var server = candidateServers.pop();\n  server.name = format(\"%s:%s\", server.host, server.port);\n  // Set up the options\n  var opts = {\n    returnIsMasterResults: true,\n    eventReceiver: server\n  }\n\n  // Register some event listeners\n  this.once(\"fullsetup\", function(err, db, replset) {\n    // Set state to connected\n    self._serverState = ReplSet.REPLSET_CONNECTED;\n    // Stop any process running\n    if(self._haProcess) self._haProcess.stop();\n    // Start the HA process\n    self._haProcess.start();\n\n    // Emit fullsetup\n    processor(function() {\n      if(self.emitOpen)\n        self._emitAcrossAllDbInstances(self, null, \"open\", null, null, null);        \n\n      self._emitAcrossAllDbInstances(self, null, \"fullsetup\", null, null, null);        \n    });\n\n    // If we have a strategy defined start it\n    if(self.strategyInstance) {\n      self.strategyInstance.start();\n    }\n\n    // Finishing up the call\n    callback(err, db, replset);\n  });\n\n  // Errors\n  this.once(\"connectionError\", function(err, result) {\n    callback(err, result);\n  });\n\n  // Attempt to connect to the server\n  server.connect(this.options.db, opts, _connectHandler(this, candidateServers, server));\n}\n\nReplSet.prototype.close = function(callback) {  \n  var self = this;\n  // Set as destroyed\n  this._serverState = ReplSet.REPLSET_DESTROYED;\n  // Stop the ha\n  this._haProcess.stop();\n  \n  // If we have a strategy stop it\n  if(this.strategyInstance) {\n    this.strategyInstance.stop();\n  }\n\n  // Kill all servers available\n  for(var name in this._state.addresses) {\n    this._state.addresses[name].close();\n  }\n\n  // Clean out the state\n  this._state = new ReplSetState(this); \n  \n  // Emit close event\n  processor(function() {\n    self._emitAcrossAllDbInstances(self, null, \"close\", null, null, true)    \n  });\n\n  // Flush out any remaining call handlers\n  self._flushAllCallHandlers(utils.toError(\"Connection Closed By Application\"));\n\n  // Callback\n  if(typeof callback == 'function') \n    return callback(null, null);\n}\n\n/**\n * Creates a new server for the `replset` based on `host`.\n *\n * @param {String} host - host:port pair (localhost:27017)\n * @param {ReplSet} replset - the ReplSet instance\n * @return {Server}\n * @ignore\n */\nvar createServer = function(self, host, options) {\n  // copy existing socket options to new server\n  var socketOptions = {}\n  if(options.socketOptions) {\n    var keys = Object.keys(options.socketOptions);\n    for(var k = 0; k < keys.length; k++) {\n      socketOptions[keys[k]] = options.socketOptions[keys[k]];\n    }\n  }\n\n  var parts = host.split(/:/);\n  if(1 === parts.length) {\n    parts[1] = Connection.DEFAULT_PORT;\n  }\n\n  socketOptions.host = parts[0];\n  socketOptions.port = parseInt(parts[1], 10);\n\n  var serverOptions = {\n    readPreference: options.readPreference,\n    socketOptions: socketOptions,\n    poolSize: options.poolSize,\n    logger: options.logger,\n    auto_reconnect: false,\n    ssl: options.ssl,\n    sslValidate: options.sslValidate,\n    sslCA: options.sslCA,\n    sslCert: options.sslCert,\n    sslKey: options.sslKey,\n    sslPass: options.sslPass\n  }\n\n  var server = new Server(socketOptions.host, socketOptions.port, serverOptions);\n  // Set up shared state\n  server._callBackStore = self._callBackStore;\n  server.replicasetInstance = self;\n  server.enableRecordQueryStats(self.recordQueryStats);\n  // Set up event handlers\n  server.on(\"close\", _handler(\"close\", self, server));\n  server.on(\"error\", _handler(\"error\", self, server));\n  server.on(\"timeout\", _handler(\"timeout\", self, server));\n  return server;\n}\n\nvar _handler = function(event, self, server) {\n  return function(err, doc) {\n    // The event happened to a primary\n    // Remove it from play\n    if(self._state.isPrimary(server)) {    \n      // Emit that the primary left the replicaset\n      self.emit('left', 'primary', server);\n      // Get the current master\n      var current_master = self._state.master;\n      self._state.master = null;\n      self._serverState = ReplSet.REPLSET_READ_ONLY;\n    \n      if(current_master != null) {\n        // Unpack variables\n        var host = current_master.socketOptions.host;\n        var port = current_master.socketOptions.port;\n\n        // Fire error on any unknown callbacks\n        self.__executeAllServerSpecificErrorCallbacks(host, port, err);        \n      }\n    } else if(self._state.isSecondary(server)) {\n      // Emit that a secondary left the replicaset\n      self.emit('left', 'secondary', server);\n      // Delete from the list\n      delete self._state.secondaries[server.name];\n    }\n\n    // If there is no more connections left and the setting is not destroyed\n    // set to disconnected\n    if(Object.keys(self._state.addresses).length == 0 \n      && self._serverState != ReplSet.REPLSET_DESTROYED) {\n        self._serverState = ReplSet.REPLSET_DISCONNECTED;\n\n        // Emit close across all the attached db instances\n        self._dbStore.emit(\"close\", new Error(\"replicaset disconnected, no valid servers contactable over tcp\"), null, true);\n    }\n\n    // Unpack variables\n    var host = server.socketOptions.host;\n    var port = server.socketOptions.port;\n\n    // Fire error on any unknown callbacks\n    self.__executeAllServerSpecificErrorCallbacks(host, port, err);\n  }\n}\n\nvar locateNewServers = function(self, state, candidateServers, ismaster) {\n  // Retrieve the hosts\n  var hosts = [];\n  if(Array.isArray(ismaster.hosts)) {\n    hosts = hosts.concat(ismaster.hosts);\n  }\n  // Include the passives\n  if(Array.isArray(ismaster.passives)) {\n    hosts = hosts.concat(ismaster.passives);\n  }\n\n  // In candidate servers\n  var inCandidateServers = function(name, candidateServers) {\n    for(var i = 0; i < candidateServers.length; i++) {\n      if(candidateServers[i].name == name) return true;\n    }\n\n    return false;\n  }\n\n  // New servers\n  var newServers = [];\n  // Let's go over all the hosts\n  for(var i = 0; i < hosts.length; i++) {\n    if(!state.contains(hosts[i]) \n      && !inCandidateServers(hosts[i], candidateServers)) {\n        newServers.push(createServer(self, hosts[i], self.options));\n    }\n  }\n\n  // Return list of possible new servers\n  return newServers;\n}\n\nvar _connectHandler = function(self, candidateServers, instanceServer) {\n  return function(err, doc) {\n    // If we have an error add to the list\n    if(err) {\n      self._state.errors[instanceServer.name] = instanceServer;\n    } else {\n      delete self._state.errors[instanceServer.name];\n    }\n\n    if(!err) {      \n      var ismaster = doc.documents[0]\n\n      // Error the server if \n      if(!ismaster.ismaster\n        && !ismaster.secondary) {\n        self._state.errors[instanceServer.name] = instanceServer;\n      }\n\n      // Set server capabilities\n      instanceServer.serverCapabilities = new ServerCapabilities(ismaster);\n\n      // Set server capabilities on all the connections\n      var connections = instanceServer.allRawConnections();\n      for(var i = 0; i < connections.length; i++) {\n        connections[i].serverCapabilities = instanceServer.serverCapabilities;\n      }\n    }\n\n    // No error let's analyse the ismaster command\n    if(!err && self._state.errors[instanceServer.name] == null) {\n      var ismaster = doc.documents[0]\n\n      // If no replicaset name exists set the current one\n      if(self.options.rs_name == null) {\n        self.options.rs_name = ismaster.setName;\n      }\n\n      // If we have a member that is not part of the set let's finish up\n      if(typeof ismaster.setName == 'string' && ismaster.setName != self.options.rs_name) {\n        return self.emit(\"connectionError\", new Error(\"Replicaset name \" + ismaster.setName + \" does not match specified name \" + self.options.rs_name));\n      }\n\n      // Add the error handlers\n      instanceServer.on(\"close\", _handler(\"close\", self, instanceServer));\n      instanceServer.on(\"error\", _handler(\"error\", self, instanceServer));\n      instanceServer.on(\"timeout\", _handler(\"timeout\", self, instanceServer));\n      \n      // Set any tags on the instance server\n      instanceServer.name = ismaster.me;\n      instanceServer.tags = ismaster.tags;\n\n      // Add the server to the list\n      self._state.addServer(instanceServer, ismaster);\n\n      // Check if we have more servers to add (only check when done with initial set)\n      if(candidateServers.length == 0) {\n        // Get additional new servers that are not currently in set\n        var new_servers = locateNewServers(self, self._state, candidateServers, ismaster);\n\n        // Locate any new servers that have not errored out yet\n        for(var i = 0; i < new_servers.length; i++) {\n          if(self._state.errors[new_servers[i].name] == null) {\n            candidateServers.push(new_servers[i])            \n          }\n        }\n      }\n    }\n\n    // If the candidate server list is empty and no valid servers\n    if(candidateServers.length == 0 &&\n      !self._state.hasValidServers()) {\n        return self.emit(\"connectionError\", new Error(\"No valid replicaset instance servers found\"));\n    } else if(candidateServers.length == 0) {      \n      if(!self.options.connectWithNoPrimary && (self._state.master == null || !self._state.master.isConnected())) {\n        return self.emit(\"connectionError\", new Error(\"No primary found in set\"));\n      }\n      return self.emit(\"fullsetup\", null, self.options.db, self);\n    }\n        \n    // Let's connect the next server    \n    var nextServer = candidateServers.pop();\n  \n    // Set up the options\n    var opts = {\n      returnIsMasterResults: true,\n      eventReceiver: nextServer\n    }\n\n    // Attempt to connect to the server\n    nextServer.connect(self.options.db, opts, _connectHandler(self, candidateServers, nextServer));\n  }\n}\n\nReplSet.prototype.isDestroyed = function() {\n  return this._serverState == ReplSet.REPLSET_DESTROYED;\n}\n\nReplSet.prototype.isConnected = function(read) {\n  var isConnected = false;  \n\n  if(read == null || read == ReadPreference.PRIMARY || read == false)\n    isConnected = this._state.master != null && this._state.master.isConnected();\n\n  if((read == ReadPreference.PRIMARY_PREFERRED || read == ReadPreference.SECONDARY_PREFERRED || read == ReadPreference.NEAREST)\n    && ((this._state.master != null && this._state.master.isConnected())\n    || (this._state && this._state.secondaries && Object.keys(this._state.secondaries).length > 0))) {\n      isConnected = true;\n  } else if(read == ReadPreference.SECONDARY) {\n    isConnected = this._state && this._state.secondaries && Object.keys(this._state.secondaries).length > 0;\n  }\n\n  // No valid connection return false\n  return isConnected;\n}\n\nReplSet.prototype.isMongos = function() {\n  return false;\n}\n\nReplSet.prototype.checkoutWriter = function() {\n  if(this._state.master) return this._state.master.checkoutWriter();\n  return new Error(\"no writer connection available\");\n}\n\nReplSet.prototype.processIsMaster = function(_server, _ismaster) {\n  // Server in recovery mode, remove it from available servers\n  if(!_ismaster.ismaster && !_ismaster.secondary) {\n    // Locate the actual server\n    var server = this._state.addresses[_server.name];\n    // Close the server, simulating the closing of the connection\n    // to get right removal semantics\n    if(server) server.close();\n    // Execute any callback errors\n    _handler(null, this, server)(new Error(\"server is in recovery mode\"));\n  }\n}\n\nReplSet.prototype.allRawConnections = function() {\n  var connections = [];\n\n  for(var name in this._state.addresses) {\n    connections = connections.concat(this._state.addresses[name].allRawConnections());\n  }\n\n  return connections;\n}\n\n/**\n * @ignore\n */\nReplSet.prototype.allServerInstances = function() {\n  var self = this;\n  // If no state yet return empty\n  if(!self._state) return [];\n  // Close all the servers (concatenate entire list of servers first for ease)\n  var allServers = self._state.master != null ? [self._state.master] : [];\n\n  // Secondary keys\n  var keys = Object.keys(self._state.secondaries);\n  // Add all secondaries\n  for(var i = 0; i < keys.length; i++) {\n    allServers.push(self._state.secondaries[keys[i]]);\n  }\n\n  // Return complete list of all servers\n  return allServers;\n}\n\n/**\n * @ignore\n */\nReplSet.prototype.checkoutReader = function(readPreference, tags) {\n  var connection = null;\n\n  // If we have a read preference object unpack it\n  if(typeof readPreference == 'object' && readPreference['_type'] == 'ReadPreference') {\n    // Validate if the object is using a valid mode\n    if(!readPreference.isValid()) throw new Error(\"Illegal readPreference mode specified, \" + JSON.stringify(readPreference.mode));\n    // Set the tag\n    tags = readPreference.tags;\n    readPreference = readPreference.mode;\n  } else if(typeof readPreference == 'object' && readPreference['_type'] != 'ReadPreference') {\n    return new Error(\"read preferences must be either a string or an instance of ReadPreference\");\n  }\n\n  // Set up our read Preference, allowing us to override the readPreference\n  var finalReadPreference = readPreference != null ? readPreference : this.options.readPreference;\n\n  // Ensure we unpack a reference\n  if(finalReadPreference != null && typeof finalReadPreference == 'object' && finalReadPreference['_type'] == 'ReadPreference') {\n    // Validate if the object is using a valid mode\n    if(!finalReadPreference.isValid()) throw new Error(\"Illegal readPreference mode specified, \" + JSON.stringify(finalReadPreference.mode));\n    // Set the tag\n    tags = finalReadPreference.tags;\n    readPreference = finalReadPreference.mode;\n  }\n\n  // Finalize the read preference setup\n  finalReadPreference = finalReadPreference == true ? ReadPreference.SECONDARY_PREFERRED : finalReadPreference;\n  finalReadPreference = finalReadPreference == null ? ReadPreference.PRIMARY : finalReadPreference;\n\n  // If we are reading from a primary\n  if(finalReadPreference == 'primary') {\n    // If we provide a tags set send an error\n    if(typeof tags == 'object' && tags != null) {\n      return new Error(\"PRIMARY cannot be combined with tags\");\n    }\n\n    // If we provide a tags set send an error\n    if(this._state.master == null) {\n      return new Error(\"No replica set primary available for query with ReadPreference PRIMARY\");\n    }\n\n    // Checkout a writer\n    return this.checkoutWriter();\n  }\n\n  // If we have specified to read from a secondary server grab a random one and read\n  // from it, otherwise just pass the primary connection\n  if((this.options.readSecondary || finalReadPreference == ReadPreference.SECONDARY_PREFERRED || finalReadPreference == ReadPreference.SECONDARY) && Object.keys(this._state.secondaries).length > 0) {\n    // If we have tags, look for servers matching the specific tag\n    if(this.strategyInstance != null) {\n      // Only pick from secondaries\n      var _secondaries = [];\n      for(var key in this._state.secondaries) {\n        _secondaries.push(this._state.secondaries[key]);\n      }\n\n      if(finalReadPreference == ReadPreference.SECONDARY) {\n        // Check out the nearest from only the secondaries\n        connection = this.strategyInstance.checkoutConnection(tags, _secondaries);\n      } else {\n        connection = this.strategyInstance.checkoutConnection(tags, _secondaries);\n        // No candidate servers that match the tags, error\n        if(connection == null || connection instanceof Error) {\n          // No secondary server avilable, attemp to checkout a primary server\n          connection = this.checkoutWriter();\n          // If no connection return an error\n          if(connection == null || connection instanceof Error) {\n            return new Error(\"No replica set members available for query\");\n          }\n        }\n      }\n    } else if(tags != null && typeof tags == 'object') {\n      // Get connection\n      connection = _pickFromTags(this, tags);// = function(self, readPreference, tags) {\n      // No candidate servers that match the tags, error\n      if(connection == null) {\n        return new Error(\"No replica set members available for query\");\n      }\n    } else {\n      connection = _roundRobin(this, tags);\n    }\n  } else if(finalReadPreference == ReadPreference.PRIMARY_PREFERRED) {\n    // Check if there is a primary available and return that if possible\n    connection = this.checkoutWriter();\n    // If no connection available checkout a secondary\n    if(connection == null || connection instanceof Error) {\n      // If we have tags, look for servers matching the specific tag\n      if(tags != null && typeof tags == 'object') {\n        // Get connection\n        connection = _pickFromTags(this, tags);// = function(self, readPreference, tags) {\n        // No candidate servers that match the tags, error\n        if(connection == null) {\n          return new Error(\"No replica set members available for query\");\n        }\n      } else {\n        connection = _roundRobin(this, tags);\n      }\n    }\n  } else if(finalReadPreference == ReadPreference.SECONDARY_PREFERRED) {\n    // If we have tags, look for servers matching the specific tag\n    if(this.strategyInstance != null) {\n      connection = this.strategyInstance.checkoutConnection(tags);\n      \n      // No candidate servers that match the tags, error\n      if(connection == null || connection instanceof Error) {\n        // No secondary server avilable, attemp to checkout a primary server\n        connection = this.checkoutWriter();\n        // If no connection return an error\n        if(connection == null || connection instanceof Error) {\n          var preferenceName = finalReadPreference == ReadPreference.SECONDARY ? 'secondary' : finalReadPreference;\n          return new Error(\"No replica set member available for query with ReadPreference \" + preferenceName + \" and tags \" + JSON.stringify(tags));\n        }\n      }\n    } else if(tags != null && typeof tags == 'object') {\n      // Get connection\n      connection = _pickFromTags(this, tags);// = function(self, readPreference, tags) {\n      // No candidate servers that match the tags, error\n      if(connection == null) {\n        // No secondary server avilable, attemp to checkout a primary server\n        connection = this.checkoutWriter();\n        // If no connection return an error\n        if(connection == null || connection instanceof Error) {\n          var preferenceName = finalReadPreference == ReadPreference.SECONDARY ? 'secondary' : finalReadPreference;\n          return new Error(\"No replica set member available for query with ReadPreference \" + preferenceName + \" and tags \" + JSON.stringify(tags));\n        }\n      }\n    }\n  } else if(finalReadPreference == ReadPreference.NEAREST && this.strategyInstance != null) {\n    connection = this.strategyInstance.checkoutConnection(tags);\n  } else if(finalReadPreference == ReadPreference.NEAREST && this.strategyInstance == null) {\n    return new Error(\"A strategy for calculating nearness must be enabled such as ping or statistical\");\n  } else if(finalReadPreference == ReadPreference.SECONDARY && Object.keys(this._state.secondaries).length == 0) {\n    if(tags != null && typeof tags == 'object') {\n      var preferenceName = finalReadPreference == ReadPreference.SECONDARY ? 'secondary' : finalReadPreference;\n      return new Error(\"No replica set member available for query with ReadPreference \" + preferenceName + \" and tags \" + JSON.stringify(tags));\n    } else {\n      return new Error(\"No replica set secondary available for query with ReadPreference SECONDARY\");\n    }\n  } else {\n    connection = this.checkoutWriter();\n  }\n\n  // Return the connection\n  return connection;\n}\n\n/**\n * @ignore\n */\nvar _pickFromTags = function(self, tags) {\n  // If we have an array or single tag selection\n  var tagObjects = Array.isArray(tags) ? tags : [tags];\n  // Iterate over all tags until we find a candidate server\n  for(var _i = 0; _i < tagObjects.length; _i++) {\n    // Grab a tag object\n    var tagObject = tagObjects[_i];\n    // Matching keys\n    var matchingKeys = Object.keys(tagObject);\n    // Match all the servers that match the provdided tags\n    var keys = Object.keys(self._state.secondaries);\n    var candidateServers = [];\n\n    for(var i = 0; i < keys.length; i++) {\n      var server = self._state.secondaries[keys[i]];\n      // If we have tags match\n      if(server.tags != null) {\n        var matching = true;\n        // Ensure we have all the values\n        for(var j = 0; j < matchingKeys.length; j++) {\n          if(server.tags[matchingKeys[j]] != tagObject[matchingKeys[j]]) {\n            matching = false;\n            break;\n          }\n        }\n\n        // If we have a match add it to the list of matching servers\n        if(matching) {\n          candidateServers.push(server);\n        }\n      }\n    }\n\n    // If we have a candidate server return\n    if(candidateServers.length > 0) {\n      if(self.strategyInstance) return self.strategyInstance.checkoutConnection(tags, candidateServers);\n      // Set instance to return\n      return candidateServers[Math.floor(Math.random() * candidateServers.length)].checkoutReader();\n    }\n  }\n\n  // No connection found\n  return null;\n}\n\n/**\n * Pick a secondary using round robin\n *\n * @ignore\n */\nfunction _roundRobin (replset, tags) {\n  var keys = Object.keys(replset._state.secondaries);\n  // Update index\n  replset._currentServerChoice = replset._currentServerChoice + 1;\n  // Pick a server\n  var key = keys[replset._currentServerChoice % keys.length];\n\n  var conn = null != replset._state.secondaries[key]\n    ? replset._state.secondaries[key].checkoutReader()\n    : null;\n\n  // If connection is null fallback to first available secondary\n  if(null == conn) {\n    conn = pickFirstConnectedSecondary(replset, tags);\n  }\n\n  return conn;\n}\n\n/**\n * @ignore\n */\nvar pickFirstConnectedSecondary = function pickFirstConnectedSecondary(self, tags) {\n  var keys = Object.keys(self._state.secondaries);\n  var connection;\n\n  // Find first available reader if any\n  for(var i = 0; i < keys.length; i++) {\n    connection = self._state.secondaries[keys[i]].checkoutReader();\n    if(connection) return connection;\n  }\n\n  // If we still have a null, read from primary if it's not secondary only\n  if(self._readPreference == ReadPreference.SECONDARY_PREFERRED) {\n    connection = self._state.master.checkoutReader();\n    if(connection) return connection;\n  }\n\n  var preferenceName = self._readPreference == ReadPreference.SECONDARY_PREFERRED\n    ? 'secondary'\n    : self._readPreference;\n\n  return new Error(\"No replica set member available for query with ReadPreference \"\n                  + preferenceName + \" and tags \" + JSON.stringify(tags));\n}\n\n/**\n * Get list of secondaries\n * @ignore\n */\nObject.defineProperty(ReplSet.prototype, \"secondaries\", {enumerable: true\n  , get: function() {\n      return utils.objectToArray(this._state.secondaries);\n    }\n});\n\n/**\n * Get list of secondaries\n * @ignore\n */\nObject.defineProperty(ReplSet.prototype, \"arbiters\", {enumerable: true\n  , get: function() {\n      return utils.objectToArray(this._state.arbiters);\n    }\n});\n\n"]}