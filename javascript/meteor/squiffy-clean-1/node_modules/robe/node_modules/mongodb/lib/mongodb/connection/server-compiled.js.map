{"version":3,"sources":["server.js"],"names":[],"mappings":"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","file":"server-compiled.js","sourcesContent":["var Connection = require('./connection').Connection,\n  ReadPreference = require('./read_preference').ReadPreference,\n  DbCommand = require('../commands/db_command').DbCommand,\n  MongoReply = require('../responses/mongo_reply').MongoReply,\n  ConnectionPool = require('./connection_pool').ConnectionPool,\n  EventEmitter = require('events').EventEmitter,\n  ServerCapabilities = require('./server_capabilities').ServerCapabilities,\n  Base = require('./base').Base,\n  format = require('util').format,\n  utils = require('../utils'),\n  timers = require('timers'),\n  inherits = require('util').inherits;\n\n// Set processor, setImmediate if 0.10 otherwise nextTick\nvar processor = require('../utils').processor();\n\n/**\n * Class representing a single MongoDB Server connection\n *\n * Options\n *  - **ssl** {Boolean, default:false}, use ssl connection (needs to have a mongod server with ssl support)\n *  - **sslValidate** {Boolean, default:false}, validate mongod server certificate against ca (needs to have a mongod server with ssl support, 2.4 or higher)\n *  - **sslCA** {Array, default:null}, Array of valid certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher)\n *  - **sslCert** {Buffer/String, default:null}, String or buffer containing the certificate we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)\n *  - **sslKey** {Buffer/String, default:null}, String or buffer containing the certificate private key we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)\n *  - **sslPass** {Buffer/String, default:null}, String or buffer containing the certificate password (needs to have a mongod server with ssl support, 2.4 or higher)\n *  - **poolSize** {Number, default:5}, number of connections in the connection pool, set to 5 as default for legacy reasons.\n *  - **socketOptions** {Object, default:null}, an object containing socket options to use (noDelay:(boolean), keepAlive:(number), connectTimeoutMS:(number), socketTimeoutMS:(number))\n *  - **logger** {Object, default:null}, an object representing a logger that you want to use, needs to support functions debug, log, error **({error:function(message, object) {}, log:function(message, object) {}, debug:function(message, object) {}})**.\n *  - **auto_reconnect** {Boolean, default:false}, reconnect on error.\n *  - **disableDriverBSONSizeCheck** {Boolean, default:false}, force the server to error if the BSON message is to big\n *\n * @class Represents a Server connection.\n * @param {String} host the server host\n * @param {Number} port the server port\n * @param {Object} [options] optional options for insert command\n */\nfunction Server(host, port, options) {\n  // Set up Server instance\n  if(!(this instanceof Server)) return new Server(host, port, options);\n\n  // Set up event emitter\n  Base.call(this);\n\n  // Ensure correct values\n  if(port != null && typeof port == 'object') {\n    options = port;\n    port = Connection.DEFAULT_PORT;\n  }\n\n  var self = this;\n  this.host = host;\n  this.port = port;\n  this.options = options == null ? {} : options;\n  this.internalConnection;\n  this.internalMaster = false;\n  this.connected = false;  \n  this.poolSize = this.options.poolSize == null ? 5 : this.options.poolSize;\n  this.disableDriverBSONSizeCheck = this.options.disableDriverBSONSizeCheck != null ? this.options.disableDriverBSONSizeCheck : false;\n  this._used = false;\n  this.replicasetInstance = null;\n\n  // Emit open setup\n  this.emitOpen = this.options.emitOpen || true;\n  // Set ssl as connection method\n  this.ssl = this.options.ssl == null ? false : this.options.ssl;\n  // Set ssl validation\n  this.sslValidate = this.options.sslValidate == null ? false : this.options.sslValidate;\n  // Set the ssl certificate authority (array of Buffer/String keys)\n  this.sslCA = Array.isArray(this.options.sslCA) ? this.options.sslCA : null;\n  // Certificate to present to the server\n  this.sslCert = this.options.sslCert;\n  // Certificate private key if in separate file\n  this.sslKey = this.options.sslKey;\n  // Password to unlock private key\n  this.sslPass = this.options.sslPass;\n  // Server capabilities\n  this.serverCapabilities = null;\n  // Set server name\n  this.name = format(\"%s:%s\", host, port);\n\n  // Ensure we are not trying to validate with no list of certificates\n  if(this.sslValidate && (!Array.isArray(this.sslCA) || this.sslCA.length == 0)) {\n    throw new Error(\"The driver expects an Array of CA certificates in the sslCA parameter when enabling sslValidate\");\n  }\n\n  // Contains the isMaster information returned from the server\n  this.isMasterDoc;\n\n  // Set default connection pool options\n  this.socketOptions = this.options.socketOptions != null ? this.options.socketOptions : {};\n  if(this.disableDriverBSONSizeCheck) this.socketOptions.disableDriverBSONSizeCheck = this.disableDriverBSONSizeCheck;\n\n  // Set ssl up if it's defined\n  if(this.ssl) {\n    this.socketOptions.ssl = true;\n    // Set ssl validation\n    this.socketOptions.sslValidate = this.sslValidate == null ? false : this.sslValidate;\n    // Set the ssl certificate authority (array of Buffer/String keys)\n    this.socketOptions.sslCA = Array.isArray(this.sslCA) ? this.sslCA : null;\n    // Set certificate to present\n    this.socketOptions.sslCert = this.sslCert;\n    // Set certificate to present\n    this.socketOptions.sslKey = this.sslKey;\n    // Password to unlock private key\n    this.socketOptions.sslPass = this.sslPass;\n  }\n\n  // Set up logger if any set\n  this.logger = this.options.logger != null\n    && (typeof this.options.logger.debug == 'function')\n    && (typeof this.options.logger.error == 'function')\n    && (typeof this.options.logger.log == 'function')\n      ? this.options.logger : {error:function(message, object) {}, log:function(message, object) {}, debug:function(message, object) {}};\n\n  // Just keeps list of events we allow\n  this.eventHandlers = {error:[], parseError:[], poolReady:[], message:[], close:[], timeout:[]};\n  // Internal state of server connection\n  this._serverState = 'disconnected';\n  // Contains state information about server connection\n  this._state = {'runtimeStats': {'queryStats':new RunningStats()}};\n  // Do we record server stats or not\n  this.recordQueryStats = false;\n\n  // Allow setting the socketTimeoutMS on all connections\n  // to work around issues such as secondaries blocking due to compaction\n  utils.setSocketTimeoutProperty(this, this.socketOptions);\n};\n\n/**\n * @ignore\n */\ninherits(Server, Base);\n\n//\n//  Deprecated, USE ReadPreferences class\n//\nServer.READ_PRIMARY = ReadPreference.PRIMARY;\nServer.READ_SECONDARY = ReadPreference.SECONDARY_PREFERRED;\nServer.READ_SECONDARY_ONLY = ReadPreference.SECONDARY;\n\n/**\n * Always ourselves\n * @ignore\n */\nServer.prototype.setReadPreference = function(readPreference) {\n  this._readPreference = readPreference;  \n}\n\n/**\n * @ignore\n */\nServer.prototype.isMongos = function() {\n  return this.isMasterDoc != null && this.isMasterDoc['msg'] == \"isdbgrid\" ? true : false;\n}\n\n/**\n * @ignore\n */\nServer.prototype._isUsed = function() {\n  return this._used;\n}\n\n/**\n * @ignore\n */\nServer.prototype.close = function(callback) {\n  // Set server status as disconnected\n  this._serverState = 'destroyed';\n  // Remove all local listeners\n  this.removeAllListeners();\n\n  if(this.connectionPool != null) {\n    // Remove all the listeners on the pool so it does not fire messages all over the place\n    this.connectionPool.removeAllEventListeners();\n    // Close the connection if it's open\n    this.connectionPool.stop(true);\n  }\n\n  // Emit close event\n  if(this.db && !this.isSetMember()) {\n    var self = this;\n    processor(function() {\n      self._emitAcrossAllDbInstances(self, null, \"close\", null, null, true)\n    })\n\n    // Flush out any remaining call handlers\n    self._flushAllCallHandlers(utils.toError(\"Connection Closed By Application\"));\n  }\n\n  // Peform callback if present\n  if(typeof callback === 'function') callback(null);\n};\n\nServer.prototype.isDestroyed = function() {\n  return this._serverState == 'destroyed';\n}\n\n/**\n * @ignore\n */\nServer.prototype.isConnected = function() {\n  return this.connectionPool != null && this.connectionPool.isConnected();\n}\n\n/**\n * @ignore\n */\nServer.prototype.canWrite = Server.prototype.isConnected;\nServer.prototype.canRead = Server.prototype.isConnected;\n\nServer.prototype.isAutoReconnect = function() {\n  if(this.isSetMember()) return false;\n  return this.options.auto_reconnect != null ? this.options.auto_reconnect : true;\n}\n\n/**\n * @ignore\n */\nServer.prototype.allServerInstances = function() {\n  return [this];\n}\n\n/**\n * @ignore\n */\nServer.prototype.isSetMember = function() {\n  return this.replicasetInstance != null || this.mongosInstance != null;\n}\n\n/**\n * @ignore\n */\nServer.prototype.setSocketOptions = function(options) {\n  var connections = this.allRawConnections();\n  for(var i = 0; i < connections.length; i++) {\n    connections[i].setSocketOptions(options);\n  }\n}\n\n/**\n * Assigns a replica set to this `server`.\n *\n * @param {ReplSet} replset\n * @ignore\n */\nServer.prototype.assignReplicaSet = function (replset) {\n  this.replicasetInstance = replset;\n  this.inheritReplSetOptionsFrom(replset);\n  this.enableRecordQueryStats(replset.recordQueryStats);\n}\n\n/**\n * Takes needed options from `replset` and overwrites\n * our own options.\n *\n * @param {ReplSet} replset\n * @ignore\n */\nServer.prototype.inheritReplSetOptionsFrom = function (replset) {\n  this.socketOptions = {};\n  this.socketOptions.connectTimeoutMS = replset.options.socketOptions.connectTimeoutMS || 30000;\n\n  if(replset.options.ssl) {\n    // Set ssl on\n    this.socketOptions.ssl = true;\n    // Set ssl validation\n    this.socketOptions.sslValidate = replset.options.sslValidate == null ? false : replset.options.sslValidate;\n    // Set the ssl certificate authority (array of Buffer/String keys)\n    this.socketOptions.sslCA = Array.isArray(replset.options.sslCA) ? replset.options.sslCA : null;\n    // Set certificate to present\n    this.socketOptions.sslCert = replset.options.sslCert;\n    // Set certificate to present\n    this.socketOptions.sslKey = replset.options.sslKey;\n    // Password to unlock private key\n    this.socketOptions.sslPass = replset.options.sslPass;\n  }\n\n  // If a socket option object exists clone it\n  if(utils.isObject(replset.options.socketOptions)) {\n    var keys = Object.keys(replset.options.socketOptions);\n    for(var i = 0; i < keys.length; i++)\n      this.socketOptions[keys[i]] = replset.options.socketOptions[keys[i]];\n  }\n}\n\n/**\n * Opens this server connection.\n *\n * @ignore\n */\nServer.prototype.connect = function(dbInstance, options, callback) {\n  if('function' === typeof options) callback = options, options = {};\n  if(options == null) options = {};\n  if(!('function' === typeof callback)) callback = null;\n  var self = this;\n  // Save the options\n  this.options = options;\n\n  // Currently needed to work around problems with multiple connections in a pool with ssl\n  // TODO fix if possible\n  if(this.ssl == true) {\n    // Set up socket options for ssl\n    this.socketOptions.ssl = true;\n    // Set ssl validation\n    this.socketOptions.sslValidate = this.sslValidate == null ? false : this.sslValidate;\n    // Set the ssl certificate authority (array of Buffer/String keys)\n    this.socketOptions.sslCA = Array.isArray(this.sslCA) ? this.sslCA : null;\n    // Set certificate to present\n    this.socketOptions.sslCert = this.sslCert;\n    // Set certificate to present\n    this.socketOptions.sslKey = this.sslKey;\n    // Password to unlock private key\n    this.socketOptions.sslPass = this.sslPass;\n  }\n\n  // Let's connect\n  var server = this;\n  // Let's us override the main receiver of events\n  var eventReceiver = options.eventReceiver != null ? options.eventReceiver : this;\n  // Save reference to dbInstance\n  this.db = dbInstance;  // `db` property matches ReplSet and Mongos\n  this.dbInstances = [dbInstance];\n\n  // Force connection pool if there is one\n  if(server.connectionPool) server.connectionPool.stop();\n  // Set server state to connecting\n  this._serverState = 'connecting';\n\n  if(server.connectionPool != null) {\n    // Remove all the listeners on the pool so it does not fire messages all over the place\n    this.connectionPool.removeAllEventListeners();\n    // Close the connection if it's open\n    this.connectionPool.stop(true);    \n  }\n\n  this.connectionPool = new ConnectionPool(this.host, this.port, this.poolSize, dbInstance.bson, this.socketOptions);\n  var connectionPool = this.connectionPool;\n  // If ssl is not enabled don't wait between the pool connections\n  if(this.ssl == null || !this.ssl) connectionPool._timeToWait = null;\n  // Set logger on pool\n  connectionPool.logger = this.logger;\n  connectionPool.bson = dbInstance.bson;\n\n  // Set basic parameters passed in\n  var returnIsMasterResults = options.returnIsMasterResults == null ? false : options.returnIsMasterResults;\n\n  // Create a default connect handler, overriden when using replicasets\n  var connectCallback = function(_server) {\n    return function(err, reply) {  \n      // ensure no callbacks get called twice\n      var internalCallback = callback;\n      callback = null;\n      \n      // Assign the server\n      _server = _server != null ? _server : server;\n      \n      // If something close down the connection and removed the callback before\n      // proxy killed connection etc, ignore the erorr as close event was isssued\n      if(err != null && internalCallback == null) return;\n      // Internal callback\n      if(err != null) return internalCallback(err, null, _server);\n      if(reply == null || reply.documents == null) return internalCallback(utils.toError(\"server failed to respond\", null, _server));\n      _server.master = reply.documents[0].ismaster == 1 ? true : false;\n      _server.connectionPool.setMaxBsonSize(reply.documents[0].maxBsonObjectSize);\n      _server.connectionPool.setMaxMessageSizeBytes(reply.documents[0].maxMessageSizeBytes);\n      _server.connectionPool.setMaxWriteBatchSize(reply.documents[0].maxWriteBatchSize);\n      // Set server state to connEcted\n      _server._serverState = 'connected';\n      // Set server as connected\n      _server.connected = true;\n      // Save document returned so we can query it\n      _server.isMasterDoc = reply.documents[0];\n      \n      if(self.emitOpen) {        \n        _server._emitAcrossAllDbInstances(_server, eventReceiver, \"open\", null, returnIsMasterResults ? reply : null, null);        \n        self.emitOpen = false;\n      } else {\n        _server._emitAcrossAllDbInstances(_server, eventReceiver, \"reconnect\", null, returnIsMasterResults ? reply : null, null);        \n      }\n\n      // Set server capabilities\n      server.serverCapabilities = new ServerCapabilities(_server.isMasterDoc);      \n\n      // Set server capabilities on all the connections\n      var connections = connectionPool.getAllConnections();\n      for(var i = 0; i < connections.length; i++) {\n        connections[i].serverCapabilities = server.serverCapabilities;\n      }\n\n      // If we have it set to returnIsMasterResults\n      if(returnIsMasterResults) {\n        internalCallback(null, reply, _server);\n      } else {\n        internalCallback(null, dbInstance, _server);\n      }\n    }\n  };\n\n  // Let's us override the main connect callback\n  var connectHandler = options.connectHandler == null ? connectCallback(server) : options.connectHandler;\n\n  // Set up on connect method\n  connectionPool.on(\"poolReady\", function() {\n    // Create db command and Add the callback to the list of callbacks by the request id (mapping outgoing messages to correct callbacks)\n    var db_command = DbCommand.NcreateIsMasterCommand(dbInstance, dbInstance.databaseName);\n    // Check out a reader from the pool\n    var connection = connectionPool.checkoutConnection();\n    // Register handler for messages\n    server._registerHandler(db_command, false, connection, connectHandler);\n    // Write the command out\n    connection.write(db_command);\n  })\n\n  // Set up item connection\n  connectionPool.on(\"message\", function(message) {\n    // Attempt to parse the message\n    try {\n      // Create a new mongo reply\n      var mongoReply = new MongoReply()\n      // Parse the header\n      mongoReply.parseHeader(message, connectionPool.bson)\n\n      // If message size is not the same as the buffer size\n      // something went terribly wrong somewhere\n      if(mongoReply.messageLength != message.length) {\n        // Emit the error\n        if(eventReceiver.listeners(\"error\") && eventReceiver.listeners(\"error\").length > 0) eventReceiver.emit(\"error\", new Error(\"bson length is different from message length\"), server);\n        // Remove all listeners\n        server.removeAllListeners();\n      } else {\n        var startDate = new Date().getTime();\n\n        // Callback instance\n        var callbackInfo = server._findHandler(mongoReply.responseTo.toString());\n        // Abort if not a valid callbackInfo, don't try to call it\n        if(callbackInfo == null || callbackInfo.info == null) return;\n\n        // The command executed another request, log the handler again under that request id\n        if(mongoReply.requestId > 0 && mongoReply.cursorId.toString() != \"0\" \n          && callbackInfo && callbackInfo.info && callbackInfo.info.exhaust) {\n            server._reRegisterHandler(mongoReply.requestId, callbackInfo);\n        }\n\n        // Parse the body\n        mongoReply.parseBody(message, connectionPool.bson, callbackInfo.info.raw, function(err) {\n          if(err != null) {\n            // If pool connection is already closed\n            if(server._serverState === 'disconnected') return;\n            // Set server state to disconnected\n            server._serverState = 'disconnected';\n            // Remove all listeners and close the connection pool\n            server.removeAllListeners();\n            connectionPool.stop(true);\n\n            // If we have a callback return the error\n            if(typeof callback === 'function') {\n              // ensure no callbacks get called twice\n              var internalCallback = callback;\n              callback = null;\n              // Perform callback\n              internalCallback(err, null, server);\n            } else if(server.isSetMember()) {\n              if(server.listeners(\"parseError\") && server.listeners(\"parseError\").length > 0) server.emit(\"parseError\", utils.toError(err), server);\n            } else {\n              if(eventReceiver.listeners(\"parseError\") && eventReceiver.listeners(\"parseError\").length > 0) eventReceiver.emit(\"parseError\", utils.toError(err), server);\n            }\n\n            // If we are a single server connection fire errors correctly\n            if(!server.isSetMember()) {\n              // Fire all callback errors\n              server.__executeAllCallbacksWithError(err);\n              // Emit error\n              server._emitAcrossAllDbInstances(server, eventReceiver, \"parseError\", server, null, true);\n            }\n            // Short cut\n            return;\n          }\n\n          // Let's record the stats info if it's enabled\n          if(server.recordQueryStats == true && server._state['runtimeStats'] != null\n            && server._state.runtimeStats['queryStats'] instanceof RunningStats) {\n            // Add data point to the running statistics object\n            server._state.runtimeStats.queryStats.push(new Date().getTime() - callbackInfo.info.start);\n          }\n\n          // Dispatch the call\n          server._callHandler(mongoReply.responseTo, mongoReply, null);\n\n          // If we have an error about the server not being master or primary\n          if((mongoReply.responseFlag & (1 << 1)) != 0\n            && mongoReply.documents[0].code\n            && mongoReply.documents[0].code == 13436) {\n              server.close();\n          }\n        });\n      }\n    } catch (err) {\n      // Throw error in next tick\n      processor(function() {\n        throw err;\n      })\n    }\n  });\n\n  // Handle timeout\n  connectionPool.on(\"timeout\", function(err) {\n    // If pool connection is already closed\n    if(server._serverState === 'disconnected' \n      || server._serverState === 'destroyed') return;\n    // Set server state to disconnected\n    server._serverState = 'disconnected';\n    // If we have a callback return the error\n    if(typeof callback === 'function') {\n      // ensure no callbacks get called twice\n      var internalCallback = callback;\n      callback = null;\n      // Perform callback\n      internalCallback(err, null, server);\n    } else if(server.isSetMember()) {\n      if(server.listeners(\"timeout\") && server.listeners(\"timeout\").length > 0) server.emit(\"timeout\", err, server);\n    } else {\n      if(eventReceiver.listeners(\"timeout\") && eventReceiver.listeners(\"timeout\").length > 0) eventReceiver.emit(\"timeout\", err, server);\n    }\n\n    // If we are a single server connection fire errors correctly\n    if(!server.isSetMember()) {\n      // Fire all callback errors\n      server.__executeAllCallbacksWithError(err);\n      // Emit error\n      server._emitAcrossAllDbInstances(server, eventReceiver, \"timeout\", err, server, true);\n    }\n\n    // If we have autoConnect enabled let's fire up an attempt to reconnect\n    if(server.isAutoReconnect() \n      && !server.isSetMember()\n      && (server._serverState != 'destroyed')\n      && !server._reconnectInProgreess) {\n      // Set the number of retries\n      server._reconnect_retries = server.db.numberOfRetries;\n      // Attempt reconnect\n      server._reconnectInProgreess = true;\n      setTimeout(__attemptReconnect(server), server.db.retryMiliSeconds);\n    }    \n  });\n\n  // Handle errors\n  connectionPool.on(\"error\", function(message, connection, error_options) {\n    // If pool connection is already closed\n    if(server._serverState === 'disconnected' \n      || server._serverState === 'destroyed') return;\n    \n    // Set server state to disconnected\n    server._serverState = 'disconnected';\n    // Error message\n    var error_message = new Error(message && message.err ? message.err : message);\n    // Error message coming from ssl\n    if(error_options && error_options.ssl) error_message.ssl = true;\n\n    // If we have a callback return the error\n    if(typeof callback === 'function') {\n      // ensure no callbacks get called twice\n      var internalCallback = callback;\n      callback = null;\n      // Perform callback\n      internalCallback(error_message, null, server);\n    } else if(server.isSetMember()) {\n      if(server.listeners(\"error\") && server.listeners(\"error\").length > 0) server.emit(\"error\", error_message, server);\n    } else {\n      if(eventReceiver.listeners(\"error\") && eventReceiver.listeners(\"error\").length > 0) eventReceiver.emit(\"error\", error_message, server);\n    }\n\n    // If we are a single server connection fire errors correctly\n    if(!server.isSetMember()) {\n      // Fire all callback errors\n      server.__executeAllCallbacksWithError(error_message);\n      // Emit error\n      server._emitAcrossAllDbInstances(server, eventReceiver, \"error\", error_message, server, true);\n    }\n\n    // If we have autoConnect enabled let's fire up an attempt to reconnect\n    if(server.isAutoReconnect() \n      && !server.isSetMember()\n      && (server._serverState != 'destroyed')\n      && !server._reconnectInProgreess) {\n\n      // Set the number of retries\n      server._reconnect_retries = server.db.numberOfRetries;\n      // Attempt reconnect\n      server._reconnectInProgreess = true;\n      setTimeout(__attemptReconnect(server), server.db.retryMiliSeconds);\n    }    \n  });\n\n  // Handle close events\n  connectionPool.on(\"close\", function() {\n    // If pool connection is already closed\n    if(server._serverState === 'disconnected' \n      || server._serverState === 'destroyed') return;\n    // Set server state to disconnected\n    server._serverState = 'disconnected';\n    // If we have a callback return the error\n    if(typeof callback == 'function') {\n      // ensure no callbacks get called twice\n      var internalCallback = callback;\n      callback = null;\n      // Perform callback\n      internalCallback(new Error(\"connection closed\"), null, server);\n    } else if(server.isSetMember()) {\n      if(server.listeners(\"close\") && server.listeners(\"close\").length > 0) server.emit(\"close\", new Error(\"connection closed\"), server);\n    } else {\n      if(eventReceiver.listeners(\"close\") && eventReceiver.listeners(\"close\").length > 0) eventReceiver.emit(\"close\", new Error(\"connection closed\"), server);\n    }\n\n    // If we are a single server connection fire errors correctly\n    if(!server.isSetMember()) {\n      // Fire all callback errors\n      server.__executeAllCallbacksWithError(new Error(\"connection closed\"));\n      // Emit error\n      server._emitAcrossAllDbInstances(server, eventReceiver, \"close\", server, null, true);\n    }\n\n    // If we have autoConnect enabled let's fire up an attempt to reconnect\n    if(server.isAutoReconnect() \n      && !server.isSetMember()\n      && (server._serverState != 'destroyed')\n      && !server._reconnectInProgreess) {\n\n      // Set the number of retries\n      server._reconnect_retries = server.db.numberOfRetries;  \n      // Attempt reconnect\n      server._reconnectInProgreess = true;\n      setTimeout(__attemptReconnect(server), server.db.retryMiliSeconds);\n    }    \n  });\n\n  /**\n   * @ignore\n   */\n  var __attemptReconnect = function(server) {\n    return function() {\n      // Attempt reconnect\n      server.connect(server.db, server.options, function(err, result) {\n        server._reconnect_retries = server._reconnect_retries - 1;\n\n        if(err) {\n          // Retry\n          if(server._reconnect_retries == 0 || server._serverState == 'destroyed') {\n            server._serverState = 'connected';\n            server._reconnectInProgreess = false\n            // Fire all callback errors\n            return server.__executeAllCallbacksWithError(new Error(\"failed to reconnect to server\"));\n          } else {\n            return setTimeout(__attemptReconnect(server), server.db.retryMiliSeconds);\n          }\n        } else {\n          // Set as authenticating (isConnected will be false)\n          server._serverState = 'authenticating';\n          // Apply any auths, we don't try to catch any errors here\n          // as there are nowhere to simply propagate them to\n          self._apply_auths(server.db, function(err, result) {            \n            server._serverState = 'connected';\n            server._reconnectInProgreess = false;\n\n            // Execute any buffered reads and writes\n            server._commandsStore.execute_queries();\n            server._commandsStore.execute_writes();\n            // Emit reconnect event\n            server.emit('reconnect');\n          });\n        } \n      });      \n    }\n  }\n\n  // If we have a parser error we are in an unknown state, close everything and emit\n  // error\n  connectionPool.on(\"parseError\", function(err) {\n    // If pool connection is already closed\n    if(server._serverState === 'disconnected' \n      || server._serverState === 'destroyed') return;\n    // Set server state to disconnected\n    server._serverState = 'disconnected';\n    // If we have a callback return the error\n    if(typeof callback === 'function') {\n      // ensure no callbacks get called twice\n      var internalCallback = callback;\n      callback = null;\n      // Perform callback\n      internalCallback(utils.toError(err), null, server);\n    } else if(server.isSetMember()) {\n      if(server.listeners(\"parseError\") && server.listeners(\"parseError\").length > 0) server.emit(\"parseError\", utils.toError(err), server);\n    } else {\n      if(eventReceiver.listeners(\"parseError\") && eventReceiver.listeners(\"parseError\").length > 0) eventReceiver.emit(\"parseError\", utils.toError(err), server);\n    }\n\n    // If we are a single server connection fire errors correctly\n    if(!server.isSetMember()) {\n      // Fire all callback errors\n      server.__executeAllCallbacksWithError(utils.toError(err));\n      // Emit error\n      server._emitAcrossAllDbInstances(server, eventReceiver, \"parseError\", server, null, true);\n      // Emit close event\n      server._emitAcrossAllDbInstances(server, eventReceiver, \"close\", new Error(\"connection closed\"), null, true);\n    }\n  });\n\n  // Boot up connection poole, pass in a locator of callbacks\n  connectionPool.start();\n}\n\n/**\n * @ignore\n */\nServer.prototype.allRawConnections = function() {\n  return this.connectionPool != null ? this.connectionPool.getAllConnections() : [];\n}\n\n/**\n * Check if a writer can be provided\n * @ignore\n */\nvar canCheckoutWriter = function(self, read) {\n  var error = null;\n  // We cannot write to an arbiter or secondary server\n  if(self.isMasterDoc && self.isMasterDoc['arbiterOnly'] == true) {\n    error = new Error(\"Cannot write to an arbiter\");\n    error.code = -5000;\n  } if(self.isMasterDoc && self.isMasterDoc['secondary'] == true) {\n    error = new Error(\"Cannot write to a secondary\");\n    error.code = -5000;\n  } else if(read == true && self._readPreference == ReadPreference.SECONDARY && self.isMasterDoc && self.isMasterDoc['ismaster'] == true) {\n    error = new Error(\"Cannot read from primary when secondary only specified\");\n    error.code = -5000;\n  } else if(!self.isMasterDoc) {\n    error = new Error(\"Cannot determine state of server\");\n    error.code = -5000;\n  }\n\n  // Return no error\n  return error;\n}\n\n/**\n * @ignore\n */\nServer.prototype.checkoutWriter = function(read) {\n  if(this._serverState == 'disconnected' || this._serverState == 'destroyed')\n    return null;\n  if(read == true) return this.connectionPool.checkoutConnection();\n  // Check if are allowed to do a checkout (if we try to use an arbiter f.ex)\n  var result = canCheckoutWriter(this, read);\n  // If the result is null check out a writer\n  if(result == null && this.connectionPool != null) {\n    return this.connectionPool.checkoutConnection();\n  } else if(result == null) {\n    return null;\n  } else {\n    return result;\n  }\n}\n\n/**\n * Check if a reader can be provided\n * @ignore\n */\nvar canCheckoutReader = function(self) {\n  // We cannot write to an arbiter or secondary server\n  if(self.isMasterDoc && self.isMasterDoc['arbiterOnly'] == true && self.isSetMember()) {\n    return new Error(\"Cannot write to an arbiter\");\n  } else if(self._readPreference != null) {\n    // If the read preference is Primary and the instance is not a master return an error\n    if((self._readPreference == ReadPreference.PRIMARY) && self.isMasterDoc && self.isMasterDoc['ismaster'] != true) {\n      return new Error(\"Read preference is Server.PRIMARY and server is not master\");\n    } else if(self._readPreference == ReadPreference.SECONDARY && self.isMasterDoc && self.isMasterDoc['ismaster'] == true) {\n      return new Error(\"Cannot read from primary when secondary only specified\");\n    }\n  } else if(!self.isMasterDoc) {\n    return new Error(\"Cannot determine state of server\");\n  }\n\n  // Return no error\n  return null;\n}\n\n/**\n * @ignore\n */\nServer.prototype.checkoutReader = function(read) {\n  if(this._serverState == 'disconnected' || this._serverState == 'destroyed')\n    return null;\n  // Check if are allowed to do a checkout (if we try to use an arbiter f.ex)\n  var result = canCheckoutReader(this);\n  // If the result is null check out a writer\n  if(result == null && this.connectionPool != null) {\n    return this.connectionPool.checkoutConnection();\n  } else if(result == null) {\n    return null;\n  } else {\n    return result;\n  }\n}\n\n/**\n * @ignore\n */\nServer.prototype.enableRecordQueryStats = function(enable) {\n  this.recordQueryStats = enable;\n}\n\n/**\n * Internal statistics object used for calculating average and standard devitation on\n * running queries\n * @ignore\n */\nvar RunningStats = function() {\n  var self = this;\n  this.m_n = 0;\n  this.m_oldM = 0.0;\n  this.m_oldS = 0.0;\n  this.m_newM = 0.0;\n  this.m_newS = 0.0;\n\n  // Define getters\n  Object.defineProperty(this, \"numDataValues\", { enumerable: true\n    , get: function () { return this.m_n; }\n  });\n\n  Object.defineProperty(this, \"mean\", { enumerable: true\n    , get: function () { return (this.m_n > 0) ? this.m_newM : 0.0; }\n  });\n\n  Object.defineProperty(this, \"variance\", { enumerable: true\n    , get: function () { return ((this.m_n > 1) ? this.m_newS/(this.m_n - 1) : 0.0); }\n  });\n\n  Object.defineProperty(this, \"standardDeviation\", { enumerable: true\n    , get: function () { return Math.sqrt(this.variance); }\n  });\n\n  Object.defineProperty(this, \"sScore\", { enumerable: true\n    , get: function () {\n      var bottom = this.mean + this.standardDeviation;\n      if(bottom == 0) return 0;\n      return ((2 * this.mean * this.standardDeviation)/(bottom));\n    }\n  });\n}\n\n/**\n * @ignore\n */\nRunningStats.prototype.push = function(x) {\n  // Update the number of samples\n  this.m_n = this.m_n + 1;\n  \n  // See Knuth TAOCP vol 2, 3rd edition, page 232\n  if(this.m_n == 1) {\n    this.m_oldM = this.m_newM = x;\n    this.m_oldS = 0.0;\n  } else {\n    this.m_newM = this.m_oldM + (x - this.m_oldM) / this.m_n;\n    this.m_newS = this.m_oldS + (x - this.m_oldM) * (x - this.m_newM);\n    // set up for next iteration\n    this.m_oldM = this.m_newM;\n    this.m_oldS = this.m_newS;\n  }\n}\n\n/**\n * @ignore\n */\nObject.defineProperty(Server.prototype, \"autoReconnect\", { enumerable: true\n  , get: function () {\n      return this.options['auto_reconnect'] == null ? false : this.options['auto_reconnect'];\n    }\n});\n\n/**\n * @ignore\n */\nObject.defineProperty(Server.prototype, \"connection\", { enumerable: true\n  , get: function () {\n      return this.internalConnection;\n    }\n  , set: function(connection) {\n      this.internalConnection = connection;\n    }\n});\n\n/**\n * @ignore\n */\nObject.defineProperty(Server.prototype, \"master\", { enumerable: true\n  , get: function () {\n      return this.internalMaster;\n    }\n  , set: function(value) {\n      this.internalMaster = value;\n    }\n});\n\n/**\n * @ignore\n */\nObject.defineProperty(Server.prototype, \"primary\", { enumerable: true\n  , get: function () {\n      return this;\n    }\n});\n\n/**\n * Getter for query Stats\n * @ignore\n */\nObject.defineProperty(Server.prototype, \"queryStats\", { enumerable: true\n  , get: function () {\n      return this._state.runtimeStats.queryStats;\n    }\n});\n\n/**\n * @ignore\n */\nObject.defineProperty(Server.prototype, \"runtimeStats\", { enumerable: true\n  , get: function () {\n      return this._state.runtimeStats;\n    }\n});\n\n/**\n * Get Read Preference method\n * @ignore\n */\nObject.defineProperty(Server.prototype, \"readPreference\", { enumerable: true\n  , get: function () {\n      if(this._readPreference == null && this.readSecondary) {\n        return Server.READ_SECONDARY;\n      } else if(this._readPreference == null && !this.readSecondary) {\n        return Server.READ_PRIMARY;\n      } else {\n        return this._readPreference;\n      }\n    }\n});\n\n/**\n * @ignore\n */\nexports.Server = Server;\n"]}