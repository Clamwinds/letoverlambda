{"version":3,"sources":["cursorstream.js"],"names":[],"mappings":"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","file":"cursorstream-compiled.js","sourcesContent":["var timers = require('timers');\n\n// Set processor, setImmediate if 0.10 otherwise nextTick\nvar processor = require('./utils').processor();\n\n/**\n * Module dependecies.\n */\nvar Stream = require('stream').Stream;\n\n/**\n * CursorStream\n *\n * Returns a stream interface for the **cursor**.\n *\n * Options\n *  - **transform** {Function} function of type function(object) { return transformed }, allows for transformation of data before emitting.\n *\n * Events\n *  - **data** {function(item) {}} the data event triggers when a document is ready.\n *  - **error** {function(err) {}} the error event triggers if an error happens.\n *  - **close** {function() {}} the end event triggers when there is no more documents available.\n *\n * @class Represents a CursorStream.\n * @param {Cursor} cursor a cursor object that the stream wraps.\n * @return {Stream}\n */\nfunction CursorStream(cursor, options) {\n  if(!(this instanceof CursorStream)) return new CursorStream(cursor);\n  options = options ? options : {};\n\n  Stream.call(this);\n\n  this.readable = true;\n  this.paused = false;\n  this._cursor = cursor;\n  this._destroyed = null;\n  this.options = options;\n\n  // give time to hook up events\n  var self = this;\n  process.nextTick(function() {\n    self._init();      \n  });\n}\n\n/**\n * Inherit from Stream\n * @ignore\n * @api private\n */\nCursorStream.prototype.__proto__ = Stream.prototype;\n\n/**\n * Flag stating whether or not this stream is readable.\n */\nCursorStream.prototype.readable;\n\n/**\n * Flag stating whether or not this stream is paused.\n */\nCursorStream.prototype.paused;\n\n/**\n * Initialize the cursor.\n * @ignore\n * @api private\n */\nCursorStream.prototype._init = function () {\n  if (this._destroyed) return;\n  this._next();\n}\n\n/**\n * Pull the next document from the cursor.\n * @ignore\n * @api private\n */\nCursorStream.prototype._next = function () {\n  if(this.paused || this._destroyed) return;\n\n  var self = this;\n  // Get the next object\n  processor(function() {\n    if(self.paused || self._destroyed) return;\n\n    self._cursor.nextObject(function (err, doc) {\n      self._onNextObject(err, doc);\n    });    \n  });\n}\n\n/**\n * Handle each document as its returned from the cursor.\n * @ignore\n * @api private\n */\nCursorStream.prototype._onNextObject = function (err, doc) {\n  if(err) {\n    this.destroy(err);\n    return this.emit('end');\n  }\n\n  // when doc is null we hit the end of the cursor\n  if(!doc && (this._cursor.state == 1 || this._cursor.state == 2)) {\n    this.emit('end')\n    return this.destroy();\n  } else if(doc) {\n    var data = typeof this.options.transform == 'function' ? this.options.transform(doc) : doc;\n    this.emit('data', data);\n    this._next();\n  }\n}\n\n/**\n * Pauses the stream.\n *\n * @api public\n */\nCursorStream.prototype.pause = function () {\n  this.paused = true;\n}\n\n/**\n * Resumes the stream.\n *\n * @api public\n */\nCursorStream.prototype.resume = function () {\n  var self = this;\n\n  // Don't do anything if we are not paused\n  if(!this.paused) return;\n  if(!this._cursor.state == 3) return;\n\n  process.nextTick(function() {\n    self.paused = false;\n    // Only trigger more fetching if the cursor is open\n    self._next();\n  })\n}\n\n/**\n * Destroys the stream, closing the underlying\n * cursor. No more events will be emitted.\n *\n * @api public\n */\nCursorStream.prototype.destroy = function (err) {\n  if (this._destroyed) return;\n  this._destroyed = true;\n  this.readable = false;\n\n  this._cursor.close();\n\n  if(err && this.listeners('error').length > 0) {\n    return this.emit('error', err);\n  }\n\n  this.emit('close');\n}\n\n// TODO - maybe implement the raw option to pass binary?\n//CursorStream.prototype.setEncoding = function () {\n//}\n\nmodule.exports = exports = CursorStream;\n"]}