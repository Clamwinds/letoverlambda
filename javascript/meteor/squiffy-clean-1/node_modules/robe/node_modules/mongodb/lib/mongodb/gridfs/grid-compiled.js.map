{"version":3,"sources":["grid.js"],"names":[],"mappings":"AAAA,IAAI,SAAS,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC,SAAS;IAC9C,QAAQ,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,QAAQ;;;;;;;;;;AAAC,AAUtC,SAAS,IAAI,CAAC,EAAE,EAAE,MAAM,EAAE;;AAExB,MAAG,EAAE,IAAI,YAAY,IAAI,CAAA,AAAC,EAAE,OAAO,IAAI,IAAI,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;;AAExD,MAAI,CAAC,EAAE,GAAG,EAAE,CAAC;AACb,MAAI,CAAC,MAAM,GAAG,MAAM,IAAI,IAAI,GAAG,SAAS,CAAC,uBAAuB,GAAG,MAAM,CAAC;CAC3E;;;;;;;;;;;;;;;;;;;AAAA,AAmBD,IAAI,CAAC,SAAS,CAAC,GAAG,GAAG,UAAS,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE;AACrD,MAAI,IAAI,GAAG,IAAI,CAAC;AAChB,MAAI,IAAI,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;AACpD,UAAQ,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;AACtB,SAAO,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,EAAE,GAAG,EAAE;;AAAC,AAE1C,SAAO,CAAC,MAAM,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,IAAI,IAAI,GAAG,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;;;AAAC,AAG1E,MAAG,CAAE,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,AAAC,EAAE,OAAO,QAAQ,CAAC,IAAI,KAAK,CAAC,qCAAqC,CAAC,EAAE,IAAI,CAAC,CAAC;;AAAA,AAErG,MAAI,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC,IAAI,IAAI;;AAAC,AAE3C,MAAI,EAAE,GAAG,OAAO,CAAC,KAAK,CAAC,IAAI,IAAI;;AAAC,AAEhC,MAAI,SAAS,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,EAAE,QAAQ,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;AACnE,WAAS,CAAC,IAAI,CAAC,UAAS,GAAG,EAAE,SAAS,EAAE;AACtC,QAAG,GAAG,EAAE,OAAO,QAAQ,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;;AAEnC,aAAS,CAAC,KAAK,CAAC,IAAI,EAAE,UAAS,GAAG,EAAE,MAAM,EAAE;AAC1C,UAAG,GAAG,EAAE,OAAO,QAAQ,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;;AAEnC,eAAS,CAAC,KAAK,CAAC,UAAS,GAAG,EAAE,MAAM,EAAE;AACpC,YAAG,GAAG,EAAE,OAAO,QAAQ,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;AACnC,gBAAQ,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;OACxB,CAAC,CAAA;KACH,CAAC,CAAA;GACH,CAAC,CAAA;CACH;;;;;;;;;;AAAA,AAUD,IAAI,CAAC,SAAS,CAAC,GAAG,GAAG,UAAS,EAAE,EAAE,QAAQ,EAAE;;AAE1C,MAAI,SAAS,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,EAAC,IAAI,EAAC,IAAI,CAAC,MAAM,EAAC,CAAC,CAAC;AAC1E,WAAS,CAAC,IAAI,CAAC,UAAS,GAAG,EAAE,SAAS,EAAE;AACtC,QAAG,GAAG,EAAE,OAAO,QAAQ,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;;;AAAA,AAGnC,aAAS,CAAC,IAAI,CAAC,UAAS,GAAG,EAAE,IAAI,EAAE;AACjC,aAAO,QAAQ,CAAC,GAAG,EAAE,IAAI,CAAC,CAAA;KAC3B,CAAC,CAAC;GACJ,CAAC,CAAA;CACH;;;;;;;;;;AAAA,AAUD,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,UAAS,EAAE,EAAE,QAAQ,EAAE;;AAE7C,WAAS,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,EAAE,EAAC,IAAI,EAAC,IAAI,CAAC,MAAM,EAAC,EAAE,UAAS,GAAG,EAAE,MAAM,EAAE;AACtE,QAAG,GAAG,EAAE,OAAO,QAAQ,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;AACpC,WAAO,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;GAC7B,CAAC,CAAC;CACJ,CAAA;;AAED,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC","file":"grid-compiled.js","sourcesContent":["var GridStore = require('./gridstore').GridStore,\n  ObjectID = require('bson').ObjectID;\n\n/**\n * A class representation of a simple Grid interface.\n *\n * @class Represents the Grid.\n * @param {Db} db A database instance to interact with.\n * @param {String} [fsName] optional different root collection for GridFS.\n * @return {Grid}\n */\nfunction Grid(db, fsName) {\n\n  if(!(this instanceof Grid)) return new Grid(db, fsName);\n\n  this.db = db;\n  this.fsName = fsName == null ? GridStore.DEFAULT_ROOT_COLLECTION : fsName;\n}\n\n/**\n * Puts binary data to the grid\n *\n * Options\n *  - **_id** {Any}, unique id for this file\n *  - **filename** {String}, name for this file.\n *  - **root** {String}, root collection to use. Defaults to **{GridStore.DEFAULT_ROOT_COLLECTION}**.\n *  - **content_type** {String}, mime type of the file. Defaults to **{GridStore.DEFAULT_CONTENT_TYPE}**.\n *  - **chunk_size** {Number}, size for the chunk. Defaults to **{Chunk.DEFAULT_CHUNK_SIZE}**.\n *  - **metadata** {Object}, arbitrary data the user wants to store.\n *\n * @param {Buffer} data buffer with Binary Data.\n * @param {Object} [options] the options for the files.\n * @param {Function} callback this will be called after this method is executed. The first parameter will contain an Error object if an error occured or null otherwise. The second parameter will contain a reference to this object.\n * @return {null}\n * @api public\n */\nGrid.prototype.put = function(data, options, callback) {\n  var self = this;\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = args.pop();\n  options = args.length ? args.shift() : {};\n  // If root is not defined add our default one\n  options['root'] = options['root'] == null ? this.fsName : options['root'];\n\n  // Return if we don't have a buffer object as data\n  if(!(Buffer.isBuffer(data))) return callback(new Error(\"Data object must be a buffer object\"), null);\n  // Get filename if we are using it\n  var filename = options['filename'] || null;\n  // Get id if we are using it\n  var id = options['_id'] || null;\n  // Create gridstore\n  var gridStore = new GridStore(this.db, id, filename, \"w\", options);\n  gridStore.open(function(err, gridStore) {\n    if(err) return callback(err, null);\n\n    gridStore.write(data, function(err, result) {\n      if(err) return callback(err, null);\n\n      gridStore.close(function(err, result) {\n        if(err) return callback(err, null);\n        callback(null, result);\n      })\n    })\n  })\n}\n\n/**\n * Get binary data to the grid\n *\n * @param {Any} id for file.\n * @param {Function} callback this will be called after this method is executed. The first parameter will contain an Error object if an error occured or null otherwise. The second parameter will contain a reference to this object.\n * @return {null}\n * @api public\n */\nGrid.prototype.get = function(id, callback) {\n  // Create gridstore\n  var gridStore = new GridStore(this.db, id, null, \"r\", {root:this.fsName});\n  gridStore.open(function(err, gridStore) {\n    if(err) return callback(err, null);\n\n    // Return the data\n    gridStore.read(function(err, data) {\n      return callback(err, data)\n    });\n  })\n}\n\n/**\n * Delete file from grid\n *\n * @param {Any} id for file.\n * @param {Function} callback this will be called after this method is executed. The first parameter will contain an Error object if an error occured or null otherwise. The second parameter will contain a reference to this object.\n * @return {null}\n * @api public\n */\nGrid.prototype.delete = function(id, callback) {\n  // Create gridstore\n  GridStore.unlink(this.db, id, {root:this.fsName}, function(err, result) {\n    if(err) return callback(err, false);\n    return callback(null, true);\n  });\n}\n\nexports.Grid = Grid;\n"]}