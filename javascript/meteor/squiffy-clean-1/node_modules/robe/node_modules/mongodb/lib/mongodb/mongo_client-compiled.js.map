{"version":3,"sources":["mongo_client.js"],"names":[],"mappings":"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","file":"mongo_client-compiled.js","sourcesContent":["var Db = require('./db').Db\n  , Server = require('./connection/server').Server\n  , Mongos = require('./connection/mongos').Mongos\n  , ReplSet = require('./connection/repl_set/repl_set').ReplSet\n  , ReadPreference = require('./connection/read_preference').ReadPreference\n  , inherits = require('util').inherits\n  , EventEmitter = require('events').EventEmitter\n  , parse = require('./connection/url_parser').parse;\n\n/**\n * Create a new MongoClient instance.\n *\n * Options\n *  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write\n *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)\n *  - **fsync**, (Boolean, default:false) write waits for fsync before returning, from MongoDB 2.6 on, fsync cannot be combined with journal\n *  - **j**, (Boolean, default:false) write waits for journal sync before returning\n *  - **readPreference** {String}, the prefered read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n *  - **native_parser** {Boolean, default:false}, use c++ bson parser.\n *  - **forceServerObjectId** {Boolean, default:false}, force server to create _id fields instead of client.\n *  - **pkFactory** {Object}, object overriding the basic ObjectID primary key generation.\n *  - **serializeFunctions** {Boolean, default:false}, serialize functions.\n *  - **raw** {Boolean, default:false}, peform operations using raw bson buffers.\n *  - **recordQueryStats** {Boolean, default:false}, record query statistics during execution.\n *  - **retryMiliSeconds** {Number, default:5000}, number of miliseconds between retries.\n *  - **numberOfRetries** {Number, default:5}, number of retries off connection.\n *  - **bufferMaxEntries** {Boolean, default: -1}, sets a cap on how many operations the driver will buffer up before giving up on getting a working connection, default is -1 which is unlimited\n *\n * @class Represents a MongoClient\n * @param {Object} serverConfig server config object.\n * @param {Object} [options] additional options for the collection.\n */\nfunction MongoClient(serverConfig, options) {\n  if(serverConfig != null) {\n    options = options ? options : {};\n    // If no write concern is set set the default to w:1\n    if('w' in options === false) {\n      options.w = 1;\n    }\n    \n    // The internal db instance we are wrapping\n    this._db = new Db('test', serverConfig, options);    \n  }\n}\n\n/**\n * @ignore\n */\ninherits(MongoClient, EventEmitter);\n\n/**\n * Connect to MongoDB using a url as documented at\n *\n *  docs.mongodb.org/manual/reference/connection-string/\n *\n * Options\n *  - **uri_decode_auth** {Boolean, default:false} uri decode the user name and password for authentication\n *  - **db** {Object, default: null} a hash off options to set on the db object, see **Db constructor**\n *  - **server** {Object, default: null} a hash off options to set on the server objects, see **Server** constructor**\n *  - **replSet** {Object, default: null} a hash off options to set on the replSet object, see **ReplSet** constructor**\n *  - **mongos** {Object, default: null} a hash off options to set on the mongos object, see **Mongos** constructor**\n *\n * @param {String} url connection url for MongoDB.\n * @param {Object} [options] optional options for insert command\n * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the initialized db object or null if an error occured.\n * @return {null}\n * @api public\n */\nMongoClient.prototype.connect = function(url, options, callback) {\n  var self = this;\n\n  if(typeof options == 'function') {\n    callback = options;\n    options = {};\n  }\n\n  MongoClient.connect(url, options, function(err, db) {\n    if(err) return callback(err, db);\n    // Store internal db instance reference\n    self._db = db;\n    // Emit open and perform callback\n    self.emit(\"open\", err, db);\n    callback(err, db);\n  });\n}\n\n/**\n * Initialize the database connection.\n *\n * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the connected mongoclient or null if an error occured.\n * @return {null}\n * @api public\n */\nMongoClient.prototype.open = function(callback) {\n  // Self reference\n  var self = this;\n  // Open the db\n  this._db.open(function(err, db) {\n    if(err) return callback(err, null);\n    // Emit open event\n    self.emit(\"open\", err, db);\n    // Callback\n    callback(null, self);\n  })\n}\n\n/**\n * Close the current db connection, including all the child db instances. Emits close event and calls optional callback.\n *\n * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from the close method or null if an error occured.\n * @return {null}\n * @api public\n */\nMongoClient.prototype.close = function(callback) {\n  this._db.close(callback);\n}\n\n/**\n * Create a new Db instance sharing the current socket connections.\n *\n * @param {String} dbName the name of the database we want to use.\n * @return {Db} a db instance using the new database.\n * @api public\n */\nMongoClient.prototype.db = function(dbName) {\n  return this._db.db(dbName);\n}\n\n/**\n * Connect to MongoDB using a url as documented at\n *\n *  docs.mongodb.org/manual/reference/connection-string/\n *\n * Options\n *  - **uri_decode_auth** {Boolean, default:false} uri decode the user name and password for authentication\n *  - **db** {Object, default: null} a hash off options to set on the db object, see **Db constructor**\n *  - **server** {Object, default: null} a hash off options to set on the server objects, see **Server** constructor**\n *  - **replSet** {Object, default: null} a hash off options to set on the replSet object, see **ReplSet** constructor**\n *  - **mongos** {Object, default: null} a hash off options to set on the mongos object, see **Mongos** constructor**\n *\n * @param {String} url connection url for MongoDB.\n * @param {Object} [options] optional options for insert command\n * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the initialized db object or null if an error occured.\n * @return {null}\n * @api public\n */\nMongoClient.connect = function(url, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = typeof args[args.length - 1] == 'function' ? args.pop() : null;\n  options = args.length ? args.shift() : null;\n  options = options || {};\n\n  // Set default empty server options  \n  var serverOptions = options.server || {};\n  var mongosOptions = options.mongos || {};\n  var replSetServersOptions = options.replSet || options.replSetServers || {};\n  var dbOptions = options.db || {};\n\n  // If callback is null throw an exception\n  if(callback == null) \n    throw new Error(\"no callback function provided\");\n\n  // Parse the string\n  var object = parse(url, options);\n\n  // Merge in any options for db in options object\n  if(dbOptions) {\n    for(var name in dbOptions) object.db_options[name] = dbOptions[name];\n  }\n\n  // Added the url to the options\n  object.db_options.url = url;\n\n  // Merge in any options for server in options object\n  if(serverOptions) {\n    for(var name in serverOptions) object.server_options[name] = serverOptions[name];\n  }\n\n  // Merge in any replicaset server options\n  if(replSetServersOptions) {\n    for(var name in replSetServersOptions) object.rs_options[name] = replSetServersOptions[name];    \n  }\n\n  // Merge in any replicaset server options\n  if(mongosOptions) {\n    for(var name in mongosOptions) object.mongos_options[name] = mongosOptions[name];    \n  }\n\n  // We need to ensure that the list of servers are only either direct members or mongos\n  // they cannot be a mix of monogs and mongod's\n  var totalNumberOfServers = object.servers.length;\n  var totalNumberOfMongosServers = 0;\n  var totalNumberOfMongodServers = 0;\n  var serverConfig = null;\n  var errorServers = {};\n\n  // Failure modes\n  if(object.servers.length == 0) throw new Error(\"connection string must contain at least one seed host\");\n\n  // If we have no db setting for the native parser try to set the c++ one first\n  object.db_options.native_parser = _setNativeParser(object.db_options);\n  // If no auto_reconnect is set, set it to true as default for single servers\n  if(typeof object.server_options.auto_reconnect != 'boolean') {\n    object.server_options.auto_reconnect = true;\n  }\n\n  // Establish the correct socketTimeout\n  var connectTimeoutMS = 30000;\n  var socketTimeoutMS = 0;\n\n  // We have a server connection timeout setting\n  if(object.server_options && object.server_options.socketOptions && object.server_options.socketOptions.connectTimeoutMS) {\n    connectTimeoutMS = object.server_options.socketOptions.connectTimeoutMS;\n  }\n\n  // We have a rs options set for connection timeout, override any server ones\n  if(object.rs_options && object.rs_options.socketOptions && object.rs_options.socketOptions.connectTimeoutMS) {\n    connectTimeoutMS = object.rs_options.socketOptions.connectTimeoutMS;\n  }\n\n  // If we have no socket settings set the default values\n  if(object.rs_options.socketOptions.connectTimeoutMS == null) {\n    object.rs_options.socketOptions.connectTimeoutMS = connectTimeoutMS;\n  }\n\n  if(object.rs_options.socketOptions.socketTimeoutMS == null) {\n    object.rs_options.socketOptions.socketTimeoutMS = socketTimeoutMS;\n  }\n\n  if(object.server_options.socketOptions.connectTimeoutMS == null) {\n    object.server_options.socketOptions.connectTimeoutMS = connectTimeoutMS;\n  }\n\n  if(object.server_options.socketOptions.socketTimeoutMS == null) {\n    object.server_options.socketOptions.socketTimeoutMS = socketTimeoutMS;\n  }\n\n  // If we have more than a server, it could be replicaset or mongos list\n  // need to verify that it's one or the other and fail if it's a mix\n  // Connect to all servers and run ismaster\n  for(var i = 0; i < object.servers.length; i++) {\n    // Set up socket options\n    var _server_options = {\n        poolSize:1\n      , socketOptions: {\n          connectTimeoutMS: connectTimeoutMS \n        , socketTimeoutMS: socketTimeoutMS\n      }\n      , auto_reconnect:false};\n\n    // Ensure we have ssl setup for the servers\n    if(object.rs_options.ssl) {\n      _server_options.ssl = object.rs_options.ssl;\n      _server_options.sslValidate = object.rs_options.sslValidate;\n      _server_options.sslCA = object.rs_options.sslCA;\n      _server_options.sslCert = object.rs_options.sslCert;\n      _server_options.sslKey = object.rs_options.sslKey;\n      _server_options.sslPass = object.rs_options.sslPass;\n    } else if(object.server_options.ssl) {\n      _server_options.ssl = object.server_options.ssl;\n      _server_options.sslValidate = object.server_options.sslValidate;\n      _server_options.sslCA = object.server_options.sslCA;\n      _server_options.sslCert = object.server_options.sslCert;\n      _server_options.sslKey = object.server_options.sslKey;\n      _server_options.sslPass = object.server_options.sslPass;\n    }\n\n    // Set up the Server object\n    var _server = object.servers[i].domain_socket \n        ? new Server(object.servers[i].domain_socket, _server_options)\n        : new Server(object.servers[i].host, object.servers[i].port, _server_options);\n\n    var connectFunction = function(__server) { \n      // Attempt connect\n      new Db(object.dbName, __server, {w:1, native_parser:false}).open(function(err, db) {\n        // Update number of servers\n        totalNumberOfServers = totalNumberOfServers - 1;          \n        // If no error do the correct checks\n        if(!err) {\n          // Close the connection\n          db.close(true);\n          var isMasterDoc = db.serverConfig.isMasterDoc;\n          // Check what type of server we have\n          if(isMasterDoc.setName) totalNumberOfMongodServers++;\n          if(isMasterDoc.msg && isMasterDoc.msg == \"isdbgrid\") totalNumberOfMongosServers++;\n        } else {\n          errorServers[__server.host + \":\" + __server.port] = __server;\n        }\n\n        if(totalNumberOfServers == 0) {\n          // If we have a mix of mongod and mongos, throw an error\n          if(totalNumberOfMongosServers > 0 && totalNumberOfMongodServers > 0) {\n            return process.nextTick(function() {\n              try {\n                callback(new Error(\"cannot combine a list of replicaset seeds and mongos seeds\"));\n              } catch (err) {\n                if(db) db.close();\n                throw err\n              }              \n            })\n          }\n          \n          if(totalNumberOfMongodServers == 0 && object.servers.length == 1) {\n            var obj = object.servers[0];\n            serverConfig = obj.domain_socket ? \n                new Server(obj.domain_socket, object.server_options)\n              : new Server(obj.host, obj.port, object.server_options);            \n          } else if(totalNumberOfMongodServers > 0 || totalNumberOfMongosServers > 0) {\n            var finalServers = object.servers\n              .filter(function(serverObj) {\n                return errorServers[serverObj.host + \":\" + serverObj.port] == null;\n              })\n              .map(function(serverObj) {\n                  return new Server(serverObj.host, serverObj.port, object.server_options);\n              });\n            // Clean out any error servers\n            errorServers = {};\n            // Set up the final configuration\n            if(totalNumberOfMongodServers > 0) {\n              serverConfig = new ReplSet(finalServers, object.rs_options);                \n            } else {\n              serverConfig = new Mongos(finalServers, object.mongos_options);                         \n            }\n          }\n\n          if(serverConfig == null) {\n            return process.nextTick(function() {\n              try {\n                callback(new Error(\"Could not locate any valid servers in initial seed list\"));\n              } catch (err) {\n                if(db) db.close();\n                throw err\n              }\n            });\n          }\n          // Ensure no firing off open event before we are ready\n          serverConfig.emitOpen = false;\n          // Set up all options etc and connect to the database\n          _finishConnecting(serverConfig, object, options, callback)\n        }\n      });        \n    }\n\n    // Wrap the context of the call\n    connectFunction(_server);    \n  }    \n}\n\nvar _setNativeParser = function(db_options) {\n  if(typeof db_options.native_parser == 'boolean') return db_options.native_parser;\n\n  try {\n    require('bson').BSONNative.BSON;\n    return true;\n  } catch(err) {\n    return false;\n  }\n}\n\nvar _finishConnecting = function(serverConfig, object, options, callback) {\n  // Safe settings\n  var safe = {};\n  // Build the safe parameter if needed\n  if(object.db_options.journal) safe.j = object.db_options.journal;\n  if(object.db_options.w) safe.w = object.db_options.w;\n  if(object.db_options.fsync) safe.fsync = object.db_options.fsync;\n  if(object.db_options.wtimeoutMS) safe.wtimeout = object.db_options.wtimeoutMS;\n\n  // If we have a read Preference set\n  if(object.db_options.read_preference) {\n    var readPreference = new ReadPreference(object.db_options.read_preference);\n    // If we have the tags set up\n    if(object.db_options.read_preference_tags)\n      readPreference = new ReadPreference(object.db_options.read_preference, object.db_options.read_preference_tags);\n    // Add the read preference\n    object.db_options.readPreference = readPreference;\n  }\n\n  // No safe mode if no keys\n  if(Object.keys(safe).length == 0) safe = false;\n\n  // Add the safe object\n  object.db_options.safe = safe;\n\n  // Get the socketTimeoutMS\n  var socketTimeoutMS = object.server_options.socketOptions.socketTimeoutMS || 0;\n  var connectTimeoutMS = object.server_options.socketOptions.connectTimeoutMS || 30000;\n\n  // If we have a replset, override with replicaset socket timeout option if available\n  if(serverConfig instanceof ReplSet) {\n    socketTimeoutMS = object.rs_options.socketOptions.socketTimeoutMS || socketTimeoutMS;\n  }\n\n  //\n  // Set socketTimeout to same as connectionTimeout to ensure we don't block on connect and auth\n  // This is a workaround for pre 2.6 servers where auth can hang when indexes are build on secondaries\n  serverConfig.setSocketOptions({socketTimeoutMS: connectTimeoutMS, connectTimeoutMS: connectTimeoutMS});\n\n  // Set up the db options\n  var db = new Db(object.dbName, serverConfig, object.db_options);\n  // Open the db\n  db.open(function(err, db){\n    if(err) {\n      return process.nextTick(function() {\n        try {\n          callback(err, null);\n        } catch (err) {\n          if(db) db.close();\n          throw err\n        }\n      });\n    }\n\n    //\n    // Set socketTimeout to same as connectionTimeout to ensure we don't block on connect and auth\n    // This is a workaround for pre 2.6 servers where auth can hang when indexes are build on secondaries\n    serverConfig.setSocketOptions({socketTimeoutMS: connectTimeoutMS, connectTimeoutMS: connectTimeoutMS});\n\n    // Set the provided write concern or fall back to w:1 as default\n    if(db.options !== null && !db.options.safe && !db.options.journal \n      && !db.options.w && !db.options.fsync && typeof db.options.w != 'number'\n      && (db.options.safe == false && object.db_options.url.indexOf(\"safe=\") == -1)) {\n        db.options.w = 1;\n    }\n\n    if(err == null && object.auth){\n      // What db to authenticate against\n      var authentication_db = db;\n      if(object.db_options && object.db_options.authSource) {\n        authentication_db = db.db(object.db_options.authSource);\n      }\n\n      // Build options object\n      var options = {};\n      if(object.db_options.authMechanism) options.authMechanism = object.db_options.authMechanism;\n      if(object.db_options.gssapiServiceName) options.gssapiServiceName = object.db_options.gssapiServiceName;\n\n      // Authenticate\n      authentication_db.authenticate(object.auth.user, object.auth.password, options, function(err, success){\n        // Reset the socket timeout\n        serverConfig.setSocketOptions({socketTimeoutMS: socketTimeoutMS, connectTimeoutMS: connectTimeoutMS});\n\n        // Handle the results\n        if(success){\n          process.nextTick(function() {\n            try {\n              callback(null, db);            \n            } catch (err) {\n              if(db) db.close();\n              throw err\n            }\n          });\n        } else {\n          if(db) db.close();\n          process.nextTick(function() {\n            try {\n              callback(err ? err : new Error('Could not authenticate user ' + object.auth[0]), null);\n            } catch (err) {\n              if(db) db.close();\n              throw err\n            }\n          });\n        }\n      });\n    } else {      \n      // Reset the socket timeout\n      serverConfig.setSocketOptions({socketTimeoutMS: socketTimeoutMS, connectTimeoutMS: connectTimeoutMS});\n\n      // Return connection      \n      process.nextTick(function() {\n        try {\n          callback(err, db);            \n        } catch (err) {\n          if(db) db.close();\n          throw err\n        }\n      })\n    }\n  });\n}\n\nexports.MongoClient = MongoClient;"]}