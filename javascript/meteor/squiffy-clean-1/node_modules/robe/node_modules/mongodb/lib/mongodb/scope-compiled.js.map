{"version":3,"sources":["scope.js"],"names":[],"mappings":"AAAA,IAAI,MAAM,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC,MAAM;IACnC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,QAAQ;IACrC,KAAK,GAAG,OAAO,CAAC,SAAS,CAAC;IAC1B,QAAQ,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC;;AAExC,IAAI,KAAK,GAAG,UAAS,UAAU,EAAE,SAAS,EAAE,OAAO,EAAE,cAAc,EAAE;AACnE,MAAI,IAAI,GAAG,IAAI;;;AAAC,AAGhB,gBAAc,GAAG,cAAc,IAAI,EAAE,CAAC;AACtC,MAAI,cAAc,GAAG,cAAc,CAAC,aAAa,IAAI,IAAI;;;;;;AAAC,AAM1D,MAAI,OAAO,GAAG,IAAI,MAAM,CAClB,UAAU,CAAC,EAAE,EAAE,UAAU,EAAE,SAAS,EACpC,OAAO,EAAE,cAAc,CAC1B;;;AAAC,AAGJ,MAAI,YAAY,GAAG;AACjB,UAAM,EAAE,UAAS,SAAS,EAAE,QAAQ,EAAE;;AAEpC,UAAI,OAAO,GAAG,cAAc,IAAI,EAAE;;AAAC,AAEnC,gBAAU,CAAC,MAAM,CAAC,SAAS,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;KACjD;;AAED,QAAI,EAAE,UAAS,QAAQ,EAAE,QAAQ,EAAE;;AAEjC,UAAI,YAAY,GAAG,cAAc,IAAI,EAAE;;AAAC,AAExC,gBAAU,CAAC,IAAI,CAAC,QAAQ,EAAE,YAAY,EAAE,UAAS,GAAG,EAAE,MAAM,EAAE;AAC5D,YAAG,OAAO,MAAM,IAAI,QAAQ,IAAI,MAAM,IAAI,CAAC,EAAE;AAC3C,iBAAO,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;SACjC;;AAED,eAAO,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;OACjC,CAAC,CAAC;KACJ;;AAED,QAAI,EAAE,UAAS,QAAQ,EAAE;AACvB,eAAS,GAAG,QAAQ,CAAC;AACrB,aAAO,YAAY,CAAC;KACrB;;;;AAID,UAAM,EAAE,UAAS,UAAU,EAAE,QAAQ,EAAE;;AAErC,UAAI,cAAc,GAAG,cAAc,IAAI,EAAE;;;AAAC,AAG1C,oBAAc,CAAC,KAAK,GAAG,cAAc,CAAC,KAAK,GAAG,cAAc,CAAC,KAAK,GAAG,IAAI,CAAC;AAC1E,UAAG,cAAc,CAAC,MAAM,EAAE,cAAc,CAAC,MAAM,GAAG,cAAc,CAAC,MAAM,CAAC;;;AAAA,AAGxE,gBAAU,CAAC,MAAM,CAAC,SAAS,EAAE,UAAU,EAAE,cAAc,EAAE,UAAS,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE;AAClF,gBAAQ,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;OACpB,CAAC,CAAC;KACJ;GACF;;;AAAA,AAGD,MAAI,CAAC,gBAAgB,GAAG,UAAS,aAAa,EAAE;;AAE9C,kBAAc,CAAC,aAAa,GAAG,aAAa,CAAC;AAC7C,kBAAc,GAAG,aAAa;;AAAC,AAE/B,WAAO,YAAY,CAAC;GACrB;;;AAAA,AAGD,MAAI,CAAC,IAAI,GAAG,UAAS,QAAQ,EAAE,OAAO,EAAE;;AAEtC,aAAS,GAAG,QAAQ;;AAAC,AAErB,WAAO,CAAC,QAAQ,GAAG,QAAQ;;AAAC,AAE5B,WAAO,MAAM,CAAC,gBAAgB,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC;GACzD,CAAA;CACF,CAAA;;AAED,OAAO,CAAC,KAAK,GAAG,KAAK,CAAC","file":"scope-compiled.js","sourcesContent":["var Cursor = require('./cursor').Cursor\n  , Readable = require('stream').Readable\n  , utils = require('./utils')\n  , inherits = require('util').inherits;\n\nvar Scope = function(collection, _selector, _fields, _scope_options) {\n  var self = this;\n\n  // Ensure we have at least an empty cursor options object\n  _scope_options = _scope_options || {};\n  var _write_concern = _scope_options.write_concern || null;\n\n  // Ensure default read preference\n  // if(!_scope_options.readPreference) _scope_options.readPreference = 'primary';\n\n  // Set up the cursor\n  var _cursor = new Cursor(\n        collection.db, collection, _selector\n      , _fields, _scope_options\n    );\n\n  // Write branch options\n  var writeOptions = {\n    insert: function(documents, callback) {\n      // Merge together options\n      var options = _write_concern || {};\n      // Execute insert\n      collection.insert(documents, options, callback);\n    },\n\n    save: function(document, callback) {\n      // Merge together options\n      var save_options = _write_concern || {};\n      // Execute save\n      collection.save(document, save_options, function(err, result) {\n        if(typeof result == 'number' && result == 1) {\n          return callback(null, document);\n        }\n\n        return callback(null, document);\n      });\n    },\n\n    find: function(selector) {\n      _selector = selector;\n      return writeOptions;\n    },\n\n    //\n    // Update is implicit multiple document update\n    update: function(operations, callback) {\n      // Merge together options\n      var update_options = _write_concern || {};\n\n      // Set up options, multi is default operation\n      update_options.multi = _scope_options.multi ? _scope_options.multi : true;\n      if(_scope_options.upsert) update_options.upsert = _scope_options.upsert;\n\n      // Execute options\n      collection.update(_selector, operations, update_options, function(err, result, obj) {\n        callback(err, obj);\n      });\n    },\n  }\n\n  // Set write concern\n  this.withWriteConcern = function(write_concern) {\n    // Save the current write concern to the Scope\n    _scope_options.write_concern = write_concern;\n    _write_concern = write_concern;\n    // Only allow legal options\n    return writeOptions;\n  }\n\n  // Start find\n  this.find = function(selector, options) {\n    // Save the current selector\n    _selector = selector;\n    // Set the cursor\n    _cursor.selector = selector;\n    // Return only legal read options\n    return Cursor.cloneWithOptions(_cursor, _scope_options);\n  }\n}\n\nexports.Scope = Scope;\n"]}