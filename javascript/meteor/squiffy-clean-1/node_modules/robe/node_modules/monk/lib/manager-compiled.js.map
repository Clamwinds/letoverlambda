{"version":3,"sources":["manager.js"],"names":[],"mappings":";;;;AAIA,IAAI,SAAS,GAAG,OAAO,CAAC,WAAW,CAAC;IAChC,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,cAAc,CAAC;IACxC,UAAU,GAAG,OAAO,CAAC,cAAc,CAAC;IACpC,QAAQ,GAAG,SAAS,CAAC,QAAQ;IAC7B,YAAY,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,YAAY;;;;;;AAAA,AAMjD,MAAM,CAAC,OAAO,GAAG,OAAO;;;;;;;;;;;AAAC,AAWzB,SAAS,OAAO,CAAE,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE;AAC/B,MAAI,CAAC,GAAG,EAAE;AACR,UAAM,KAAK,CAAC,6BAA6B,CAAC,CAAC;GAC5C;;AAED,MAAI,EAAE,IAAI,YAAY,OAAO,CAAA,AAAC,EAAE;AAC9B,WAAO,IAAI,OAAO,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;GACnC;;AAED,MAAI,UAAU,IAAI,OAAO,IAAI,EAAE;AAC7B,MAAE,GAAG,IAAI,CAAC;AACV,QAAI,GAAG,EAAE,CAAC;GACX;;AAED,MAAI,GAAG,IAAI,IAAI,EAAE,CAAC;AAClB,MAAI,CAAC,IAAI,GAAG,IAAI,CAAC;;AAEjB,MAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;AACtB,QAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;AAClB,WAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;AAC1C,YAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;AAClB,cAAI,CAAC,QAAQ,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC;SACnD;AACD,WAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;OACrC;KACF;AACD,OAAG,GAAG,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC;AAC1C,SAAK,CAAC,2CAA2C,EAAE,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;GACxE;;AAED,MAAI,QAAQ,IAAI,OAAO,GAAG,EAAE;AAC1B,QAAK,CAAE,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;AACjC,SAAG,GAAG,YAAY,GAAG,GAAG,CAAC;KAC1B;GACF;;AAED,MAAI,CAAC,MAAM,GAAG,SAAS,CAAC,EAAE,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;AACtC,MAAI,CAAC,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC;AAC/B,MAAI,CAAC,MAAM,CAAC,EAAE,GAAG,QAAQ,CAAC;AAC1B,MAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;AACzC,MAAI,CAAC,WAAW,GAAG,EAAE,CAAC;AACtB,MAAI,CAAC,OAAO,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;;AAE9B,MAAI,EAAE,EAAE;AACN,QAAI,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;GACvB;CACF;;;;;;AAAA,AAMD,OAAO,CAAC,SAAS,CAAC,SAAS,GAAG,YAAY,CAAC,SAAS;;;;;;;;AAAC,AAQrD,OAAO,CAAC,SAAS,CAAC,MAAM,GAAG,YAAY;AACrC,MAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;CACnB;;;;;;;;;AAAC,AASF,OAAO,CAAC,SAAS,CAAC,KAAK,GAAG,UAAU,EAAE,EAAE;AACtC,MAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;AACtB,SAAO,IAAI,CAAC;CACb;;;;;;;;;AAAC,AASF,OAAO,CAAC,SAAS,CAAC,GAAG,GACrB,OAAO,CAAC,SAAS,CAAC,GAAG,GAAG,UAAU,IAAI,EAAE;AACtC,MAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE;AAC3B,QAAI,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,IAAI,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;GACrD;;AAED,SAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;CAC/B;;;;;;;;;;AAAC,AAUF,OAAO,CAAC,SAAS,CAAC,EAAE,GACpB,OAAO,CAAC,SAAS,CAAC,GAAG,GAAG,UAAU,GAAG,EAAE;AACrC,MAAI,IAAI,IAAI,GAAG,EAAE,OAAO,QAAQ,EAAE,CAAC;AACnC,SAAO,QAAQ,IAAI,OAAO,GAAG,GAAG,QAAQ,CAAC,mBAAmB,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;CACzE,CAAC","file":"manager-compiled.js","sourcesContent":["/**\n * Module dependencies.\n */\n\nvar mongoskin = require('mongoskin')\n  , debug = require('debug')('monk:manager')\n  , Collection = require('./collection')\n  , ObjectId = mongoskin.ObjectID\n  , EventEmitter = require('events').EventEmitter\n\n/**\n * Module exports.\n */\n\nmodule.exports = Manager;\n\n/**\n * Manager constructor.\n *\n * @param {Array|String} connection uri. replica sets can be an array or\n * comma-separated\n * @param {Object|Function} options or connect callback\n * @param {Function} connect callback\n */\n\nfunction Manager (uri, opts, fn) {\n  if (!uri) {\n    throw Error('No connection URI provided.');\n  }\n  \n  if (!(this instanceof Manager)) {\n    return new Manager(uri, opts, fn);\n  }\n\n  if ('function' == typeof opts) {\n    fn = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  opts.safe = true;\n\n  if (Array.isArray(uri)) {\n    if (!opts.database) {\n      for (var i = 0, l = uri.length; i < l; i++) {\n        if (!opts.database) {\n          opts.database = uri[i].replace(/([^\\/])+\\/?/, '');\n        }\n        uri[i] = uri[i].replace(/\\/.*/, '');\n      }\n    }\n    uri = uri.join(\",\") + \"/\" + opts.database;\n    debug('repl set connection \"%j\" to database \"%s\"', uri, opts.database);\n  }\n\n  if ('string' == typeof uri) {\n    if ( ! /^mongodb\\:\\/\\//.test(uri)) {\n      uri = 'mongodb://' + uri;\n    }\n  }\n\n  this.driver = mongoskin.db(uri, opts);\n  this.helper = mongoskin.helper;\n  this.helper.id = ObjectId;\n  this.driver.open(this.onOpen.bind(this));\n  this.collections = {};\n  this.options = { safe: true };\n\n  if (fn) {\n    this.once('open', fn);\n  }\n}\n\n/**\n * Inherits from EventEmitter\n */\n\nManager.prototype.__proto__ = EventEmitter.prototype;\n\n/**\n * Open callback.\n *\n * @api private\n */\n\nManager.prototype.onOpen = function () {\n  this.emit('open');\n};\n\n/**\n * Closes the connection.\n *\n * @return {Manager} for chaining\n * @api private\n */\n\nManager.prototype.close = function (fn) {\n  this.driver.close(fn);\n  return this;\n};\n\n/**\n * Gets a collection.\n *\n * @return {Collection} collection to query against\n * @api private\n */\n\nManager.prototype.col =\nManager.prototype.get = function (name) {\n  if (!this.collections[name]) {\n    this.collections[name] = new Collection(this, name);\n  }\n\n  return this.collections[name];\n};\n\n/**\n * Casts to objectid\n *\n * @param {Mixed} hex id or ObjectId\n * @return {ObjectId}\n * @api public\n */\n\nManager.prototype.id =\nManager.prototype.oid = function (str) {\n  if (null == str) return ObjectId();\n  return 'string' == typeof str ? ObjectId.createFromHexString(str) : str;\n};\n"]}