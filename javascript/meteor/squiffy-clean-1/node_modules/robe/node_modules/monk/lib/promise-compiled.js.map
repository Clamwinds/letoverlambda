{"version":3,"sources":["promise.js"],"names":[],"mappings":";;;;;AAKA,IAAI,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC;;;;;;AAAC,AAMnC,MAAM,CAAC,OAAO,GAAG,OAAO;;;;;;;;;;;AAAC,AAWzB,SAAS,OAAO,CAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE;AACjC,MAAI,CAAC,GAAG,GAAG,GAAG,CAAC;AACf,MAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACjB,MAAI,CAAC,IAAI,GAAG,IAAI,IAAI,EAAE;;;AAAC,AAGvB,UAAQ,CAAC,IAAI,CAAC,IAAI,CAAC;;;AAAC,AAGpB,MAAI,CAAC,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC;AAC9B,MAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC;AAC3B,MAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC;AAC/B,MAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAC,UAAU,CAAC,CAAC;;;AAAC,AAGhD,MAAI,CAAC,OAAO,GAAG,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACrD,MAAI,CAAC,OAAO,GAAG,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACrD,MAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;CACpD;;;;;;AAAA,AAMD,OAAO,CAAC,OAAO,GAAG,SAAS,CAAC;AAC5B,OAAO,CAAC,OAAO,GAAG,OAAO;;;;;;AAAC,AAM1B,OAAO,CAAC,SAAS,CAAC,SAAS,GAAG,QAAQ,CAAC,SAAS;;;;;;;;AAAC,AAQjD,OAAO,CAAC,SAAS,CAAC,IAAI,GAAG,UAAU,EAAE,EAAE;AACrC,MAAI,EAAE,EAAE;AACN,QAAI,CAAC,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;GACrB;AACD,SAAO,IAAI,CAAC;CACb;;;;;;;;AAAC,AAQF,OAAO,CAAC,SAAS,CAAC,OAAO,GAAG,YAAU;AACpC,MAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AACrB,MAAI,IAAI,GAAG,IAAI,CAAC;AAChB,SAAO,CAAC,QAAQ,CAAC,YAAU;;AAEzB,WAAO,IAAI,CAAC,KAAK,CAAC;GACnB,CAAC,CAAC;CACJ,CAAC","file":"promise-compiled.js","sourcesContent":["\n/**\n * Module dependencies.\n */\n\nvar MPromise = require('mpromise');\n\n/**\n * Module exports.\n */\n\nmodule.exports = Promise;\n\n/**\n * Promise constructor.\n *\n * @param {Collection} collection\n * @param {String} type\n * @param {Object} query options\n * @api public\n */\n\nfunction Promise (col, type, opts) {\n  this.col = col;\n  this.type = type;\n  this.opts = opts || {};\n\n  // MPromise constructor\n  MPromise.call(this);\n\n  // Compability methods\n  this.success = this.onFulfill;\n  this.error = this.onReject;\n  this.complete = this.onResolve;\n  this.onResolve(this.emit.bind(this,'complete'));\n\n  // for practical purposes\n  this.resolve = MPromise.prototype.resolve.bind(this);\n  this.fulfill = MPromise.prototype.fulfill.bind(this);\n  this.reject = MPromise.prototype.reject.bind(this);\n}\n\n/*!\n * event names\n */\n\nPromise.SUCCESS = 'success';\nPromise.FAILURE = 'error';\n\n/**\n * Inherits from MPromise.\n */\n\nPromise.prototype.__proto__ = MPromise.prototype;\n\n/**\n * Each method\n *\n * @api public\n */\n\nPromise.prototype.each = function (fn) {\n  if (fn) {\n    this.on('each', fn);\n  }\n  return this;\n};\n\n/**\n * Destroys the promise.\n *\n * @api public\n */\n\nPromise.prototype.destroy = function(){\n  this.emit('destroy');\n  var self = this;\n  process.nextTick(function(){\n    // null the query ref\n    delete self.query;\n  });\n};\n"]}