{"version":3,"sources":["bson.js"],"names":[],"mappings":"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E,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAA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","file":"bson-compiled.js","sourcesContent":["var Long = require('./long').Long\n  , Double = require('./double').Double\n  , Timestamp = require('./timestamp').Timestamp\n  , ObjectID = require('./objectid').ObjectID\n  , Symbol = require('./symbol').Symbol\n  , Code = require('./code').Code\n  , MinKey = require('./min_key').MinKey\n  , MaxKey = require('./max_key').MaxKey\n  , DBRef = require('./db_ref').DBRef\n  , Binary = require('./binary').Binary\n  , BinaryParser = require('./binary_parser').BinaryParser\n  , writeIEEE754 = require('./float_parser').writeIEEE754\n  , readIEEE754 = require('./float_parser').readIEEE754\n\n// To ensure that 0.4 of node works correctly\nvar isDate = function isDate(d) {\n  return typeof d === 'object' && Object.prototype.toString.call(d) === '[object Date]';\n}\n\n/**\n * Create a new BSON instance\n *\n * @class Represents the BSON Parser\n * @return {BSON} instance of BSON Parser.\n */\nfunction BSON () {};\n\n/**\n * @ignore\n * @api private\n */\n// BSON MAX VALUES\nBSON.BSON_INT32_MAX = 0x7FFFFFFF;\nBSON.BSON_INT32_MIN = -0x80000000;\n\nBSON.BSON_INT64_MAX = Math.pow(2, 63) - 1;\nBSON.BSON_INT64_MIN = -Math.pow(2, 63);\n\n// JS MAX PRECISE VALUES\nBSON.JS_INT_MAX = 0x20000000000000;  // Any integer up to 2^53 can be precisely represented by a double.\nBSON.JS_INT_MIN = -0x20000000000000;  // Any integer down to -2^53 can be precisely represented by a double.\n\n// Internal long versions\nvar JS_INT_MAX_LONG = Long.fromNumber(0x20000000000000);  // Any integer up to 2^53 can be precisely represented by a double.\nvar JS_INT_MIN_LONG = Long.fromNumber(-0x20000000000000);  // Any integer down to -2^53 can be precisely represented by a double.\n\n/**\n * Number BSON Type\n *\n * @classconstant BSON_DATA_NUMBER\n **/\nBSON.BSON_DATA_NUMBER = 1;\n/**\n * String BSON Type\n *\n * @classconstant BSON_DATA_STRING\n **/\nBSON.BSON_DATA_STRING = 2;\n/**\n * Object BSON Type\n *\n * @classconstant BSON_DATA_OBJECT\n **/\nBSON.BSON_DATA_OBJECT = 3;\n/**\n * Array BSON Type\n *\n * @classconstant BSON_DATA_ARRAY\n **/\nBSON.BSON_DATA_ARRAY = 4;\n/**\n * Binary BSON Type\n *\n * @classconstant BSON_DATA_BINARY\n **/\nBSON.BSON_DATA_BINARY = 5;\n/**\n * ObjectID BSON Type\n *\n * @classconstant BSON_DATA_OID\n **/\nBSON.BSON_DATA_OID = 7;\n/**\n * Boolean BSON Type\n *\n * @classconstant BSON_DATA_BOOLEAN\n **/\nBSON.BSON_DATA_BOOLEAN = 8;\n/**\n * Date BSON Type\n *\n * @classconstant BSON_DATA_DATE\n **/\nBSON.BSON_DATA_DATE = 9;\n/**\n * null BSON Type\n *\n * @classconstant BSON_DATA_NULL\n **/\nBSON.BSON_DATA_NULL = 10;\n/**\n * RegExp BSON Type\n *\n * @classconstant BSON_DATA_REGEXP\n **/\nBSON.BSON_DATA_REGEXP = 11;\n/**\n * Code BSON Type\n *\n * @classconstant BSON_DATA_CODE\n **/\nBSON.BSON_DATA_CODE = 13;\n/**\n * Symbol BSON Type\n *\n * @classconstant BSON_DATA_SYMBOL\n **/\nBSON.BSON_DATA_SYMBOL = 14;\n/**\n * Code with Scope BSON Type\n *\n * @classconstant BSON_DATA_CODE_W_SCOPE\n **/\nBSON.BSON_DATA_CODE_W_SCOPE = 15;\n/**\n * 32 bit Integer BSON Type\n *\n * @classconstant BSON_DATA_INT\n **/\nBSON.BSON_DATA_INT = 16;\n/**\n * Timestamp BSON Type\n *\n * @classconstant BSON_DATA_TIMESTAMP\n **/\nBSON.BSON_DATA_TIMESTAMP = 17;\n/**\n * Long BSON Type\n *\n * @classconstant BSON_DATA_LONG\n **/\nBSON.BSON_DATA_LONG = 18;\n/**\n * MinKey BSON Type\n *\n * @classconstant BSON_DATA_MIN_KEY\n **/\nBSON.BSON_DATA_MIN_KEY = 0xff;\n/**\n * MaxKey BSON Type\n *\n * @classconstant BSON_DATA_MAX_KEY\n **/\nBSON.BSON_DATA_MAX_KEY = 0x7f;\n\n/**\n * Binary Default Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_DEFAULT\n **/\nBSON.BSON_BINARY_SUBTYPE_DEFAULT = 0;\n/**\n * Binary Function Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_FUNCTION\n **/\nBSON.BSON_BINARY_SUBTYPE_FUNCTION = 1;\n/**\n * Binary Byte Array Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_BYTE_ARRAY\n **/\nBSON.BSON_BINARY_SUBTYPE_BYTE_ARRAY = 2;\n/**\n * Binary UUID Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_UUID\n **/\nBSON.BSON_BINARY_SUBTYPE_UUID = 3;\n/**\n * Binary MD5 Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_MD5\n **/\nBSON.BSON_BINARY_SUBTYPE_MD5 = 4;\n/**\n * Binary User Defined Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_USER_DEFINED\n **/\nBSON.BSON_BINARY_SUBTYPE_USER_DEFINED = 128;\n\n/**\n * Calculate the bson size for a passed in Javascript object.\n *\n * @param {Object} object the Javascript object to calculate the BSON byte size for.\n * @param {Boolean} [serializeFunctions] serialize all functions in the object **(default:false)**.\n * @return {Number} returns the number of bytes the BSON object will take up.\n * @api public\n */\nBSON.calculateObjectSize = function calculateObjectSize(object, serializeFunctions) {\n  var totalLength = (4 + 1);\n\n  if(Array.isArray(object)) {\n    for(var i = 0; i < object.length; i++) {\n      totalLength += calculateElement(i.toString(), object[i], serializeFunctions)\n    }\n  } else {\n\t\t// If we have toBSON defined, override the current object\n\t\tif(object.toBSON) {\n\t\t\tobject = object.toBSON();\n\t\t}\n\n\t\t// Calculate size\n    for(var key in object) {\n      totalLength += calculateElement(key, object[key], serializeFunctions)\n    }\n  }\n\n  return totalLength;\n}\n\n/**\n * @ignore\n * @api private\n */\nfunction calculateElement(name, value, serializeFunctions) {\n  var isBuffer = typeof Buffer !== 'undefined';\n\n  switch(typeof value) {\n    case 'string':\n      return 1 + (!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1 + 4 + (!isBuffer ? numberOfBytes(value) : Buffer.byteLength(value, 'utf8')) + 1;\n    case 'number':\n      if(Math.floor(value) === value && value >= BSON.JS_INT_MIN && value <= BSON.JS_INT_MAX) {\n        if(value >= BSON.BSON_INT32_MIN && value <= BSON.BSON_INT32_MAX) { // 32 bit\n          return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (4 + 1);\n        } else {\n          return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (8 + 1);\n        }\n      } else {  // 64 bit\n        return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (8 + 1);\n      }\n    case 'undefined':\n      return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (1);\n    case 'boolean':\n      return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (1 + 1);\n    case 'object':\n      if(value == null || value instanceof MinKey || value instanceof MaxKey || value['_bsontype'] == 'MinKey' || value['_bsontype'] == 'MaxKey') {\n        return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (1);\n      } else if(value instanceof ObjectID || value['_bsontype'] == 'ObjectID') {\n        return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (12 + 1);\n      } else if(value instanceof Date || isDate(value)) {\n        return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (8 + 1);\n      } else if(typeof Buffer !== 'undefined' && Buffer.isBuffer(value)) {\n        return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (1 + 4 + 1) + value.length;\n      } else if(value instanceof Long || value instanceof Double || value instanceof Timestamp\n          || value['_bsontype'] == 'Long' || value['_bsontype'] == 'Double' || value['_bsontype'] == 'Timestamp') {\n        return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (8 + 1);\n      } else if(value instanceof Code || value['_bsontype'] == 'Code') {\n        // Calculate size depending on the availability of a scope\n        if(value.scope != null && Object.keys(value.scope).length > 0) {\n          return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + 1 + 4 + 4 + (!isBuffer ? numberOfBytes(value.code.toString()) : Buffer.byteLength(value.code.toString(), 'utf8')) + 1 + BSON.calculateObjectSize(value.scope, serializeFunctions);\n        } else {\n          return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + 1 + 4 + (!isBuffer ? numberOfBytes(value.code.toString()) : Buffer.byteLength(value.code.toString(), 'utf8')) + 1;\n        }\n      } else if(value instanceof Binary || value['_bsontype'] == 'Binary') {\n        // Check what kind of subtype we have\n        if(value.sub_type == Binary.SUBTYPE_BYTE_ARRAY) {\n          return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (value.position + 1 + 4 + 1 + 4);\n        } else {\n          return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + (value.position + 1 + 4 + 1);\n        }\n      } else if(value instanceof Symbol || value['_bsontype'] == 'Symbol') {\n        return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + ((!isBuffer ? numberOfBytes(value.value) : Buffer.byteLength(value.value, 'utf8')) + 4 + 1 + 1);\n      } else if(value instanceof DBRef || value['_bsontype'] == 'DBRef') {\n        // Set up correct object for serialization\n        var ordered_values = {\n            '$ref': value.namespace\n          , '$id' : value.oid\n        };\n\n        // Add db reference if it exists\n        if(null != value.db) {\n          ordered_values['$db'] = value.db;\n        }\n\n        return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + 1 + BSON.calculateObjectSize(ordered_values, serializeFunctions);\n      } else if(value instanceof RegExp || Object.prototype.toString.call(value) === '[object RegExp]') {\n          return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + 1 + (!isBuffer ? numberOfBytes(value.source) : Buffer.byteLength(value.source, 'utf8')) + 1\n            + (value.global ? 1 : 0) + (value.ignoreCase ? 1 : 0) + (value.multiline ? 1 : 0) + 1\n      } else {\n        return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + BSON.calculateObjectSize(value, serializeFunctions) + 1;\n      }\n    case 'function':\n      // WTF for 0.4.X where typeof /someregexp/ === 'function'\n      if(value instanceof RegExp || Object.prototype.toString.call(value) === '[object RegExp]' || String.call(value) == '[object RegExp]') {\n        return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + 1 + (!isBuffer ? numberOfBytes(value.source) : Buffer.byteLength(value.source, 'utf8')) + 1\n          + (value.global ? 1 : 0) + (value.ignoreCase ? 1 : 0) + (value.multiline ? 1 : 0) + 1\n      } else {\n        if(serializeFunctions && value.scope != null && Object.keys(value.scope).length > 0) {\n          return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + 1 + 4 + 4 + (!isBuffer ? numberOfBytes(value.toString()) : Buffer.byteLength(value.toString(), 'utf8')) + 1 + BSON.calculateObjectSize(value.scope, serializeFunctions);\n        } else if(serializeFunctions) {\n          return (name != null ? ((!isBuffer ? numberOfBytes(name) : Buffer.byteLength(name, 'utf8')) + 1) : 0) + 1 + 4 + (!isBuffer ? numberOfBytes(value.toString()) : Buffer.byteLength(value.toString(), 'utf8')) + 1;\n        }\n      }\n  }\n\n  return 0;\n}\n\n/**\n * Serialize a Javascript object using a predefined Buffer and index into the buffer, useful when pre-allocating the space for serialization.\n *\n * @param {Object} object the Javascript object to serialize.\n * @param {Boolean} checkKeys the serializer will check if keys are valid.\n * @param {Buffer} buffer the Buffer you pre-allocated to store the serialized BSON object.\n * @param {Number} index the index in the buffer where we wish to start serializing into.\n * @param {Boolean} serializeFunctions serialize the javascript functions **(default:false)**.\n * @return {Number} returns the new write index in the Buffer.\n * @api public\n */\nBSON.serializeWithBufferAndIndex = function serializeWithBufferAndIndex(object, checkKeys, buffer, index, serializeFunctions) {\n  // Default setting false\n  serializeFunctions = serializeFunctions == null ? false : serializeFunctions;\n  // Write end information (length of the object)\n  var size = buffer.length;\n  // Write the size of the object\n  buffer[index++] = size & 0xff;\n  buffer[index++] = (size >> 8) & 0xff;\n  buffer[index++] = (size >> 16) & 0xff;\n  buffer[index++] = (size >> 24) & 0xff;\n  return serializeObject(object, checkKeys, buffer, index, serializeFunctions) - 1;\n}\n\n/**\n * @ignore\n * @api private\n */\nvar serializeObject = function(object, checkKeys, buffer, index, serializeFunctions) {\n  // Process the object\n  if(Array.isArray(object)) {\n    for(var i = 0; i < object.length; i++) {\n      index = packElement(i.toString(), object[i], checkKeys, buffer, index, serializeFunctions);\n    }\n  } else {\n\t\t// If we have toBSON defined, override the current object\n\t\tif(object.toBSON) {\n\t\t\tobject = object.toBSON();\n\t\t}\n\n\t\t// Serialize the object\n    for(var key in object) {\n      // Check the key and throw error if it's illegal\n      if (key != '$db' && key != '$ref' && key != '$id') {\n        // dollars and dots ok\n        BSON.checkKey(key, !checkKeys);\n      }\n\n      // Pack the element\n      index = packElement(key, object[key], checkKeys, buffer, index, serializeFunctions);\n    }\n  }\n\n  // Write zero\n  buffer[index++] = 0;\n  return index;\n}\n\nvar stringToBytes = function(str) {\n  var ch, st, re = [];\n  for (var i = 0; i < str.length; i++ ) {\n    ch = str.charCodeAt(i);  // get char\n    st = [];                 // set up \"stack\"\n    do {\n      st.push( ch & 0xFF );  // push byte to stack\n      ch = ch >> 8;          // shift value down by 1 byte\n    }\n    while ( ch );\n    // add stack contents to result\n    // done because chars have \"wrong\" endianness\n    re = re.concat( st.reverse() );\n  }\n  // return an array of bytes\n  return re;\n}\n\nvar numberOfBytes = function(str) {\n  var ch, st, re = 0;\n  for (var i = 0; i < str.length; i++ ) {\n    ch = str.charCodeAt(i);  // get char\n    st = [];                 // set up \"stack\"\n    do {\n      st.push( ch & 0xFF );  // push byte to stack\n      ch = ch >> 8;          // shift value down by 1 byte\n    }\n    while ( ch );\n    // add stack contents to result\n    // done because chars have \"wrong\" endianness\n    re = re + st.length;\n  }\n  // return an array of bytes\n  return re;\n}\n\n/**\n * @ignore\n * @api private\n */\nvar writeToTypedArray = function(buffer, string, index) {\n  var bytes = stringToBytes(string);\n  for(var i = 0; i < bytes.length; i++) {\n    buffer[index + i] = bytes[i];\n  }\n  return bytes.length;\n}\n\n/**\n * @ignore\n * @api private\n */\nvar supportsBuffer = typeof Buffer != 'undefined';\n\n/**\n * @ignore\n * @api private\n */\nvar packElement = function(name, value, checkKeys, buffer, index, serializeFunctions) {\n  var startIndex = index;\n\n  switch(typeof value) {\n    case 'string':\n      // console.log(\"+++++++++++ index string:: \" + index)\n      // Encode String type\n      buffer[index++] = BSON.BSON_DATA_STRING;\n      // Number of written bytes\n      var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n      // Encode the name\n      index = index + numberOfWrittenBytes + 1;\n      buffer[index - 1] = 0;\n\n      // Calculate size\n      var size = supportsBuffer ? Buffer.byteLength(value) + 1 : numberOfBytes(value) + 1;\n      // console.log(\"====== key :: \" + name + \" size ::\" + size)\n      // Write the size of the string to buffer\n      buffer[index + 3] = (size >> 24) & 0xff;\n      buffer[index + 2] = (size >> 16) & 0xff;\n      buffer[index + 1] = (size >> 8) & 0xff;\n      buffer[index] = size & 0xff;\n      // Ajust the index\n      index = index + 4;\n      // Write the string\n      supportsBuffer ? buffer.write(value, index, 'utf8') : writeToTypedArray(buffer, value, index);\n      // Update index\n      index = index + size - 1;\n      // Write zero\n      buffer[index++] = 0;\n      // Return index\n      return index;\n    case 'number':\n      // We have an integer value\n      if(Math.floor(value) === value && value >= BSON.JS_INT_MIN && value <= BSON.JS_INT_MAX) {\n        // If the value fits in 32 bits encode as int, if it fits in a double\n        // encode it as a double, otherwise long\n        if(value >= BSON.BSON_INT32_MIN && value <= BSON.BSON_INT32_MAX) {\n          // Set int type 32 bits or less\n          buffer[index++] = BSON.BSON_DATA_INT;\n          // Number of written bytes\n          var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n          // Encode the name\n          index = index + numberOfWrittenBytes + 1;\n          buffer[index - 1] = 0;\n          // Write the int value\n          buffer[index++] = value & 0xff;\n          buffer[index++] = (value >> 8) & 0xff;\n          buffer[index++] = (value >> 16) & 0xff;\n          buffer[index++] = (value >> 24) & 0xff;\n        } else if(value >= BSON.JS_INT_MIN && value <= BSON.JS_INT_MAX) {\n          // Encode as double\n          buffer[index++] = BSON.BSON_DATA_NUMBER;\n          // Number of written bytes\n          var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n          // Encode the name\n          index = index + numberOfWrittenBytes + 1;\n          buffer[index - 1] = 0;\n          // Write float\n          writeIEEE754(buffer, value, index, 'little', 52, 8);\n          // Ajust index\n          index = index + 8;\n        } else {\n          // Set long type\n          buffer[index++] = BSON.BSON_DATA_LONG;\n          // Number of written bytes\n          var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n          // Encode the name\n          index = index + numberOfWrittenBytes + 1;\n          buffer[index - 1] = 0;\n          var longVal = Long.fromNumber(value);\n          var lowBits = longVal.getLowBits();\n          var highBits = longVal.getHighBits();\n          // Encode low bits\n          buffer[index++] = lowBits & 0xff;\n          buffer[index++] = (lowBits >> 8) & 0xff;\n          buffer[index++] = (lowBits >> 16) & 0xff;\n          buffer[index++] = (lowBits >> 24) & 0xff;\n          // Encode high bits\n          buffer[index++] = highBits & 0xff;\n          buffer[index++] = (highBits >> 8) & 0xff;\n          buffer[index++] = (highBits >> 16) & 0xff;\n          buffer[index++] = (highBits >> 24) & 0xff;\n        }\n      } else {\n        // Encode as double\n        buffer[index++] = BSON.BSON_DATA_NUMBER;\n        // Number of written bytes\n        var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n        // Encode the name\n        index = index + numberOfWrittenBytes + 1;\n        buffer[index - 1] = 0;\n        // Write float\n        writeIEEE754(buffer, value, index, 'little', 52, 8);\n        // Ajust index\n        index = index + 8;\n      }\n\n      return index;\n    case 'undefined':\n      // Set long type\n      buffer[index++] = BSON.BSON_DATA_NULL;\n      // Number of written bytes\n      var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n      // Encode the name\n      index = index + numberOfWrittenBytes + 1;\n      buffer[index - 1] = 0;\n      return index;\n    case 'boolean':\n      // Write the type\n      buffer[index++] = BSON.BSON_DATA_BOOLEAN;\n      // Number of written bytes\n      var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n      // Encode the name\n      index = index + numberOfWrittenBytes + 1;\n      buffer[index - 1] = 0;\n      // Encode the boolean value\n      buffer[index++] = value ? 1 : 0;\n      return index;\n    case 'object':\n      if(value === null || value instanceof MinKey || value instanceof MaxKey\n          || value['_bsontype'] == 'MinKey' || value['_bsontype'] == 'MaxKey') {\n        // Write the type of either min or max key\n        if(value === null) {\n          buffer[index++] = BSON.BSON_DATA_NULL;\n        } else if(value instanceof MinKey) {\n          buffer[index++] = BSON.BSON_DATA_MIN_KEY;\n        } else {\n          buffer[index++] = BSON.BSON_DATA_MAX_KEY;\n        }\n\n        // Number of written bytes\n        var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n        // Encode the name\n        index = index + numberOfWrittenBytes + 1;\n        buffer[index - 1] = 0;\n        return index;\n      } else if(value instanceof ObjectID || value['_bsontype'] == 'ObjectID') {\n        // console.log(\"+++++++++++ index OBJECTID:: \" + index)\n        // Write the type\n        buffer[index++] = BSON.BSON_DATA_OID;\n        // Number of written bytes\n        var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n        // Encode the name\n        index = index + numberOfWrittenBytes + 1;\n        buffer[index - 1] = 0;\n\n        // Write objectid\n        supportsBuffer ? buffer.write(value.id, index, 'binary') : writeToTypedArray(buffer, value.id, index);\n        // Ajust index\n        index = index + 12;\n        return index;\n      } else if(value instanceof Date || isDate(value)) {\n        // Write the type\n        buffer[index++] = BSON.BSON_DATA_DATE;\n        // Number of written bytes\n        var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n        // Encode the name\n        index = index + numberOfWrittenBytes + 1;\n        buffer[index - 1] = 0;\n\n        // Write the date\n        var dateInMilis = Long.fromNumber(value.getTime());\n        var lowBits = dateInMilis.getLowBits();\n        var highBits = dateInMilis.getHighBits();\n        // Encode low bits\n        buffer[index++] = lowBits & 0xff;\n        buffer[index++] = (lowBits >> 8) & 0xff;\n        buffer[index++] = (lowBits >> 16) & 0xff;\n        buffer[index++] = (lowBits >> 24) & 0xff;\n        // Encode high bits\n        buffer[index++] = highBits & 0xff;\n        buffer[index++] = (highBits >> 8) & 0xff;\n        buffer[index++] = (highBits >> 16) & 0xff;\n        buffer[index++] = (highBits >> 24) & 0xff;\n        return index;\n      } else if(typeof Buffer !== 'undefined' && Buffer.isBuffer(value)) {\n        // Write the type\n        buffer[index++] = BSON.BSON_DATA_BINARY;\n        // Number of written bytes\n        var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n        // Encode the name\n        index = index + numberOfWrittenBytes + 1;\n        buffer[index - 1] = 0;\n        // Get size of the buffer (current write point)\n        var size = value.length;\n        // Write the size of the string to buffer\n        buffer[index++] = size & 0xff;\n        buffer[index++] = (size >> 8) & 0xff;\n        buffer[index++] = (size >> 16) & 0xff;\n        buffer[index++] = (size >> 24) & 0xff;\n        // Write the default subtype\n        buffer[index++] = BSON.BSON_BINARY_SUBTYPE_DEFAULT;\n        // Copy the content form the binary field to the buffer\n        value.copy(buffer, index, 0, size);\n        // Adjust the index\n        index = index + size;\n        return index;\n      } else if(value instanceof Long || value instanceof Timestamp || value['_bsontype'] == 'Long' || value['_bsontype'] == 'Timestamp') {\n        // Write the type\n        buffer[index++] = value instanceof Long ? BSON.BSON_DATA_LONG : BSON.BSON_DATA_TIMESTAMP;\n        // Number of written bytes\n        var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n        // Encode the name\n        index = index + numberOfWrittenBytes + 1;\n        buffer[index - 1] = 0;\n        // Write the date\n        var lowBits = value.getLowBits();\n        var highBits = value.getHighBits();\n        // Encode low bits\n        buffer[index++] = lowBits & 0xff;\n        buffer[index++] = (lowBits >> 8) & 0xff;\n        buffer[index++] = (lowBits >> 16) & 0xff;\n        buffer[index++] = (lowBits >> 24) & 0xff;\n        // Encode high bits\n        buffer[index++] = highBits & 0xff;\n        buffer[index++] = (highBits >> 8) & 0xff;\n        buffer[index++] = (highBits >> 16) & 0xff;\n        buffer[index++] = (highBits >> 24) & 0xff;\n        return index;\n      } else if(value instanceof Double || value['_bsontype'] == 'Double') {\n        // Encode as double\n        buffer[index++] = BSON.BSON_DATA_NUMBER;\n        // Number of written bytes\n        var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n        // Encode the name\n        index = index + numberOfWrittenBytes + 1;\n        buffer[index - 1] = 0;\n        // Write float\n        writeIEEE754(buffer, value, index, 'little', 52, 8);\n        // Ajust index\n        index = index + 8;\n        return index;\n      } else if(value instanceof Code || value['_bsontype'] == 'Code') {\n        if(value.scope != null && Object.keys(value.scope).length > 0) {\n          // Write the type\n          buffer[index++] = BSON.BSON_DATA_CODE_W_SCOPE;\n          // Number of written bytes\n          var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n          // Encode the name\n          index = index + numberOfWrittenBytes + 1;\n          buffer[index - 1] = 0;\n          // Calculate the scope size\n          var scopeSize = BSON.calculateObjectSize(value.scope, serializeFunctions);\n          // Function string\n          var functionString = value.code.toString();\n          // Function Size\n          var codeSize = supportsBuffer ? Buffer.byteLength(functionString) + 1 : numberOfBytes(functionString) + 1;\n\n          // Calculate full size of the object\n          var totalSize = 4 + codeSize + scopeSize + 4;\n\n          // Write the total size of the object\n          buffer[index++] = totalSize & 0xff;\n          buffer[index++] = (totalSize >> 8) & 0xff;\n          buffer[index++] = (totalSize >> 16) & 0xff;\n          buffer[index++] = (totalSize >> 24) & 0xff;\n\n          // Write the size of the string to buffer\n          buffer[index++] = codeSize & 0xff;\n          buffer[index++] = (codeSize >> 8) & 0xff;\n          buffer[index++] = (codeSize >> 16) & 0xff;\n          buffer[index++] = (codeSize >> 24) & 0xff;\n\n          // Write the string\n          supportsBuffer ? buffer.write(functionString, index, 'utf8') : writeToTypedArray(buffer, functionString, index);\n          // Update index\n          index = index + codeSize - 1;\n          // Write zero\n          buffer[index++] = 0;\n          // Serialize the scope object\n          var scopeObjectBuffer = supportsBuffer ? new Buffer(scopeSize) : new Uint8Array(new ArrayBuffer(scopeSize));\n          // Execute the serialization into a seperate buffer\n          serializeObject(value.scope, checkKeys, scopeObjectBuffer, 0, serializeFunctions);\n\n          // Adjusted scope Size (removing the header)\n          var scopeDocSize = scopeSize;\n          // Write scope object size\n          buffer[index++] = scopeDocSize & 0xff;\n          buffer[index++] = (scopeDocSize >> 8) & 0xff;\n          buffer[index++] = (scopeDocSize >> 16) & 0xff;\n          buffer[index++] = (scopeDocSize >> 24) & 0xff;\n\n          // Write the scopeObject into the buffer\n          supportsBuffer ? scopeObjectBuffer.copy(buffer, index, 0, scopeSize) : buffer.set(scopeObjectBuffer, index);\n          // Adjust index, removing the empty size of the doc (5 bytes 0000000005)\n          index = index + scopeDocSize - 5;\n          // Write trailing zero\n          buffer[index++] = 0;\n          return index\n        } else {\n          buffer[index++] = BSON.BSON_DATA_CODE;\n          // Number of written bytes\n          var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n          // Encode the name\n          index = index + numberOfWrittenBytes + 1;\n          buffer[index - 1] = 0;\n          // Function string\n          var functionString = value.code.toString();\n          // Function Size\n          var size = supportsBuffer ? Buffer.byteLength(functionString) + 1 : numberOfBytes(functionString) + 1;\n          // Write the size of the string to buffer\n          buffer[index++] = size & 0xff;\n          buffer[index++] = (size >> 8) & 0xff;\n          buffer[index++] = (size >> 16) & 0xff;\n          buffer[index++] = (size >> 24) & 0xff;\n          // Write the string\n          supportsBuffer ? buffer.write(functionString, index, 'utf8') : writeToTypedArray(buffer, functionString, index);\n          // Update index\n          index = index + size - 1;\n          // Write zero\n          buffer[index++] = 0;\n          return index;\n        }\n      } else if(value instanceof Binary || value['_bsontype'] == 'Binary') {\n        // Write the type\n        buffer[index++] = BSON.BSON_DATA_BINARY;\n        // Number of written bytes\n        var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n        // Encode the name\n        index = index + numberOfWrittenBytes + 1;\n        buffer[index - 1] = 0;\n        // Extract the buffer\n        var data = value.value(true);\n        // Calculate size\n        var size = value.position;\n        // Write the size of the string to buffer\n        buffer[index++] = size & 0xff;\n        buffer[index++] = (size >> 8) & 0xff;\n        buffer[index++] = (size >> 16) & 0xff;\n        buffer[index++] = (size >> 24) & 0xff;\n        // Write the subtype to the buffer\n        buffer[index++] = value.sub_type;\n\n        // If we have binary type 2 the 4 first bytes are the size\n        if(value.sub_type == Binary.SUBTYPE_BYTE_ARRAY) {\n          buffer[index++] = size & 0xff;\n          buffer[index++] = (size >> 8) & 0xff;\n          buffer[index++] = (size >> 16) & 0xff;\n          buffer[index++] = (size >> 24) & 0xff;\n        }\n\n        // Write the data to the object\n        supportsBuffer ? data.copy(buffer, index, 0, value.position) : buffer.set(data, index);\n        // Ajust index\n        index = index + value.position;\n        return index;\n      } else if(value instanceof Symbol || value['_bsontype'] == 'Symbol') {\n        // Write the type\n        buffer[index++] = BSON.BSON_DATA_SYMBOL;\n        // Number of written bytes\n        var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n        // Encode the name\n        index = index + numberOfWrittenBytes + 1;\n        buffer[index - 1] = 0;\n        // Calculate size\n        var size = supportsBuffer ? Buffer.byteLength(value.value) + 1 : numberOfBytes(value.value) + 1;\n        // Write the size of the string to buffer\n        buffer[index++] = size & 0xff;\n        buffer[index++] = (size >> 8) & 0xff;\n        buffer[index++] = (size >> 16) & 0xff;\n        buffer[index++] = (size >> 24) & 0xff;\n        // Write the string\n        buffer.write(value.value, index, 'utf8');\n        // Update index\n        index = index + size - 1;\n        // Write zero\n        buffer[index++] = 0x00;\n        return index;\n      } else if(value instanceof DBRef || value['_bsontype'] == 'DBRef') {\n        // Write the type\n        buffer[index++] = BSON.BSON_DATA_OBJECT;\n        // Number of written bytes\n        var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n        // Encode the name\n        index = index + numberOfWrittenBytes + 1;\n        buffer[index - 1] = 0;\n        // Set up correct object for serialization\n        var ordered_values = {\n            '$ref': value.namespace\n          , '$id' : value.oid\n        };\n\n        // Add db reference if it exists\n        if(null != value.db) {\n          ordered_values['$db'] = value.db;\n        }\n\n        // Message size\n        var size = BSON.calculateObjectSize(ordered_values, serializeFunctions);\n        // Serialize the object\n        var endIndex = BSON.serializeWithBufferAndIndex(ordered_values, checkKeys, buffer, index, serializeFunctions);\n        // Write the size of the string to buffer\n        buffer[index++] = size & 0xff;\n        buffer[index++] = (size >> 8) & 0xff;\n        buffer[index++] = (size >> 16) & 0xff;\n        buffer[index++] = (size >> 24) & 0xff;\n        // Write zero for object\n        buffer[endIndex++] = 0x00;\n        // Return the end index\n        return endIndex;\n      } else if(value instanceof RegExp || Object.prototype.toString.call(value) === '[object RegExp]') {\n        // Write the type\n        buffer[index++] = BSON.BSON_DATA_REGEXP;\n        // Number of written bytes\n        var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n        // Encode the name\n        index = index + numberOfWrittenBytes + 1;\n        buffer[index - 1] = 0;\n\n        // Write the regular expression string\n        supportsBuffer ? buffer.write(value.source, index, 'utf8') : writeToTypedArray(buffer, value.source, index);\n        // Adjust the index\n        index = index + (supportsBuffer ? Buffer.byteLength(value.source) : numberOfBytes(value.source));\n        // Write zero\n        buffer[index++] = 0x00;\n        // Write the parameters\n        if(value.global) buffer[index++] = 0x73; // s\n        if(value.ignoreCase) buffer[index++] = 0x69; // i\n        if(value.multiline) buffer[index++] = 0x6d; // m\n        // Add ending zero\n        buffer[index++] = 0x00;\n        return index;\n      } else {\n        // Write the type\n        buffer[index++] = Array.isArray(value) ? BSON.BSON_DATA_ARRAY : BSON.BSON_DATA_OBJECT;\n        // Number of written bytes\n        var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n        // Adjust the index\n        index = index + numberOfWrittenBytes + 1;\n        buffer[index - 1] = 0;\n\t      var endIndex = serializeObject(value, checkKeys, buffer, index + 4, serializeFunctions);\n        // Write size\n        var size = endIndex - index;\n        // Write the size of the string to buffer\n        buffer[index++] = size & 0xff;\n        buffer[index++] = (size >> 8) & 0xff;\n        buffer[index++] = (size >> 16) & 0xff;\n        buffer[index++] = (size >> 24) & 0xff;\n        return endIndex;\n      }\n    case 'function':\n      // WTF for 0.4.X where typeof /someregexp/ === 'function'\n      if(value instanceof RegExp || Object.prototype.toString.call(value) === '[object RegExp]' || String.call(value) == '[object RegExp]') {\n        // Write the type\n        buffer[index++] = BSON.BSON_DATA_REGEXP;\n        // Number of written bytes\n        var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n        // Encode the name\n        index = index + numberOfWrittenBytes + 1;\n        buffer[index - 1] = 0;\n\n        // Write the regular expression string\n        buffer.write(value.source, index, 'utf8');\n        // Adjust the index\n        index = index + (supportsBuffer ? Buffer.byteLength(value.source) : numberOfBytes(value.source));\n        // Write zero\n        buffer[index++] = 0x00;\n        // Write the parameters\n        if(value.global) buffer[index++] = 0x73; // s\n        if(value.ignoreCase) buffer[index++] = 0x69; // i\n        if(value.multiline) buffer[index++] = 0x6d; // m\n        // Add ending zero\n        buffer[index++] = 0x00;\n        return index;\n      } else {\n        if(serializeFunctions && value.scope != null && Object.keys(value.scope).length > 0) {\n          // Write the type\n          buffer[index++] = BSON.BSON_DATA_CODE_W_SCOPE;\n          // Number of written bytes\n          var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n          // Encode the name\n          index = index + numberOfWrittenBytes + 1;\n          buffer[index - 1] = 0;\n          // Calculate the scope size\n          var scopeSize = BSON.calculateObjectSize(value.scope, serializeFunctions);\n          // Function string\n          var functionString = value.toString();\n          // Function Size\n          var codeSize = supportsBuffer ? Buffer.byteLength(functionString) + 1 : numberOfBytes(functionString) + 1;\n\n          // Calculate full size of the object\n          var totalSize = 4 + codeSize + scopeSize;\n\n          // Write the total size of the object\n          buffer[index++] = totalSize & 0xff;\n          buffer[index++] = (totalSize >> 8) & 0xff;\n          buffer[index++] = (totalSize >> 16) & 0xff;\n          buffer[index++] = (totalSize >> 24) & 0xff;\n\n          // Write the size of the string to buffer\n          buffer[index++] = codeSize & 0xff;\n          buffer[index++] = (codeSize >> 8) & 0xff;\n          buffer[index++] = (codeSize >> 16) & 0xff;\n          buffer[index++] = (codeSize >> 24) & 0xff;\n\n          // Write the string\n          supportsBuffer ? buffer.write(functionString, index, 'utf8') : writeToTypedArray(buffer, functionString, index);\n          // Update index\n          index = index + codeSize - 1;\n          // Write zero\n          buffer[index++] = 0;\n          // Serialize the scope object\n          var scopeObjectBuffer = new Buffer(scopeSize);\n          // Execute the serialization into a seperate buffer\n          serializeObject(value.scope, checkKeys, scopeObjectBuffer, 0, serializeFunctions);\n\n          // Adjusted scope Size (removing the header)\n          var scopeDocSize = scopeSize - 4;\n          // Write scope object size\n          buffer[index++] = scopeDocSize & 0xff;\n          buffer[index++] = (scopeDocSize >> 8) & 0xff;\n          buffer[index++] = (scopeDocSize >> 16) & 0xff;\n          buffer[index++] = (scopeDocSize >> 24) & 0xff;\n\n          // Write the scopeObject into the buffer\n          scopeObjectBuffer.copy(buffer, index, 0, scopeSize);\n\n          // Adjust index, removing the empty size of the doc (5 bytes 0000000005)\n          index = index + scopeDocSize - 5;\n          // Write trailing zero\n          buffer[index++] = 0;\n          return index\n        } else if(serializeFunctions) {\n          buffer[index++] = BSON.BSON_DATA_CODE;\n          // Number of written bytes\n          var numberOfWrittenBytes = supportsBuffer ? buffer.write(name, index, 'utf8') : writeToTypedArray(buffer, name, index);\n          // Encode the name\n          index = index + numberOfWrittenBytes + 1;\n          buffer[index - 1] = 0;\n          // Function string\n          var functionString = value.toString();\n          // Function Size\n          var size = supportsBuffer ? Buffer.byteLength(functionString) + 1 : numberOfBytes(functionString) + 1;\n          // Write the size of the string to buffer\n          buffer[index++] = size & 0xff;\n          buffer[index++] = (size >> 8) & 0xff;\n          buffer[index++] = (size >> 16) & 0xff;\n          buffer[index++] = (size >> 24) & 0xff;\n          // Write the string\n          supportsBuffer ? buffer.write(functionString, index, 'utf8') : writeToTypedArray(buffer, functionString, index);\n          // Update index\n          index = index + size - 1;\n          // Write zero\n          buffer[index++] = 0;\n          return index;\n        }\n      }\n  }\n\n  // If no value to serialize\n  return index;\n}\n\n/**\n * Serialize a Javascript object.\n *\n * @param {Object} object the Javascript object to serialize.\n * @param {Boolean} checkKeys the serializer will check if keys are valid.\n * @param {Boolean} asBuffer return the serialized object as a Buffer object **(ignore)**.\n * @param {Boolean} serializeFunctions serialize the javascript functions **(default:false)**.\n * @return {Buffer} returns the Buffer object containing the serialized object.\n * @api public\n */\nBSON.serialize = function(object, checkKeys, asBuffer, serializeFunctions) {\n  // Throw error if we are trying serialize an illegal type\n  if(object == null || typeof object != 'object' || Array.isArray(object)) \n    throw new Error(\"Only javascript objects supported\");\n  \n  // Emoty target buffer\n  var buffer = null;\n  // Calculate the size of the object\n  var size = BSON.calculateObjectSize(object, serializeFunctions);\n  // Fetch the best available type for storing the binary data\n  if(buffer = typeof Buffer != 'undefined') {\n    buffer = new Buffer(size);\n    asBuffer = true;\n  } else if(typeof Uint8Array != 'undefined') {\n    buffer = new Uint8Array(new ArrayBuffer(size));\n  } else {\n    buffer = new Array(size);\n  }\n\n  // If asBuffer is false use typed arrays\n  BSON.serializeWithBufferAndIndex(object, checkKeys, buffer, 0, serializeFunctions);\n  // console.log(\"++++++++++++++++++++++++++++++++++++ OLDJS :: \" + buffer.length)  \n  // console.log(buffer.toString('hex'))\n  // console.log(buffer.toString('ascii'))\n  return buffer;\n}\n\n/**\n * Contains the function cache if we have that enable to allow for avoiding the eval step on each deserialization, comparison is by md5\n *\n * @ignore\n * @api private\n */\nvar functionCache = BSON.functionCache = {};\n\n/**\n * Crc state variables shared by function\n *\n * @ignore\n * @api private\n */\nvar table = [0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA, 0x076DC419, 0x706AF48F, 0xE963A535, 0x9E6495A3, 0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988, 0x09B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91, 0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE, 0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7, 0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC, 0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5, 0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172, 0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B, 0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940, 0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59, 0x26D930AC, 0x51DE003A, 0xC8D75180, 0xBFD06116, 0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F, 0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924, 0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D, 0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A, 0x71B18589, 0x06B6B51F, 0x9FBFE4A5, 0xE8B8D433, 0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818, 0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01, 0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E, 0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457, 0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA, 0xFCB9887C, 0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65, 0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2, 0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB, 0x4369E96A, 0x346ED9FC, 0xAD678846, 0xDA60B8D0, 0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9, 0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086, 0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F, 0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4, 0x59B33D17, 0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD, 0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A, 0xEAD54739, 0x9DD277AF, 0x04DB2615, 0x73DC1683, 0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8, 0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1, 0xF00F9344, 0x8708A3D2, 0x1E01F268, 0x6906C2FE, 0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7, 0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC, 0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5, 0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252, 0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B, 0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60, 0xDF60EFC3, 0xA867DF55, 0x316E8EEF, 0x4669BE79, 0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236, 0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F, 0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04, 0xC2D7FFA7, 0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D, 0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A, 0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713, 0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38, 0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21, 0x86D3D2D4, 0xF1D4E242, 0x68DDB3F8, 0x1FDA836E, 0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777, 0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C, 0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45, 0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2, 0xA7672661, 0xD06016F7, 0x4969474D, 0x3E6E77DB, 0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0, 0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9, 0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6, 0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF, 0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94, 0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D];\n\n/**\n * CRC32 hash method, Fast and enough versitility for our usage\n *\n * @ignore\n * @api private\n */\nvar crc32 =  function(string, start, end) {\n  var crc = 0\n  var x = 0;\n  var y = 0;\n  crc = crc ^ (-1);\n\n  for(var i = start, iTop = end; i < iTop;i++) {\n  \ty = (crc ^ string[i]) & 0xFF;\n    x = table[y];\n  \tcrc = (crc >>> 8) ^ x;\n  }\n\n  return crc ^ (-1);\n}\n\n/**\n * Deserialize stream data as BSON documents.\n *\n * Options\n *  - **evalFunctions** {Boolean, default:false}, evaluate functions in the BSON document scoped to the object deserialized.\n *  - **cacheFunctions** {Boolean, default:false}, cache evaluated functions for reuse.\n *  - **cacheFunctionsCrc32** {Boolean, default:false}, use a crc32 code for caching, otherwise use the string of the function.\n *  - **promoteLongs** {Boolean, default:true}, when deserializing a Long will fit it into a Number if it's smaller than 53 bits\n *\n * @param {Buffer} data the buffer containing the serialized set of BSON documents.\n * @param {Number} startIndex the start index in the data Buffer where the deserialization is to start.\n * @param {Number} numberOfDocuments number of documents to deserialize.\n * @param {Array} documents an array where to store the deserialized documents.\n * @param {Number} docStartIndex the index in the documents array from where to start inserting documents.\n * @param {Object} [options] additional options used for the deserialization.\n * @return {Number} returns the next index in the buffer after deserialization **x** numbers of documents.\n * @api public\n */\nBSON.deserializeStream = function(data, startIndex, numberOfDocuments, documents, docStartIndex, options) {\n  // if(numberOfDocuments !== documents.length) throw new Error(\"Number of expected results back is less than the number of documents\");\n  options = options != null ? options : {};\n  var index = startIndex;\n  // Loop over all documents\n  for(var i = 0; i < numberOfDocuments; i++) {\n    // Find size of the document\n    var size = data[index] | data[index + 1] << 8 | data[index + 2] << 16 | data[index + 3] << 24;\n    // Update options with index\n    options['index'] = index;\n    // Parse the document at this point\n    documents[docStartIndex + i] = BSON.deserialize(data, options);\n    // Adjust index by the document size\n    index = index + size;\n  }\n\n  // Return object containing end index of parsing and list of documents\n  return index;\n}\n\n/**\n * Ensure eval is isolated.\n *\n * @ignore\n * @api private\n */\nvar isolateEvalWithHash = function(functionCache, hash, functionString, object) {\n  // Contains the value we are going to set\n  var value = null;\n\n  // Check for cache hit, eval if missing and return cached function\n  if(functionCache[hash] == null) {\n    eval(\"value = \" + functionString);\n    functionCache[hash] = value;\n  }\n  // Set the object\n  return functionCache[hash].bind(object);\n}\n\n/**\n * Ensure eval is isolated.\n *\n * @ignore\n * @api private\n */\nvar isolateEval = function(functionString) {\n  // Contains the value we are going to set\n  var value = null;\n  // Eval the function\n  eval(\"value = \" + functionString);\n  return value;\n}\n\n/**\n * Convert Uint8Array to String\n *\n * @ignore\n * @api private\n */\nvar convertUint8ArrayToUtf8String = function(byteArray, startIndex, endIndex) {\n  return BinaryParser.decode_utf8(convertArraytoUtf8BinaryString(byteArray, startIndex, endIndex));\n}\n\nvar convertArraytoUtf8BinaryString = function(byteArray, startIndex, endIndex) {\n  var result = \"\";\n  for(var i = startIndex; i < endIndex; i++) {\n    result = result + String.fromCharCode(byteArray[i]);\n  }\n\n  return result;\n};\n\n/**\n * Deserialize data as BSON.\n *\n * Options\n *  - **evalFunctions** {Boolean, default:false}, evaluate functions in the BSON document scoped to the object deserialized.\n *  - **cacheFunctions** {Boolean, default:false}, cache evaluated functions for reuse.\n *  - **cacheFunctionsCrc32** {Boolean, default:false}, use a crc32 code for caching, otherwise use the string of the function.\n *  - **promoteLongs** {Boolean, default:true}, when deserializing a Long will fit it into a Number if it's smaller than 53 bits\n *\n * @param {Buffer} buffer the buffer containing the serialized set of BSON documents.\n * @param {Object} [options] additional options used for the deserialization.\n * @param {Boolean} [isArray] ignore used for recursive parsing.\n * @return {Object} returns the deserialized Javascript Object.\n * @api public\n */\nBSON.deserialize = function(buffer, options, isArray) {\n  // Options\n  options = options == null ? {} : options;\n  var evalFunctions = options['evalFunctions'] == null ? false : options['evalFunctions'];\n  var cacheFunctions = options['cacheFunctions'] == null ? false : options['cacheFunctions'];\n  var cacheFunctionsCrc32 = options['cacheFunctionsCrc32'] == null ? false : options['cacheFunctionsCrc32'];\n  var promoteLongs = options['promoteLongs'] == null ? true : options['promoteLongs'];\n\n  // Validate that we have at least 4 bytes of buffer\n  if(buffer.length < 5) throw new Error(\"corrupt bson message < 5 bytes long\");\n\n  // Set up index\n  var index = typeof options['index'] == 'number' ? options['index'] : 0;\n  // Reads in a C style string\n  var readCStyleString = function() {\n    // Get the start search index\n    var i = index;\n    // Locate the end of the c string\n    while(buffer[i] !== 0x00 && i < buffer.length) { \n      i++ \n    }\n    // If are at the end of the buffer there is a problem with the document\n    if(i >= buffer.length) throw new Error(\"Bad BSON Document: illegal CString\")\n    // Grab utf8 encoded string\n    var string = supportsBuffer && Buffer.isBuffer(buffer) ? buffer.toString('utf8', index, i) : convertUint8ArrayToUtf8String(buffer, index, i);\n    // Update index position\n    index = i + 1;\n    // Return string\n    return string;\n  }\n\n  // Create holding object\n  var object = isArray ? [] : {};\n\n  // Read the document size\n  var size = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n\n  // Ensure buffer is valid size\n  if(size < 5 || size > buffer.length) throw new Error(\"corrupt bson message\");\n\n  // While we have more left data left keep parsing\n  while(true) {\n    // Read the type\n    var elementType = buffer[index++];\n    // If we get a zero it's the last byte, exit\n    if(elementType == 0) break;\n    // Read the name of the field\n    var name = readCStyleString();\n    // Switch on the type\n    switch(elementType) {\n      case BSON.BSON_DATA_OID:\n        var string = supportsBuffer && Buffer.isBuffer(buffer) ? buffer.toString('binary', index, index + 12) : convertArraytoUtf8BinaryString(buffer, index, index + 12);\n        // Decode the oid\n        object[name] = new ObjectID(string);\n        // Update index\n        index = index + 12;\n        break;\n      case BSON.BSON_DATA_STRING:\n        // Read the content of the field\n        var stringSize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n        // Add string to object\n        object[name] = supportsBuffer && Buffer.isBuffer(buffer) ? buffer.toString('utf8', index, index + stringSize - 1) : convertUint8ArrayToUtf8String(buffer, index, index + stringSize - 1);\n        // Update parse index position\n        index = index + stringSize;\n        break;\n      case BSON.BSON_DATA_INT:\n        // Decode the 32bit value\n        object[name] = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n        break;\n      case BSON.BSON_DATA_NUMBER:\n        // Decode the double value\n        object[name] = readIEEE754(buffer, index, 'little', 52, 8);\n        // Update the index\n        index = index + 8;\n        break;\n      case BSON.BSON_DATA_DATE:\n        // Unpack the low and high bits\n        var lowBits = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n        var highBits = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n        // Set date object\n        object[name] = new Date(new Long(lowBits, highBits).toNumber());\n        break;\n      case BSON.BSON_DATA_BOOLEAN:\n        // Parse the boolean value\n        object[name] = buffer[index++] == 1;\n        break;\n      case BSON.BSON_DATA_NULL:\n        // Parse the boolean value\n        object[name] = null;\n        break;\n      case BSON.BSON_DATA_BINARY:\n        // Decode the size of the binary blob\n        var binarySize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n        // Decode the subtype\n        var subType = buffer[index++];\n        // Decode as raw Buffer object if options specifies it\n        if(buffer['slice'] != null) {\n          // If we have subtype 2 skip the 4 bytes for the size\n          if(subType == Binary.SUBTYPE_BYTE_ARRAY) {\n            binarySize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n          }\n          // Slice the data\n          object[name] = new Binary(buffer.slice(index, index + binarySize), subType);\n        } else {\n          var _buffer = typeof Uint8Array != 'undefined' ? new Uint8Array(new ArrayBuffer(binarySize)) : new Array(binarySize);\n          // If we have subtype 2 skip the 4 bytes for the size\n          if(subType == Binary.SUBTYPE_BYTE_ARRAY) {\n            binarySize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n          }\n          // Copy the data\n          for(var i = 0; i < binarySize; i++) {\n            _buffer[i] = buffer[index + i];\n          }\n          // Create the binary object\n          object[name] = new Binary(_buffer, subType);\n        }\n        // Update the index\n        index = index + binarySize;\n        break;\n      case BSON.BSON_DATA_ARRAY:\n        options['index'] = index;\n        // Decode the size of the array document\n        var objectSize = buffer[index] | buffer[index + 1] << 8 | buffer[index + 2] << 16 | buffer[index + 3] << 24;\n        // Set the array to the object\n        object[name] = BSON.deserialize(buffer, options, true);\n        // Adjust the index\n        index = index + objectSize;\n        break;\n      case BSON.BSON_DATA_OBJECT:\n        options['index'] = index;\n        // Decode the size of the object document\n        var objectSize = buffer[index] | buffer[index + 1] << 8 | buffer[index + 2] << 16 | buffer[index + 3] << 24;\n        // Set the array to the object\n        object[name] = BSON.deserialize(buffer, options, false);\n        // Adjust the index\n        index = index + objectSize;\n        break;\n      case BSON.BSON_DATA_REGEXP:\n        // Create the regexp\n        var source = readCStyleString();\n        var regExpOptions = readCStyleString();\n        // For each option add the corresponding one for javascript\n        var optionsArray = new Array(regExpOptions.length);\n\n        // Parse options\n        for(var i = 0; i < regExpOptions.length; i++) {\n          switch(regExpOptions[i]) {\n            case 'm':\n              optionsArray[i] = 'm';\n              break;\n            case 's':\n              optionsArray[i] = 'g';\n              break;\n            case 'i':\n              optionsArray[i] = 'i';\n              break;\n          }\n        }\n\n        object[name] = new RegExp(source, optionsArray.join(''));\n        break;\n      case BSON.BSON_DATA_LONG:\n        // Unpack the low and high bits\n        var lowBits = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n        var highBits = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n        // Create long object\n        var long = new Long(lowBits, highBits); \n        // Promote the long if possible\n        if(promoteLongs) {\n          object[name] = long.lessThanOrEqual(JS_INT_MAX_LONG) && long.greaterThanOrEqual(JS_INT_MIN_LONG) ? long.toNumber() : long;\n        } else {\n          object[name] = long;\n        }\n        break;\n      case BSON.BSON_DATA_SYMBOL:\n        // Read the content of the field\n        var stringSize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n        // Add string to object\n        object[name] = new Symbol(buffer.toString('utf8', index, index + stringSize - 1));\n        // Update parse index position\n        index = index + stringSize;\n        break;\n      case BSON.BSON_DATA_TIMESTAMP:\n        // Unpack the low and high bits\n        var lowBits = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n        var highBits = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n        // Set the object\n        object[name] = new Timestamp(lowBits, highBits);\n        break;\n      case BSON.BSON_DATA_MIN_KEY:\n        // Parse the object\n        object[name] = new MinKey();\n        break;\n      case BSON.BSON_DATA_MAX_KEY:\n        // Parse the object\n        object[name] = new MaxKey();\n        break;\n      case BSON.BSON_DATA_CODE:\n        // Read the content of the field\n        var stringSize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n        // Function string\n        var functionString = supportsBuffer && Buffer.isBuffer(buffer) ? buffer.toString('utf8', index, index + stringSize - 1) : convertUint8ArrayToUtf8String(buffer, index, index + stringSize - 1);\n\n        // If we are evaluating the functions\n        if(evalFunctions) {\n          // Contains the value we are going to set\n          var value = null;\n          // If we have cache enabled let's look for the md5 of the function in the cache\n          if(cacheFunctions) {\n            var hash = cacheFunctionsCrc32 ? crc32(functionString) : functionString;\n            // Got to do this to avoid V8 deoptimizing the call due to finding eval\n            object[name] = isolateEvalWithHash(functionCache, hash, functionString, object);\n          } else {\n            // Set directly\n            object[name] = isolateEval(functionString);\n          }\n        } else {\n          object[name]  = new Code(functionString, {});\n        }\n\n        // Update parse index position\n        index = index + stringSize;\n        break;\n      case BSON.BSON_DATA_CODE_W_SCOPE:\n        // Read the content of the field\n        var totalSize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n        var stringSize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n        // Javascript function\n        var functionString = supportsBuffer && Buffer.isBuffer(buffer) ? buffer.toString('utf8', index, index + stringSize - 1) : convertUint8ArrayToUtf8String(buffer, index, index + stringSize - 1);\n        // Update parse index position\n        index = index + stringSize;\n        // Parse the element\n        options['index'] = index;\n        // Decode the size of the object document\n        var objectSize = buffer[index] | buffer[index + 1] << 8 | buffer[index + 2] << 16 | buffer[index + 3] << 24;\n        // Decode the scope object\n        var scopeObject = BSON.deserialize(buffer, options, false);\n        // Adjust the index\n        index = index + objectSize;\n\n        // If we are evaluating the functions\n        if(evalFunctions) {\n          // Contains the value we are going to set\n          var value = null;\n          // If we have cache enabled let's look for the md5 of the function in the cache\n          if(cacheFunctions) {\n            var hash = cacheFunctionsCrc32 ? crc32(functionString) : functionString;\n            // Got to do this to avoid V8 deoptimizing the call due to finding eval\n            object[name] = isolateEvalWithHash(functionCache, hash, functionString, object);\n          } else {\n            // Set directly\n            object[name] = isolateEval(functionString);\n          }\n\n          // Set the scope on the object\n          object[name].scope = scopeObject;\n        } else {\n          object[name]  = new Code(functionString, scopeObject);\n        }\n\n        // Add string to object\n        break;\n    }\n  }\n\n  // Check if we have a db ref object\n  if(object['$id'] != null) object = new DBRef(object['$ref'], object['$id'], object['$db']);\n\n  // Return the final objects\n  return object;\n}\n\n/**\n * Check if key name is valid.\n *\n * @ignore\n * @api private\n */\nBSON.checkKey = function checkKey (key, dollarsAndDotsOk) {\n  if (!key.length) return;\n  // Check if we have a legal key for the object\n  if (!!~key.indexOf(\"\\x00\")) {\n    // The BSON spec doesn't allow keys with null bytes because keys are\n    // null-terminated.\n    throw Error(\"key \" + key + \" must not contain null bytes\");\n  }\n  if (!dollarsAndDotsOk) {\n    if('$' == key[0]) {\n      throw Error(\"key \" + key + \" must not start with '$'\");\n    } else if (!!~key.indexOf('.')) {\n      throw Error(\"key \" + key + \" must not contain '.'\");\n    }\n  }\n};\n\n/**\n * Deserialize data as BSON.\n *\n * Options\n *  - **evalFunctions** {Boolean, default:false}, evaluate functions in the BSON document scoped to the object deserialized.\n *  - **cacheFunctions** {Boolean, default:false}, cache evaluated functions for reuse.\n *  - **cacheFunctionsCrc32** {Boolean, default:false}, use a crc32 code for caching, otherwise use the string of the function.\n *\n * @param {Buffer} buffer the buffer containing the serialized set of BSON documents.\n * @param {Object} [options] additional options used for the deserialization.\n * @param {Boolean} [isArray] ignore used for recursive parsing.\n * @return {Object} returns the deserialized Javascript Object.\n * @api public\n */\nBSON.prototype.deserialize = function(data, options) {\n  return BSON.deserialize(data, options);\n}\n\n/**\n * Deserialize stream data as BSON documents.\n *\n * Options\n *  - **evalFunctions** {Boolean, default:false}, evaluate functions in the BSON document scoped to the object deserialized.\n *  - **cacheFunctions** {Boolean, default:false}, cache evaluated functions for reuse.\n *  - **cacheFunctionsCrc32** {Boolean, default:false}, use a crc32 code for caching, otherwise use the string of the function.\n *\n * @param {Buffer} data the buffer containing the serialized set of BSON documents.\n * @param {Number} startIndex the start index in the data Buffer where the deserialization is to start.\n * @param {Number} numberOfDocuments number of documents to deserialize.\n * @param {Array} documents an array where to store the deserialized documents.\n * @param {Number} docStartIndex the index in the documents array from where to start inserting documents.\n * @param {Object} [options] additional options used for the deserialization.\n * @return {Number} returns the next index in the buffer after deserialization **x** numbers of documents.\n * @api public\n */\nBSON.prototype.deserializeStream = function(data, startIndex, numberOfDocuments, documents, docStartIndex, options) {\n  return BSON.deserializeStream(data, startIndex, numberOfDocuments, documents, docStartIndex, options);\n}\n\n/**\n * Serialize a Javascript object.\n *\n * @param {Object} object the Javascript object to serialize.\n * @param {Boolean} checkKeys the serializer will check if keys are valid.\n * @param {Boolean} asBuffer return the serialized object as a Buffer object **(ignore)**.\n * @param {Boolean} serializeFunctions serialize the javascript functions **(default:false)**.\n * @return {Buffer} returns the Buffer object containing the serialized object.\n * @api public\n */\nBSON.prototype.serialize = function(object, checkKeys, asBuffer, serializeFunctions) {\n  return BSON.serialize(object, checkKeys, asBuffer, serializeFunctions);\n}\n\n/**\n * Calculate the bson size for a passed in Javascript object.\n *\n * @param {Object} object the Javascript object to calculate the BSON byte size for.\n * @param {Boolean} [serializeFunctions] serialize all functions in the object **(default:false)**.\n * @return {Number} returns the number of bytes the BSON object will take up.\n * @api public\n */\nBSON.prototype.calculateObjectSize = function(object, serializeFunctions) {\n  return BSON.calculateObjectSize(object, serializeFunctions);\n}\n\n/**\n * Serialize a Javascript object using a predefined Buffer and index into the buffer, useful when pre-allocating the space for serialization.\n *\n * @param {Object} object the Javascript object to serialize.\n * @param {Boolean} checkKeys the serializer will check if keys are valid.\n * @param {Buffer} buffer the Buffer you pre-allocated to store the serialized BSON object.\n * @param {Number} index the index in the buffer where we wish to start serializing into.\n * @param {Boolean} serializeFunctions serialize the javascript functions **(default:false)**.\n * @return {Number} returns the new write index in the Buffer.\n * @api public\n */\nBSON.prototype.serializeWithBufferAndIndex = function(object, checkKeys, buffer, startIndex, serializeFunctions) {\n  return BSON.serializeWithBufferAndIndex(object, checkKeys, buffer, startIndex, serializeFunctions);\n}\n\n/**\n * @ignore\n * @api private\n */\nexports.Code = Code;\nexports.Symbol = Symbol;\nexports.BSON = BSON;\nexports.DBRef = DBRef;\nexports.Binary = Binary;\nexports.ObjectID = ObjectID;\nexports.Long = Long;\nexports.Timestamp = Timestamp;\nexports.Double = Double;\nexports.MinKey = MinKey;\nexports.MaxKey = MaxKey;\n"]}