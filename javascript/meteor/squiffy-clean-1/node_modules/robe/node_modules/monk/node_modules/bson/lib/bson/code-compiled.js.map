{"version":3,"sources":["code.js"],"names":[],"mappings":";;;;;;;;AAQA,SAAS,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE;AACzB,MAAG,EAAE,IAAI,YAAY,IAAI,CAAA,AAAC,EAAE,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;;AAEzD,MAAI,CAAC,SAAS,GAAG,MAAM,CAAC;AACxB,MAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACjB,MAAI,CAAC,KAAK,GAAG,KAAK,IAAI,IAAI,GAAG,EAAE,GAAG,KAAK,CAAC;CACzC;;;;;;AAAC,AAMF,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,YAAW;AACjC,SAAO,EAAC,KAAK,EAAC,IAAI,CAAC,KAAK,EAAE,IAAI,EAAC,IAAI,CAAC,IAAI,EAAC,CAAC;CAC3C,CAAA;;AAED,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC","file":"code-compiled.js","sourcesContent":["/**\n * A class representation of the BSON Code type.\n *\n * @class Represents the BSON Code type.\n * @param {String|Function} code a string or function.\n * @param {Object} [scope] an optional scope for the function.\n * @return {Code}\n */\nfunction Code(code, scope) {\n  if(!(this instanceof Code)) return new Code(code, scope);\n  \n  this._bsontype = 'Code';\n  this.code = code;\n  this.scope = scope == null ? {} : scope;\n};\n\n/**\n * @ignore\n * @api private\n */\nCode.prototype.toJSON = function() {\n  return {scope:this.scope, code:this.code};\n}\n\nexports.Code = Code;"]}