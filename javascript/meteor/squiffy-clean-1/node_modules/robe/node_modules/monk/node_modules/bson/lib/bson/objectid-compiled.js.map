{"version":3,"sources":["objectid.js"],"names":[],"mappings":"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","file":"objectid-compiled.js","sourcesContent":["/**\n * Module dependencies.\n */\nvar BinaryParser = require('./binary_parser').BinaryParser;\n\n/**\n * Machine id.\n *\n * Create a random 3-byte value (i.e. unique for this\n * process). Other drivers use a md5 of the machine id here, but\n * that would mean an asyc call to gethostname, so we don't bother.\n */\nvar MACHINE_ID = parseInt(Math.random() * 0xFFFFFF, 10);\n\n// Regular expression that checks for hex value\nvar checkForHexRegExp = new RegExp(\"^[0-9a-fA-F]{24}$\");\n\n/**\n* Create a new ObjectID instance\n*\n* @class Represents the BSON ObjectID type\n* @param {String|Number} id Can be a 24 byte hex string, 12 byte binary string or a Number.\n* @return {Object} instance of ObjectID.\n*/\nvar ObjectID = function ObjectID(id) {\n  if(!(this instanceof ObjectID)) return new ObjectID(id);\n  if((id instanceof ObjectID)) return id;\n\n  this._bsontype = 'ObjectID';\n  var __id = null;\n  var valid = ObjectID.isValid(id);\n\n  // Throw an error if it's not a valid setup\n  if(!valid){\n    throw new Error(\"Argument passed in must be a single String of 12 bytes or a string of 24 hex characters\");\n  } else if(valid && typeof id == 'string' && id.length == 24) {\n    return ObjectID.createFromHexString(id);\n  } else if(id == null || typeof id == 'number') {\n    // convert to 12 byte binary string\n    this.id = this.generate(id);\n  } else if(id != null && id.length === 12) {\n    // assume 12 byte string\n    this.id = id;\n  }\n\n  if(ObjectID.cacheHexString) this.__id = this.toHexString();\n};\n\n// Allow usage of ObjectId aswell as ObjectID\nvar ObjectId = ObjectID;\n\n/**\n* Return the ObjectID id as a 24 byte hex string representation\n*\n* @return {String} return the 24 byte hex string representation.\n* @api public\n*/\nObjectID.prototype.toHexString = function() {\n  if(ObjectID.cacheHexString && this.__id) return this.__id;\n\n  var hexString = ''\n    , number\n    , value;\n\n  for (var index = 0, len = this.id.length; index < len; index++) {\n    value = BinaryParser.toByte(this.id[index]);\n    number = value <= 15\n      ? '0' + value.toString(16)\n      : value.toString(16);\n    hexString = hexString + number;\n  }\n\n  if(ObjectID.cacheHexString) this.__id = hexString;\n  return hexString;\n};\n\n/**\n* Update the ObjectID index used in generating new ObjectID's on the driver\n*\n* @return {Number} returns next index value.\n* @api private\n*/\nObjectID.prototype.get_inc = function() {\n  return ObjectID.index = (ObjectID.index + 1) % 0xFFFFFF;\n};\n\n/**\n* Update the ObjectID index used in generating new ObjectID's on the driver\n*\n* @return {Number} returns next index value.\n* @api private\n*/\nObjectID.prototype.getInc = function() {\n  return this.get_inc();\n};\n\n/**\n* Generate a 12 byte id string used in ObjectID's\n*\n* @param {Number} [time] optional parameter allowing to pass in a second based timestamp.\n* @return {String} return the 12 byte id binary string.\n* @api private\n*/\nObjectID.prototype.generate = function(time) {\n  if ('number' != typeof time) {\n    time = parseInt(Date.now()/1000,10);\n  }\n  \n  var time4Bytes = BinaryParser.encodeInt(time, 32, true, true);\n  /* for time-based ObjectID the bytes following the time will be zeroed */\n  var machine3Bytes = BinaryParser.encodeInt(MACHINE_ID, 24, false);\n  var pid2Bytes = BinaryParser.fromShort(typeof process === 'undefined' ? Math.floor(Math.random() * 100000) : process.pid);\n  var index3Bytes = BinaryParser.encodeInt(this.get_inc(), 24, false, true);\n\n  return time4Bytes + machine3Bytes + pid2Bytes + index3Bytes;\n};\n\n/**\n* Converts the id into a 24 byte hex string for printing\n*\n* @return {String} return the 24 byte hex string representation.\n* @api private\n*/\nObjectID.prototype.toString = function() {\n  return this.toHexString();\n};\n\n/**\n* Converts to a string representation of this Id.\n*\n* @return {String} return the 24 byte hex string representation.\n* @api private\n*/\nObjectID.prototype.inspect = ObjectID.prototype.toString;\n\n/**\n* Converts to its JSON representation.\n*\n* @return {String} return the 24 byte hex string representation.\n* @api private\n*/\nObjectID.prototype.toJSON = function() {\n  return this.toHexString();\n};\n\n/**\n* Compares the equality of this ObjectID with `otherID`.\n*\n* @param {Object} otherID ObjectID instance to compare against.\n* @return {Bool} the result of comparing two ObjectID's\n* @api public\n*/\nObjectID.prototype.equals = function equals (otherID) {\n  if(otherID == null) return false;\n  var id = (otherID instanceof ObjectID || otherID.toHexString)\n    ? otherID.id\n    : ObjectID.createFromHexString(otherID).id;\n\n  return this.id === id;\n}\n\n/**\n* Returns the generation date (accurate up to the second) that this ID was generated.\n*\n* @return {Date} the generation date\n* @api public\n*/\nObjectID.prototype.getTimestamp = function() {\n  var timestamp = new Date();\n  timestamp.setTime(Math.floor(BinaryParser.decodeInt(this.id.substring(0,4), 32, true, true)) * 1000);\n  return timestamp;\n}\n\n/**\n* @ignore\n* @api private\n*/\nObjectID.index = parseInt(Math.random() * 0xFFFFFF, 10);\n\nObjectID.createPk = function createPk () {\n  return new ObjectID();\n};\n\n/**\n* Creates an ObjectID from a second based number, with the rest of the ObjectID zeroed out. Used for comparisons or sorting the ObjectID.\n*\n* @param {Number} time an integer number representing a number of seconds.\n* @return {ObjectID} return the created ObjectID\n* @api public\n*/\nObjectID.createFromTime = function createFromTime (time) {\n  var id = BinaryParser.encodeInt(time, 32, true, true) +\n           BinaryParser.encodeInt(0, 64, true, true);\n  return new ObjectID(id);\n};\n\n/**\n* Creates an ObjectID from a hex string representation of an ObjectID.\n*\n* @param {String} hexString create a ObjectID from a passed in 24 byte hexstring.\n* @return {ObjectID} return the created ObjectID\n* @api public\n*/\nObjectID.createFromHexString = function createFromHexString (hexString) {\n  // Throw an error if it's not a valid setup\n  if(typeof hexString === 'undefined' || hexString != null && hexString.length != 24)\n    throw new Error(\"Argument passed in must be a single String of 12 bytes or a string of 24 hex characters\");\n\n  var len = hexString.length;\n\n  if(len > 12*2) {\n    throw new Error('Id cannot be longer than 12 bytes');\n  }\n\n  var result = ''\n    , string\n    , number;\n\n  for (var index = 0; index < len; index += 2) {\n    string = hexString.substr(index, 2);\n    number = parseInt(string, 16);\n    result += BinaryParser.fromByte(number);\n  }\n\n  return new ObjectID(result, hexString);\n};\n\n/**\n* Checks if a value is a valid bson ObjectId\n*\n* @return {Boolean} return true if the value is a valid bson ObjectId, return false otherwise.\n* @api public\n*/\nObjectID.isValid = function isValid(id) {\n  if (id != null && 'number' != typeof id && (id.length != 12 && id.length != 24)) {\n    return false;\n  } else {\n    // Check specifically for hex correctness\n    if(typeof id == 'string' && id.length == 24) return checkForHexRegExp.test(id);\n    return true;\n  }\n};\n\n/**\n* @ignore\n*/\nObject.defineProperty(ObjectID.prototype, \"generationTime\", {\n   enumerable: true\n , get: function () {\n     return Math.floor(BinaryParser.decodeInt(this.id.substring(0,4), 32, true, true));\n   }\n , set: function (value) {\n     var value = BinaryParser.encodeInt(value, 32, true, true);\n     this.id = value + this.id.substr(4);\n     // delete this.__id;\n     this.toHexString();\n   }\n});\n\n/**\n * Expose.\n */\nexports.ObjectID = ObjectID;\nexports.ObjectId = ObjectID;\n"]}