{"version":3,"sources":["security_credentials_tests.js"],"names":[],"mappings":"AAAA,OAAO,CAAC,KAAK,GAAG,UAAS,QAAQ,EAAE;AACjC,UAAQ,EAAE,CAAC;CACZ,CAAA;;AAED,OAAO,CAAC,QAAQ,GAAG,UAAS,QAAQ,EAAE;AACpC,UAAQ,EAAE,CAAC;CACZ,CAAA;;AAED,OAAO,CAAC,0CAA0C,CAAC,GAAG,UAAS,IAAI,EAAE;AACnE,MAAI,mBAAmB,GAAG,OAAO,CAAC,mBAAmB,CAAC,CAAC,mBAAmB;;;AAAC,AAG3E,MAAI;AACF,QAAI,WAAW,GAAG,mBAAmB,CAAC,MAAM,CAAC,UAAU,EAAE,eAAe,EAAE,GAAG,CAAC,CAAC;GAChF,CAAC,OAAM,GAAG,EAAE;AACX,WAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;AAChB,QAAI,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;GAChB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,AAoCD,MAAI,CAAC,IAAI,EAAE,CAAC;CACb,CAAA","file":"security_credentials_tests-compiled.js","sourcesContent":["exports.setUp = function(callback) {\n  callback();\n}\n\nexports.tearDown = function(callback) {\n  callback();\n}\n\nexports['Initialize a set of security credentials'] = function(test) {\n  var SecurityCredentials = require('../../lib/sspi.js').SecurityCredentials;\n\n  // Aquire some credentials\n  try {\n    var credentials = SecurityCredentials.aquire('Kerberos', 'dev1@10GEN.ME', 'a');    \n  } catch(err) {    \n    console.dir(err)\n    test.ok(false);\n  }\n\n\n\n  // console.dir(SecurityCredentials);\n\n  // var SecurityBufferDescriptor = require('../../lib/sspi.js').SecurityBufferDescriptor\n  //   SecurityBuffer = require('../../lib/sspi.js').SecurityBuffer;\n\n  // // Create descriptor with single Buffer\n  // var securityDescriptor = new SecurityBufferDescriptor(100);\n  // try {\n  //   // Fail to work due to no valid Security Buffer\n  //   securityDescriptor = new SecurityBufferDescriptor([\"hello\"]);\n  //   test.ok(false);\n  // } catch(err){}\n\n  // // Should Correctly construct SecurityBuffer\n  // var buffer = new SecurityBuffer(SecurityBuffer.DATA, 100);\n  // securityDescriptor = new SecurityBufferDescriptor([buffer]);\n  // // Should correctly return a buffer\n  // var result = securityDescriptor.toBuffer();\n  // test.equal(100, result.length);\n\n  // // Should Correctly construct SecurityBuffer\n  // var buffer = new SecurityBuffer(SecurityBuffer.DATA, new Buffer(\"hello world\"));\n  // securityDescriptor = new SecurityBufferDescriptor([buffer]);\n  // var result = securityDescriptor.toBuffer();\n  // test.equal(\"hello world\", result.toString());\n\n  // // Test passing in more than one Buffer\n  // var buffer = new SecurityBuffer(SecurityBuffer.DATA, new Buffer(\"hello world\"));\n  // var buffer2 = new SecurityBuffer(SecurityBuffer.STREAM, new Buffer(\"adam and eve\"));\n  // securityDescriptor = new SecurityBufferDescriptor([buffer, buffer2]);\n  // var result = securityDescriptor.toBuffer();\n  // test.equal(\"hello worldadam and eve\", result.toString());\n  test.done();\n}"]}