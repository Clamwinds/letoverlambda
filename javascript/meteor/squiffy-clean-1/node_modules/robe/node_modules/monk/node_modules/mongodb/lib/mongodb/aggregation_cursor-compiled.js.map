{"version":3,"sources":["aggregation_cursor.js"],"names":[],"mappings":"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","file":"aggregation_cursor-compiled.js","sourcesContent":["var ReadPreference = require('./connection/read_preference').ReadPreference\n\t, Readable = require('stream').Readable\n\t, CommandCursor = require('./command_cursor').CommandCursor\n\t, utils = require('./utils')\n\t, shared = require('./collection/shared')\n\t, inherits = require('util').inherits;\n\nvar AggregationCursor = function(collection, serverCapabilities, options) {\t\n\tvar pipe = [];\n\tvar self = this;\n\tvar results = null;\t\n\tvar _cursor_options = {};\n\t// Ensure we have options set up\n\toptions = options == null ? {} : options;\n\n\t// If a pipeline was provided\n\tpipe = Array.isArray(options.pipe) ? options.pipe : pipe;\n\t// Set passed in batchSize if provided\n\tif(typeof options.batchSize == 'number') _cursor_options.batchSize = options.batchSize;\n\t// Get the read Preference\n\tvar readPreference = shared._getReadConcern(collection, options);\n\n\t// Set up\n\tReadable.call(this, {objectMode: true});\n\n\t// Contains connection\n\tvar connection = null;\n\n\t// Set the read preference\n\tvar _options = { \n\t\treadPreference: readPreference\n\t};\n\n\t// Actual command\n\tvar command = {\n\t\t\taggregate: collection.collectionName\n\t\t, pipeline: pipe\n\t\t, cursor: _cursor_options\n\t}\n\n\t// If allowDiskUse is set\n\tif(typeof options.allowDiskUse == 'boolean') \n\t\tcommand.allowDiskUse = options.allowDiskUse;\n\t\n\t// Command cursor (if we support one)\n\tvar commandCursor = new CommandCursor(collection.db, collection, command);\n\n\t// // Internal cursor methods\n\t// this.find = function(selector) {\n\t// \tpipe.push({$match: selector});\n\t// \treturn self;\n\t// }\n\n\t// this.unwind = function(unwind) {\n\t// \tpipe.push({$unwind: unwind});\n\t// \treturn self;\n\t// }\n\n\t// this.group = function(group) {\n\t// \tpipe.push({$group: group});\n\t// \treturn self;\n\t// }\n\n\t// this.project = function(project) {\n\t// \tpipe.push({$project: project});\n\t// \treturn self;\n\t// }\n\n\t// this.limit = function(limit) {\n\t// \tpipe.push({$limit: limit});\n\t// \treturn self;\n\t// }\n\n\t// this.geoNear = function(geoNear) {\n\t// \tpipe.push({$geoNear: geoNear});\n\t// \treturn self;\n\t// }\n\n\t// this.sort = function(sort) {\n\t// \tpipe.push({$sort: sort});\n\t// \treturn self;\n\t// }\n\n\t// this.withReadPreference = function(read_preference) {\n\t// \t_options.readPreference = read_preference;\n\t// \treturn self;\n\t// }\n\n\t// this.withQueryOptions = function(options) {\n\t// \tif(options.batchSize) {\n\t// \t\t_cursor_options.batchSize = options.batchSize;\n\t// \t}\n\n\t// \t// Return the cursor\n\t// \treturn self;\n\t// }\n\n\t// this.skip = function(skip) {\n\t// \tpipe.push({$skip: skip});\n\t// \treturn self;\n\t// }\n\n\t// this.allowDiskUsage = function(allowDiskUsage) {\n\t// \tcommand.allowDiskUsage = allowDiskUsage;\n\t// \treturn self;\n\t// }\n\n\tthis.explain = function(callback) {\n\t\tif(typeof callback != 'function') \n\t\t\tthrow utils.toError(\"AggregationCursor explain requires a callback function\");\n\t\t\n\t\t// Add explain options\n\t\t_options.explain = true;\n\t\t// Execute aggregation pipeline\n\t\tcollection.aggregate(pipe, _options, function(err, results) {\n\t\t\tif(err) return callback(err, null);\n\t\t\tcallback(null, results);\n\t\t});\n\t}\n\n\t// this.maxTimeMS = function(maxTimeMS) {\n\t// \tif(typeof maxTimeMS != 'number') {\n\t// \t\tthrow new Error(\"maxTimeMS must be a number\");\n\t// \t}\n\n\t// \t// Save the maxTimeMS\n\t// \t_options.maxTimeMS = maxTimeMS\n\t// \t// Set the maxTimeMS on the command cursor\n\t// \tcommandCursor.maxTimeMS(maxTimeMS);\n\t// \treturn self;\n\t// }\n\n\tthis.get = function(callback) {\n\t\tif(typeof callback != 'function') \n\t\t\tthrow utils.toError(\"AggregationCursor get requires a callback function\");\t\t\n\t  // Checkout a connection\n\t  var _connection = collection.db.serverConfig.checkoutReader(_options.readPreference);\n\t  // Fall back\n\t\tif(!_connection.serverCapabilities.hasAggregationCursor) {\n\t\t\treturn collection.aggregate(pipe, _options, function(err, results) {\n\t\t\t\tif(err) return callback(err);\n\t\t\t\tcallback(null, results);\n\t\t\t});\t\t\t\n\t\t}\n\n\t\t// Execute get using command Cursor\n\t\tcommandCursor.get({connection: _connection}, callback);\n\t}\n\n\tthis.getOne = function(callback) {\n\t\tif(typeof callback != 'function') \n\t\t\tthrow utils.toError(\"AggregationCursor getOne requires a callback function\");\t\t\n\t\t// Set the limit to 1\n\t\tpipe.push({$limit: 1});\n\t\t// For now we have no cursor command so let's just wrap existing results\n\t\tcollection.aggregate(pipe, _options, function(err, results) {\n\t\t\tif(err) return callback(err);\n\t\t\tcallback(null, results[0]);\n\t\t});\n\t}\n\n\tthis.each = function(callback) {\n\t  // Checkout a connection if we have none\n\t  if(!connection)\n\t  \tconnection = collection.db.serverConfig.checkoutReader(_options.readPreference);\n\t  \n\t  // Fall back\n\t\tif(!connection.serverCapabilities.hasAggregationCursor) {\n\t\t\tcollection.aggregate(pipe, _options, function(err, _results) {\n\t\t\t\tif(err) return callback(err);\n\n\t\t\t\twhile(_results.length > 0) {\n\t\t\t\t\tcallback(null, _results.shift());\n\t\t\t\t}\n\n\t\t\t\tcallback(null, null);\n\t\t\t});\n\t\t}\n\n\t\t// Execute each using command Cursor\n\t\tcommandCursor.each({connection: connection}, callback);\t\t\n\t}\n\n\tthis.next = function(callback) {\n\t\tif(typeof callback != 'function') \n\t\t\tthrow utils.toError(\"AggregationCursor next requires a callback function\");\t\t\n\n\t  // Checkout a connection if we have none\n\t  if(!connection)\n\t  \tconnection = collection.db.serverConfig.checkoutReader(_options.readPreference);\n\t  \n\t  // Fall back\n\t\tif(!connection.serverCapabilities.hasAggregationCursor) {\n\t\t\tif(!results) {\n\t\t\t\t// For now we have no cursor command so let's just wrap existing results\n\t\t\t\treturn collection.aggregate(pipe, _options, function(err, _results) {\n\t\t\t\t\tif(err) return callback(err);\n\t\t\t\t\tresults = _results;\n\t        \n\t        // Ensure we don't issue undefined\n\t        var item = results.shift();\n\t        callback(null, item ? item : null);\n\t\t\t\t});\t\t\t\n\t\t\t}\n\n\t    // Ensure we don't issue undefined\n\t    var item = results.shift();\n\t    // Return the item\n\t    return callback(null, item ? item : null);\n\t  }\n\n\t\t// Execute next using command Cursor\n\t\tcommandCursor.next({connection: connection}, callback);\t\t\n\t}\n\n\t//\n\t// Close method\n\t//\n\tthis.close = function(callback) {\n\t\tif(typeof callback != 'function') \n\t\t\tthrow utils.toError(\"AggregationCursor close requires a callback function\");\t\t\n\n\t  // Checkout a connection if we have none\n\t  if(!connection)\n\t  \tconnection = collection.db.serverConfig.checkoutReader(_options.readPreference);\n\n\t  // Fall back\n\t\tif(!connection.serverCapabilities.hasAggregationCursor) {\n\t\t\treturn callback(null, null);\n\t\t}\n\n\t\t// Execute next using command Cursor\n\t\tcommandCursor.close({connection: connection}, callback);\t\t\n\t}\n\n\t//\n\t// Stream method\n\t//\n\tthis._read = function(n) {\n\t\tself.next(function(err, result) {\n\t\t\tif(err) {\n\t\t\t\tself.emit('error', err);\n\t\t\t\treturn self.push(null);\n\t\t\t}\n\n\t\t\tself.push(result);\n\t\t});\n\t}\n}\n\n// Inherit from Readable\nif(Readable != null) {\n\tinherits(AggregationCursor, Readable);\t\n}\n\n// Exports the Aggregation Framework\nexports.AggregationCursor = AggregationCursor;"]}