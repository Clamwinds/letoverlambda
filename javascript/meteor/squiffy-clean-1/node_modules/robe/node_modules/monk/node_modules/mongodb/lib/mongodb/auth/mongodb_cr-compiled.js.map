{"version":3,"sources":["mongodb_cr.js"],"names":[],"mappings":"AAAA,IAAI,SAAS,GAAG,OAAO,CAAC,wBAAwB,CAAC,CAAC,SAAS;IACvD,KAAK,GAAG,OAAO,CAAC,UAAU,CAAC;IAC3B,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;;AAE/B,IAAI,YAAY,GAAG,UAAS,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE;AAC7E,MAAI,mBAAmB,GAAG,CAAC,CAAC;AAC5B,MAAI,WAAW,GAAG,IAAI,CAAC;;AAEvB,MAAG,OAAO,CAAC,YAAY,CAAC,IAAI,IAAI,EAAE;;AAEhC,uBAAmB,GAAG,CAAC,CAAC;GACzB,MAAM;;AAEL,uBAAmB,GAAG,EAAE,CAAC,YAAY,CAAC,iBAAiB,EAAE,CAAC,MAAM,CAAC;AACjE,WAAO,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC;GACzB;;;AAAA,AAGD,SAAO,CAAC,gBAAgB,GAAG,IAAI;;;AAAC,AAGhC,IAAE,CAAC,OAAO,CAAC,EAAC,UAAU,EAAC,CAAC,EAAC,EAAE,OAAO,EAAE,UAAS,GAAG,EAAE,MAAM,EAAE,UAAU,EAAE;;AAEpE,QAAG,GAAG,IAAI,IAAI,EAAE;;AAEd,UAAI,KAAK,GAAG,MAAM,CAAC,KAAK;;;AAAC,AAGzB,UAAI,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC;;AAAC,AAEnC,SAAG,CAAC,MAAM,CAAC,QAAQ,GAAG,SAAS,GAAG,QAAQ,CAAC,CAAC;AAC5C,UAAI,aAAa,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC;;AAAC,AAEtC,SAAG,GAAG,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;AAC/B,SAAG,CAAC,MAAM,CAAC,KAAK,GAAG,QAAQ,GAAG,aAAa,CAAC,CAAC;AAC7C,UAAI,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC;;;AAAC,AAG5B,UAAI,GAAG,GAAG,EAAC,cAAc,EAAC,CAAC,EAAE,MAAM,EAAC,QAAQ,EAAE,OAAO,EAAC,KAAK,EAAE,KAAK,EAAC,GAAG,EAAC;;;AAAC,AAGxE,QAAE,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,EAAC,UAAU,EAAC,UAAU,EAAC,EAAE,UAAS,GAAG,EAAE,MAAM,EAAE;;AAExE,2BAAmB,GAAG,mBAAmB,GAAG,CAAC;;AAAC,AAE9C,YAAG,GAAG,EAAE,WAAW,GAAG,GAAG,CAAC;;;AAAA,AAG1B,YAAG,mBAAmB,IAAI,CAAC,IAAI,OAAO,QAAQ,IAAI,UAAU,EAAE;AAC5D,cAAI,gBAAgB,GAAG,QAAQ,CAAC;AAChC,kBAAQ,GAAG,IAAI,CAAC;;AAEhB,cAAG,WAAW,IAAI,IAAI,IAAI,MAAM,CAAC,EAAE,EAAE;AACnC,cAAE,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,EAAE,CAAC,YAAY,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,CAAC;;AAAC,AAEpF,4BAAgB,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;WACrC,MAAM;AACL,4BAAgB,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;WACtC;SACF;OACF,CAAC,CAAC;KACJ;GACF,CAAC,CAAC;CACJ,CAAA;;AAED,OAAO,CAAC,YAAY,GAAG,YAAY,CAAC","file":"mongodb_cr-compiled.js","sourcesContent":["var DbCommand = require('../commands/db_command').DbCommand\n  , utils = require('../utils')\n  , crypto = require('crypto');\n\nvar authenticate = function(db, username, password, authdb, options, callback) {\n  var numberOfConnections = 0;\n  var errorObject = null;\n\n  if(options['connection'] != null) {\n    //if a connection was explicitly passed on options, then we have only one...\n    numberOfConnections = 1;\n  } else {\n    // Get the amount of connections in the pool to ensure we have authenticated all comments\n    numberOfConnections = db.serverConfig.allRawConnections().length;\n    options['onAll'] = true;\n  }\n\n  // Return connection option\n  options.returnConnection = true;\n\n  // Execute nonce command\n  db.command({'getnonce':1}, options, function(err, result, connection) {\n    // Execute on all the connections\n    if(err == null) {\n      // Nonce used to make authentication request with md5 hash\n      var nonce = result.nonce;\n\n      // Use node md5 generator\n      var md5 = crypto.createHash('md5');\n      // Generate keys used for authentication\n      md5.update(username + \":mongo:\" + password);\n      var hash_password = md5.digest('hex');\n      // Final key\n      md5 = crypto.createHash('md5');\n      md5.update(nonce + username + hash_password);\n      var key = md5.digest('hex');\n      \n      // Creat cmd\n      var cmd = {'authenticate':1, 'user':username, 'nonce':nonce, 'key':key};\n\n      // Execute command\n      db.db(authdb).command(cmd, {connection:connection}, function(err, result) {\n        // Count down\n        numberOfConnections = numberOfConnections - 1;\n        // Ensure we save any error\n        if(err) errorObject = err;\n\n        // Work around the case where the number of connections are 0\n        if(numberOfConnections <= 0 && typeof callback == 'function') {\n          var internalCallback = callback;\n          callback = null;\n\n          if(errorObject == null && result.ok) {\n            db.serverConfig.auth.add('MONGODB-CR', db.databaseName, username, password, authdb);\n            // Return callback\n            internalCallback(errorObject, true);\n          } else {\n            internalCallback(errorObject, false);\n          }\n        }\n      });\n    }\n  });\n}\n\nexports.authenticate = authenticate;"]}