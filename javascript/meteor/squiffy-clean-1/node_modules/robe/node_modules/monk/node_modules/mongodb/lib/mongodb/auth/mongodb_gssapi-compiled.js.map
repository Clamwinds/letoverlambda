{"version":3,"sources":["mongodb_gssapi.js"],"names":[],"mappings":"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","file":"mongodb_gssapi-compiled.js","sourcesContent":["var DbCommand = require('../commands/db_command').DbCommand\n  , utils = require('../utils')\n  , format = require('util').format;\n\n// Kerberos class\nvar Kerberos = null;\nvar MongoAuthProcess = null;\n// Try to grab the Kerberos class\ntry {\n  Kerberos = require('kerberos').Kerberos\n  // Authentication process for Mongo\n  MongoAuthProcess = require('kerberos').processes.MongoAuthProcess\n} catch(err) {}\n\nvar authenticate = function(db, username, password, authdb, options, callback) {\n  var numberOfConnections = 0;\n  var errorObject = null;  \n  // We don't have the Kerberos library\n  if(Kerberos == null) return callback(new Error(\"Kerberos library is not installed\"));  \n\n  if(options['connection'] != null) {\n    //if a connection was explicitly passed on options, then we have only one...\n    numberOfConnections = 1;\n  } else {\n    // Get the amount of connections in the pool to ensure we have authenticated all comments\n    numberOfConnections = db.serverConfig.allRawConnections().length;\n    options['onAll'] = true;\n  }\n\n  // Grab all the connections\n  var connections = options['connection'] != null ? [options['connection']] : db.serverConfig.allRawConnections();\n  var gssapiServiceName = options['gssapiServiceName'] || 'mongodb';\n  var error = null;\n  // Authenticate all connections\n  for(var i = 0; i < numberOfConnections; i++) {\n\n    // Start Auth process for a connection\n    GSSAPIInitialize(db, username, password, authdb, gssapiServiceName, connections[i], function(err, result) {\n      // Adjust number of connections left to connect\n      numberOfConnections = numberOfConnections - 1;\n      // If we have an error save it\n      if(err) error = err;\n\n      // We are done\n      if(numberOfConnections == 0) {\n        if(err) return callback(error, false);\n        // We authenticated correctly save the credentials\n        db.serverConfig.auth.add('GSSAPI', db.databaseName, username, password, authdb, gssapiServiceName);\n        // Return valid callback\n        return callback(null, true);\n      }\n    });    \n  }\n}\n\n//\n// Initialize step\nvar GSSAPIInitialize = function(db, username, password, authdb, gssapiServiceName, connection, callback) {\n  // Create authenticator\n  var mongo_auth_process = new MongoAuthProcess(connection.socketOptions.host, connection.socketOptions.port, gssapiServiceName);\n\n  // Perform initialization\n  mongo_auth_process.init(username, password, function(err, context) {\n    if(err) return callback(err, false);\n\n    // Perform the first step\n    mongo_auth_process.transition('', function(err, payload) {\n      if(err) return callback(err, false);\n\n      // Call the next db step\n      MongoDBGSSAPIFirstStep(mongo_auth_process, payload, db, username, password, authdb, connection, callback);\n    });\n  });\n}\n\n//\n// Perform first step against mongodb\nvar MongoDBGSSAPIFirstStep = function(mongo_auth_process, payload, db, username, password, authdb, connection, callback) {\n  // Build the sasl start command\n  var command = {\n      saslStart: 1\n    , mechanism: 'GSSAPI'\n    , payload: payload\n    , autoAuthorize: 1\n  };\n\n  // Execute first sasl step\n  db._executeQueryCommand(DbCommand.createDbCommand(db, command, {}, '$external'), {connection:connection}, function(err, doc) {\n    if(err) return callback(err, false);\n    // Get the payload\n    doc = doc.documents[0];\n    var db_payload = doc.payload;\n\n    mongo_auth_process.transition(doc.payload, function(err, payload) {\n      if(err) return callback(err, false);\n\n      // MongoDB API Second Step\n      MongoDBGSSAPISecondStep(mongo_auth_process, payload, doc, db, username, password, authdb, connection, callback);\n    });\n  });\n}\n\n//\n// Perform first step against mongodb\nvar MongoDBGSSAPISecondStep = function(mongo_auth_process, payload, doc, db, username, password, authdb, connection, callback) {\n  // Build Authentication command to send to MongoDB\n  var command = {\n      saslContinue: 1\n    , conversationId: doc.conversationId\n    , payload: payload\n  };\n\n  // Execute the command\n  db._executeQueryCommand(DbCommand.createDbCommand(db, command, {}, '$external'), {connection:connection}, function(err, doc) {\n    if(err) return callback(err, false);\n\n    // Get the result document\n    doc = doc.documents[0];\n\n    // Call next transition for kerberos\n    mongo_auth_process.transition(doc.payload, function(err, payload) {\n      if(err) return callback(err, false);\n\n      // Call the last and third step\n      MongoDBGSSAPIThirdStep(mongo_auth_process, payload, doc, db, username, password, authdb, connection, callback);\n    });    \n  });\n}\n\nvar MongoDBGSSAPIThirdStep = function(mongo_auth_process, payload, doc, db, username, password, authdb, connection, callback) {\n  // Build final command\n  var command = {\n      saslContinue: 1\n    , conversationId: doc.conversationId\n    , payload: payload\n  };\n\n  // Let's finish the auth process against mongodb\n  db._executeQueryCommand(DbCommand.createDbCommand(db, command, {}, '$external'), {connection:connection}, function(err, doc) {\n    if(err) return callback(err, false);\n\n    mongo_auth_process.transition(null, function(err, payload) {\n      if(err) return callback(err, false);\n      callback(null, true);\n    });\n  });\n}\n\nexports.authenticate = authenticate;"]}