{"version":3,"sources":["unordered.js"],"names":[],"mappings":"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","file":"unordered-compiled.js","sourcesContent":["var shared = require('../shared')\n\t, common = require('./common')\n\t, utils = require('../../utils')\n  , hasWriteCommands = utils.hasWriteCommands\n  , WriteError = common.WriteError\n  , BatchWriteResult = common.BatchWriteResult\n  , LegacyOp = common.LegacyOp\n  , ObjectID = require('bson').ObjectID\n  , Batch = common.Batch\n  , mergeBatchResults = common.mergeBatchResults;\n\n/**\n * Create a new UnorderedBulkOperation instance (INTERNAL TYPE, do not instantiate directly)\n *\n * Options\n *  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write\n *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)\n *  - **fsync**, (Boolean, default:false) write waits for fsync before returning, from MongoDB 2.6 on, fsync cannot be combined with journal\n *  - **j**, (Boolean, default:false) write waits for journal sync before returning\n *\n * @class Represents a UnorderedBulkOperation\n * @param {Object} collection collection instance.\n * @param {Object} [options] additional options for the collection.\n * @return {Object} a ordered bulk operation instance.\n */\nvar UnorderedBulkOperation = function(collection, options) {\n\toptions = options == null ? {} : options;\n\n\t// Contains reference to self\n\tvar self = this;\n\t// Get the namesspace for the write operations\n  var namespace = collection.collectionName;\n  // Used to mark operation as executed\n  var executed = false;\n\n\t// Current item\n  // var currentBatch = null;\n\tvar currentOp = null;\n\tvar currentIndex = 0;\n  var currentBatchSize = 0;\n  var currentBatchSizeBytes = 0;\n  var batches = [];\n\n  // The current Batches for the different operations\n  var currentInsertBatch = null;\n  var currentUpdateBatch = null;\n  var currentRemoveBatch = null;\n\n\t// Handle to the bson serializer, used to calculate running sizes\n  var db = collection.db;\n\tvar bson = db.bson;\n\n  // Set max byte size\n\tvar maxBatchSizeBytes = db.serverConfig.checkoutWriter().maxBsonSize;\n\tvar maxWriteBatchSize = db.serverConfig.checkoutWriter().maxWriteBatchSize || 1000;\n\n  // Get the write concern\n  var writeConcern = shared._getWriteConcern(collection, options);\n\n  // Final results\n  var bulkResult = {\n  \t  ok: 1\n    , writeErrors: []\n    , writeConcernErrors: []\n    , nInserted: 0\n    , nUpserted: 0\n    , nMatched: 0\n    , nModified: 0\n    , nRemoved: 0\n    , upserted: []\n  };\n\n  // Specify a full class so we can generate documentation correctly\n\tvar FindOperators = function() {\n\t\t/**\n\t\t * Add a single update document to the bulk operation\n\t\t *\n\t\t * @param {Object} doc update operations\n\t\t * @return {UnorderedBulkOperation}\n\t\t * @api public\n\t\t */\n\t\tthis.update = function(updateDocument) {\n\t\t\t// Perform upsert\n\t\t\tvar upsert = typeof currentOp.upsert == 'boolean' ? currentOp.upsert : false;\n\t\t\t\n\t\t\t// Establish the update command\n\t\t\tvar document = {\n\t\t\t\t\tq: currentOp.selector\n\t\t\t\t, u: updateDocument\n\t\t\t\t, multi: true\n\t\t\t\t, upsert: upsert\n\t\t\t}\n\n\t\t\t// Clear out current Op\n\t\t\tcurrentOp = null;\n\t\t\t// Add the update document to the list\n\t\t\treturn addToOperationsList(self, common.UPDATE, document);\n\t\t}\t\n\n\t\t/**\n\t\t * Add a single update one document to the bulk operation\n\t\t *\n\t\t * @param {Object} doc update operations\n\t\t * @return {UnorderedBulkOperation}\n\t\t * @api public\n\t\t */\n\t\tthis.updateOne = function(updateDocument) {\n\t\t\t// Perform upsert\n\t\t\tvar upsert = typeof currentOp.upsert == 'boolean' ? currentOp.upsert : false;\n\t\t\t\n\t\t\t// Establish the update command\n\t\t\tvar document = {\n\t\t\t\t\tq: currentOp.selector\n\t\t\t\t, u: updateDocument\n\t\t\t\t, multi: false\n\t\t\t\t, upsert: upsert\n\t\t\t}\n\n\t\t\t// Clear out current Op\n\t\t\tcurrentOp = null;\n\t\t\t// Add the update document to the list\n\t\t\treturn addToOperationsList(self, common.UPDATE, document);\n\t\t}\n\n\t\t/**\n\t\t * Add a replace one operation to the bulk operation\n\t\t *\n\t\t * @param {Object} doc the new document to replace the existing one with\n\t\t * @return {UnorderedBulkOperation}\n\t\t * @api public\n\t\t */\n\t\tthis.replaceOne = function(updateDocument) {\n\t\t\tthis.updateOne(updateDocument);\n\t\t}\n\n\t\t/**\n\t\t * Upsert modifier for update bulk operation\n\t\t *\n\t\t * @return {UnorderedBulkOperation}\n\t\t * @api public\n\t\t */\n\t\tthis.upsert = function() {\n\t\t\tcurrentOp.upsert = true;\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n\t\t * Add a remove one operation to the bulk operation\n\t\t *\n\t\t * @param {Object} doc selector for the removal of documents\n\t\t * @return {UnorderedBulkOperation}\n\t\t * @api public\n\t\t */\n\t\tthis.removeOne = function() {\t\t\n\t\t\t// Establish the update command\n\t\t\tvar document = {\n\t\t\t\t\tq: currentOp.selector\n\t\t\t\t, limit: 1\n\t\t\t}\n\n\t\t\t// Clear out current Op\n\t\t\tcurrentOp = null;\n\t\t\t// Add the remove document to the list\n\t\t\treturn addToOperationsList(self, common.REMOVE, document);\n\t\t}\n\n\t\t/**\n\t\t * Add a remove operation to the bulk operation\n\t\t *\n\t\t * @param {Object} doc selector for the single document to remove\n\t\t * @return {UnorderedBulkOperation}\n\t\t * @api public\n\t\t */\n\t\tthis.remove = function() {\n\t\t\t// Establish the update command\n\t\t\tvar document = {\n\t\t\t\t\tq: currentOp.selector\n\t\t\t\t, limit: 0\n\t\t\t}\n\n\t\t\t// Clear out current Op\n\t\t\tcurrentOp = null;\n\t\t\t// Add the remove document to the list\n\t\t\treturn addToOperationsList(self, common.REMOVE, document);\t\t\t\t\n\t\t}\n\t}\n\n\t// \n\t// Add to the operations list\n\t//\n\tvar addToOperationsList = function(_self, docType, document) {\n    // Get the bsonSize\n    var bsonSize = bson.calculateObjectSize(document, false);\n    // Throw error if the doc is bigger than the max BSON size\n    if(bsonSize >= maxBatchSizeBytes) throw utils.toError(\"document is larger than the maximum size \" + maxBatchSizeBytes);\n    // Holds the current batch\n    var currentBatch = null;\n    // Get the right type of batch\n    if(docType == common.INSERT) {\n    \tcurrentBatch = currentInsertBatch;\n    } else if(docType == common.UPDATE) {\n    \tcurrentBatch = currentUpdateBatch;\n    } else if(docType == common.REMOVE) {\n    \tcurrentBatch = currentRemoveBatch;\n    }\n\n    // Create a new batch object if we don't have a current one\n    if(currentBatch == null) currentBatch = new Batch(docType, currentIndex);\n    \n    // Check if we need to switch batch type\n    if(currentBatch.batchType != docType) {\n      // Save current batch\n      batches.push(currentBatch);\n      // Create a new batch\n      currentBatch = new Batch(docType, currentIndex);  \n\n      // Reset the current size trackers\n      currentBatchSize = 0;\n      currentBatchSizeBytes = 0;\n    }\n\n    // Check if we need to create a new batch\n    if(((currentBatchSize + 1) >= maxWriteBatchSize)\n      || ((currentBatchSizeBytes +  currentBatchSizeBytes) >= maxBatchSizeBytes)\n      || (currentBatch.batchType != docType)) {\n      // Save the batch to the execution stack\n      batches.push(currentBatch);\n      \n      // Create a new batch\n      currentBatch = new Batch(docType, currentIndex);\n      \n      // Reset the current size trackers\n      currentBatchSize = 0;\n      currentBatchSizeBytes = 0;\n    } else {\n\t    // Update current batch size\n\t    currentBatchSize = currentBatchSize + 1;\n\t    currentBatchSizeBytes = currentBatchSizeBytes + bsonSize;\n    }\n\n    // We have an array of documents\n    if(Array.isArray(document)) {\n    \tthrow util.toError(\"operation passed in cannot be an Array\");\n    } else {\n      currentBatch.operations.push(document);\n      currentBatch.originalIndexes.push(currentIndex);\n      currentIndex = currentIndex + 1;\n    }\n\n    // Save back the current Batch to the right type\n    if(docType == common.INSERT) {\n    \tcurrentInsertBatch = currentBatch;\n    } else if(docType == common.UPDATE) {\n    \tcurrentUpdateBatch = currentBatch;\n    } else if(docType == common.REMOVE) {\n    \tcurrentRemoveBatch = currentBatch;\n    }\n\n    // Update current batch size\n    currentBatchSize = currentBatchSize + 1;\n    currentBatchSizeBytes = currentBatchSizeBytes + bsonSize;\n\n    // Return self\n\t\treturn _self;\n\t}\n\n\t/**\n\t * Add a single insert document to the bulk operation\n\t *\n\t * @param {Object} doc the document to insert\n\t * @return {UnorderedBulkOperation}\n\t * @api public\n\t */\n\tthis.insert = function(document) {\n    if(document._id == null) document._id = new ObjectID();\n\t\treturn addToOperationsList(self, common.INSERT, document);\n\t}\n\n\t/**\n\t * Initiate a find operation for an update/updateOne/remove/removeOne/replaceOne\n\t *\n\t * @param {Object} selector the selector used to locate documents for the operation\n\t * @return {UnorderedBulkOperation}\n\t * @api public\n\t */\n\tthis.find = function(selector) {\n\t\tif (!selector) {\n\t\t\tthrow utils.toError(\"Bulk find operation must specify a selector\");\n\t\t}\n\n\t\t// Save a current selector\n\t\tcurrentOp = {\n\t\t\tselector: selector\n\t\t}\n\n\t\treturn new FindOperators();\n\t}\t\n\n\t//\n\t// Execute the command\n\tvar executeBatch = function(batch, callback) {\n\t\t// Contains the command we are going to execute\n\t\tvar cmd = null;\n\n    // Generate the right update\n    if(batch.batchType == common.UPDATE) {\n      cmd = { update: namespace, updates: batch.operations, ordered: false }\n    } else if(batch.batchType == common.INSERT) {\n      cmd = { insert: namespace, documents: batch.operations, ordered: false }\n    } else if(batch.batchType == common.REMOVE) {\n      cmd = { delete: namespace, deletes: batch.operations, ordered: false }\n    }\n\n    // If we have a write concern\n    if(writeConcern != null) {\n      cmd.writeConcern = writeConcern;\n    }    \n\n\t\t// Execute the write command\n\t\tdb.command(cmd, function(err, result) {\n\t\t\tcallback(null, mergeBatchResults(false, batch, bulkResult, err, result));\n\t\t});\n\t}\n\n\t//\n\t// Execute all the commands\n\tvar executeBatches = function(callback) {\n\t\tvar numberOfCommandsToExecute = batches.length;\n\t\t// Execute over all the batches\n\t\tfor(var i = 0; i < batches.length; i++) {\n\t\t\texecuteBatch(batches[i], function(err, result) {\n\t\t\t\tnumberOfCommandsToExecute = numberOfCommandsToExecute - 1;\n\n\t\t\t\t// Execute\n\t\t\t\tif(numberOfCommandsToExecute == 0) {\n\t\t\t\t\t// If we have an error stop\n\t\t\t\t\tif(bulkResult.ok == 0 && callback) {\n\t\t\t\t\t\treturn callback(bulkResult.error, null);\n\t\t\t\t\t}\n\n\t\t\t\t\tcallback(null, new BatchWriteResult(bulkResult));\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Execute the unordered bulk operation\n\t *\n\t * Options\n\t *  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write\n\t *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)\n\t *  - **fsync**, (Boolean, default:false) write waits for fsync before returning, from MongoDB 2.6 on, fsync cannot be combined with journal\n\t *  - **j**, (Boolean, default:false) write waits for journal sync before returning\n\t *\n\t * @param {Object} [options] additional options during update.\n\t * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from from the unordered bulk operation.\n\t * @return {null}\n\t * @api public\n\t */\n\tthis.execute = function(_writeConcern, callback) {\n\t\tif(executed) throw util.toError(\"batch cannot be re-executed\");\n\t\tif(typeof _writeConcern == 'function') {\n\t\t\tcallback = _writeConcern;\n\t\t} else {\n\t\t\twriteConcern = _writeConcern;\n\t\t}\n\n    // If we have current batch\n    if(currentInsertBatch) batches.push(currentInsertBatch);\n    if(currentUpdateBatch) batches.push(currentUpdateBatch);\n    if(currentRemoveBatch) batches.push(currentRemoveBatch);\n\n\t\t// If we have no operations in the bulk raise an error\n\t\tif(batches.length == 0) {\n\t\t\tthrow utils.toError(\"Invalid Operation, No operations in bulk\");\n\t\t}\n\n\t\t// Check if we support bulk commands\n\t\tif(hasWriteCommands(db.serverConfig.checkoutWriter()))\n\t\t\treturn executeBatches(function(err, result) {\n\t\t\t\tcallback(err, result);\n\t\t\t});\n\n\t\t// Set nModified to null as we don't support this field\n\t\tbulkResult.nModified = null;\n\n\t\t// Run in backward compatibility mode\n\t\tbackwardsCompatibilityExecuteCommands(function(err, result) {\n\t\t\tcallback(err, result);\n\t\t});\n\t}\t\n\n\t// \n\t// Execute the inserts\n\tvar executeInserts = function(_collection, _batch, _result, _callback) {\n\t\tvar totalNumberOfInserts = _batch.operations.length;\n\n\t\t// Options for the update operation\n\t\tvar batchOptions = writeConcern || {};\n\n\t\t// Execute the op\n\t\tvar executeLegacyInsert = function(_i, _op, _options, __callback) {\n\t\t\t// Execute the update\n\t\t\t_collection.insert(_op.operation, _options, function(err, r) {\n\t\t\t\t// If we have don't have w:0 merge the result\n\t\t\t\tif(_options.w == null || _options.w != 0) {\n\t\t\t\t\t// Merge the results in \n\t\t\t\t\tvar result = common.mergeLegacyResults(false, _op.operation, _batch, bulkResult, err || r, _op.index);\n\t\t\t\t\tif(result == false) {\n\t\t\t\t\t\treturn _callback(null, new BatchWriteResult(bulkResult));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t__callback(null, _result);\n\t\t\t});\n\t\t}\n\n\t\t// Execute all the insert operations\n\t\tfor(var i = 0; i < _batch.operations.length; i++) {\n\t\t\tvar legacyOp = new LegacyOp(_batch.batchType, _batch.operations[i], _batch.originalIndexes[i]);\n\t\t\texecuteLegacyInsert(i, legacyOp, batchOptions, function(err, result) {\n\t\t\t\ttotalNumberOfInserts = totalNumberOfInserts - 1;\n\t\t\t\t\n\t\t\t\t// No more inserts\n\t\t\t\tif(totalNumberOfInserts == 0) {\n\t\t\t\t\t_callback(null, _result);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t//\n\t// Execute updates\n\tvar executeUpdates = function(_collection, _batch, _result, _callback) {\n\t\tvar totalNumberOfUpdates = _batch.operations.length;\n\t\t// Options for the update operation\n\t\tvar batchOptions = writeConcern || {};\n\n\t\t// Execute the op\n\t\tvar executeLegacyUpdate = function(_i, _op, _options, __callback) {\n\t\t\tvar options = common.cloneOptions(batchOptions);\n\n\t\t\t// Add any additional options\n\t\t\tif(_op.operation.multi != null) options.multi = _op.operation.multi ? true : false;\n\t\t\tif(_op.operation.upsert != null) options.upsert = _op.operation.upsert;\n\n\t\t\t// Execute the update\n\t\t\t_collection.update(_op.operation.q, _op.operation.u, options, function(err, r, full) {\n\t\t\t\t// If we have don't have w:0 merge the result\n\t\t\t\tif(options.w == null || options.w != 0) {\n\t\t\t\t\t// Merge the results in \n\t\t\t\t\tvar result = common.mergeLegacyResults(false, _op.operation, _batch, bulkResult, err || full, _op.index);\n\t\t\t\t\tif(result == false) {\n\t\t\t\t\t\treturn _callback(null, new BatchWriteResult(bulkResult));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn __callback(null, _result);\n\t\t\t});\n\t\t}\n\n\t\t// Execute all the insert operations\n\t\tfor(var i = 0; i < _batch.operations.length; i++) {\n\t\t\tvar legacyOp = new LegacyOp(_batch.batchType, _batch.operations[i], _batch.originalIndexes[i]);\n\t\t\texecuteLegacyUpdate(i, legacyOp, options, function(err, result) {\n\t\t\t\ttotalNumberOfUpdates = totalNumberOfUpdates - 1;\n\t\t\t\t\n\t\t\t\t// No more inserts\n\t\t\t\tif(totalNumberOfUpdates == 0) {\n\t\t\t\t\t_callback(null, _result);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t//\n\t// Execute updates\n\tvar executeRemoves = function(_collection, _batch, _result, _callback) {\n\t\tvar totalNumberOfRemoves = _batch.operations.length;\n\t\t// Options for the update operation\n\t\tvar batchOptions = writeConcern || {};\n\n\t\t// Execute the op\n\t\tvar executeLegacyRemove = function(_i, _op, _options, __callback) {\n\t\t\tvar options = common.cloneOptions(batchOptions);\n\n\t\t\t// Add any additional options\n\t\t\tif(_op.operation.limit != null) options.single = _op.operation.limit == 1 ? true : false;\n\n\t\t\t// Execute the update\n\t\t\t_collection.remove(_op.operation.q, options, function(err, r) {\n\t\t\t\t// If we have don't have w:0 merge the result\n\t\t\t\tif(options.w == null || options.w != 0) {\n\t\t\t\t\t// Merge the results in \n\t\t\t\t\tvar result = common.mergeLegacyResults(false, _op.operation, _batch, bulkResult, err || r, _op.index);\n\t\t\t\t\tif(result == false) {\n\t\t\t\t\t\treturn _callback(null, new BatchWriteResult(bulkResult));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn __callback(null, _result);\n\t\t\t});\n\t\t}\n\n\t\t// Execute all the insert operations\n\t\tfor(var i = 0; i < _batch.operations.length; i++) {\n\t\t\tvar legacyOp = new LegacyOp(_batch.batchType, _batch.operations[i], _batch.originalIndexes[i]);\n\t\t\texecuteLegacyRemove(i, legacyOp, options, function(err, result) {\n\t\t\t\ttotalNumberOfRemoves = totalNumberOfRemoves - 1;\n\t\t\t\t\n\t\t\t\t// No more inserts\n\t\t\t\tif(totalNumberOfRemoves == 0) {\n\t\t\t\t\t_callback(null, _result);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t//\n\t// Execute all operation in backwards compatible fashion\n\tvar backwardsCompatibilityExecuteCommands = function(callback) {\n\t\tif(batches.length == 0) {\n\t\t\treturn callback(null, new BatchWriteResult(bulkResult));\n\t\t}\n\n\t\t// Ordered execution of the command\n\t\tvar batch = batches.shift();\n\n\t\t// Process the legacy operations\n\t\tvar processLegacyOperations = function(err, results) {\n\t\t\t// Merge the results together\n\t\t\tvar mergeResult = mergeBatchResults(false, batch, bulkResult, err, results);\n\t\t\tif(mergeResult != null) {\n\t\t\t\treturn callback(null, mergeResult)\n\t\t\t}\n\n\t\t\t// If we have an error stop\n\t\t\tif(bulkResult.ok == 0 && callback) {\n\t\t\t\tvar internalCallback = callback;\n\t\t\t\tcallback = null;\n\t\t\t\treturn internalCallback(bulkResult.error, null);\n\t\t\t} else if(bulkResult.ok == 0 && callback == null) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Execute the next step\n\t\t\tbackwardsCompatibilityExecuteCommands(callback);\t\t\t\n\t\t}\n\n\t\t// Execute an insert batch\n\t\tif(batch.batchType == common.INSERT) {\n\t\t\treturn executeInserts(collection, batch, {n: 0}, processLegacyOperations);\n\t\t}\n\n\t\t// Execute an update batch\n\t\tif(batch.batchType == common.UPDATE) {\n\t\t\treturn executeUpdates(collection, batch, {n: 0}, processLegacyOperations);\n\t\t}\n\n\t\t// Execute an update batch\n\t\tif(batch.batchType == common.REMOVE) {\n\t\t\treturn executeRemoves(collection, batch, {n: 0}, processLegacyOperations);\n\t\t}\n\t}\t\n}\n\n/**\n * Returns an unordered batch object\n *\n */\nvar initializeUnorderedBulkOp = function(options) {\n\treturn new UnorderedBulkOperation(this, options);\n}\n\nexports.initializeUnorderedBulkOp = initializeUnorderedBulkOp;"]}