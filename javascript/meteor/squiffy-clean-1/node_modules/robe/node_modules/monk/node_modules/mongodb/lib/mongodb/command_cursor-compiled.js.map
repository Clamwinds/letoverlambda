{"version":3,"sources":["command_cursor.js"],"names":[],"mappings":"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","file":"command_cursor-compiled.js","sourcesContent":["var Long = require('bson').Long\n  , Readable = require('stream').Readable\n  , GetMoreCommand = require('./commands/get_more_command').GetMoreCommand\n  , inherits = require('util').inherits;\n\nvar CommandCursor = function(db, collection, command, options) {  \n  // Ensure empty options if no options passed\n  options = options || {};  \n  \n  // Set up\n  Readable.call(this, {objectMode: true});\n\n  // Default cursor id is 0\n  var cursorId = options.cursorId || Long.fromInt(0);\n  var zeroCursor = Long.fromInt(0);\n  var state = 'init';\n  var batchSize = options.batchSize || 0;\n\n  // Hardcode batch size\n  if(command && command.cursor) {\n    command.cursor.batchSize = 1;\n    batchSize = command.cursor.batchSize || 0;\n  }\n\n  // BatchSize\n  var raw = options.raw || false;\n  var readPreference = options.readPreference || 'primary';\n\n  // Checkout a connection\n  var connection = db.serverConfig.checkoutReader(readPreference);\n  // MaxTimeMS\n  var maxTimeMS = options.maxTimeMS;\n\n  // Contains all the items\n  var items = options.items || null;\n\n  // Execute getmore\n  var getMore = function(callback) {\n    // Resolve more of the cursor using the getMore command\n    var getMoreCommand = new GetMoreCommand(db\n      , db.databaseName + \".\" + collection.collectionName\n      , batchSize\n      , cursorId\n    );\n\n    // Set up options\n    var command_options = { connection:connection };\n\n    // Execute the getMore Command\n    db._executeQueryCommand(getMoreCommand, command_options, function(err, result) {\n      if(err) {\n        items = [];\n        state = 'closed';\n        return callback(err);\n      }\n\n      // Return all the documents\n      callback(null, result);\n    });    \n  }\n\n  var exhaustGetMore = function(callback) {\n    getMore(function(err, result) {\n      if(err) {\n        items = [];\n        state = 'closed';\n        return callback(err, null);\n      }\n\n      // Add the items\n      items = items.concat(result.documents);      \n\n      // Set the cursor id\n      cursorId = result.cursorId;\n      if(typeof cursorId == 'number') cursorId = Long.fromNumber(cursorId);\n      \n      // If the cursor is done\n      if(result.cursorId.equals(zeroCursor)) {\n        return callback(null, items);\n      } \n\n      // Check the cursor id\n      exhaustGetMore(callback);\n    });\n  }\n\n  var exhaustGetMoreEach = function(callback) {\n    getMore(function(err, result) {\n      if(err) {\n        items = [];\n        state = 'closed';\n        return callback(err, null);\n      }\n\n      // Add the items\n      items = result.documents;\n\n      // Emit all the items in the first batch\n      while(items.length > 0) {\n        callback(null, items.shift());\n      }\n      \n      // Set the cursor id\n      cursorId = result.cursorId;\n      if(typeof cursorId == 'number') cursorId = Long.fromNumber(cursorId);\n\n      // If the cursor is done\n      if(result.cursorId.equals(zeroCursor)) {\n        state = \"closed\";\n        return callback(null, null);\n      } \n      \n      // Check the cursor id\n      exhaustGetMoreEach(callback);\n    });\n  }\n\n  //\n  // Get all the elements\n  //\n  this.get = function(options, callback) {\n    if(typeof options == 'function') {\n      callback = options;\n      options = {};\n    }\n\n    // Set the connection to the passed in one if it's provided\n    connection = options.connection ? options.connection : connection;\n\n    // Command options\n    var _options = {connection:connection};\n    if(typeof maxTimeMS == 'number') _options.maxTimeMS = maxTimeMS;\n\n    // If we have a cursor Id already not equal to 0 we are just going to\n    // exhaust the cursor\n    if(cursorId.notEquals(zeroCursor)) {\n      // If no items set an empty array\n      items = items || [];\n      // Exhaust the cursor\n      return exhaustGetMore(callback);\n    }\n\n    // Execute the internal command first\n    db.command(command, _options, function(err, result) {\n      if(err) {\n        state = 'closed';\n        return callback(err, null);\n      }\n\n      // Retrieve the cursor id\n      cursorId = result.cursor.id;\n      if(typeof cursorId == 'number') cursorId = Long.fromNumber(cursorId);\n\n      // Validate cursorId\n      if(cursorId.equals(zeroCursor)) {\n        return callback(null, result.cursor.firstBatch);\n      };\n\n      // Add to the items\n      items = result.cursor.firstBatch;\n      // Execute the getMore\n      exhaustGetMore(callback);\n    });\n  }\n\n  //\n  // Iterate over all the items\n  //\n  this.each = function(options, callback) {\n    if(typeof options == 'function') {\n      callback = options;\n      options = {};\n    }\n\n    // If it's a closed cursor return error\n    if(this.isClosed()) return callback(new Error(\"cursor is closed\"));\n    // Set the connection to the passed in one if it's provided\n    connection = options.connection ? options.connection : connection;\n  \n    // Command options\n    var _options = {connection:connection};\n    if(typeof maxTimeMS == 'number') _options.maxTimeMS = maxTimeMS;\n\n    // If we have a cursor Id already not equal to 0 we are just going to\n    // exhaust the cursor\n    if(cursorId.notEquals(zeroCursor)) {\n      // If no items set an empty array\n      items = items || [];\n\n      // Emit all the items in the first batch\n      while(items.length > 0) {\n        callback(null, items.shift());\n      }\n\n      // Exhaust the cursor\n      return exhaustGetMoreEach(callback);\n    }\n\n    // Execute the internal command first\n    db.command(command, _options, function(err, result) {\n      if(err) {\n        state = 'closed';\n        return callback(err, null);\n      }\n\n      // Get all the items\n      items = result.cursor.firstBatch;\n\n      // Emit all the items in the first batch\n      while(items.length > 0) {\n        callback(null, items.shift());\n      }\n\n      // Retrieve the cursor id\n      cursorId = result.cursor.id;\n      if(typeof cursorId == 'number') cursorId = Long.fromNumber(cursorId);\n\n      // If no cursor we just finish up the current batch of items\n      if(cursorId.equals(zeroCursor)) {\n        state = 'closed';        \n        return callback(null, null);\n      }\n\n      // Emit each until no more getMore's\n      exhaustGetMoreEach(callback);\n    });\n  }\n\n  //\n  // Get the next object\n  //\n  this.next = function(options, callback) {\n    if(typeof options == 'function') {\n      callback = options;\n      options = {};\n    }\n\n    // If it's a closed cursor return error\n    if(this.isClosed()) return callback(new Error(\"cursor is closed\"));\n\n    // Set the connection to the passed in one if it's provided\n    connection = options.connection ? options.connection : connection;\n  \n    // Command options\n    var _options = {connection:connection};\n    if(typeof maxTimeMS == 'number') _options.maxTimeMS = maxTimeMS;\n\n    // If we have a cursor Id already not equal to 0 we are just going to\n    // going to bypass the command execution\n    if(cursorId.notEquals(zeroCursor)) {\n      items = items || [];\n    }    \n\n    // Execute the internal command first\n    if(!items) {\n      db.command(command, _options, function(err, result) {\n        if(err) {\n          state = 'closed';\n          return callback(err, null);\n        }\n\n        // Retrieve the cursor id\n        cursorId = result.cursor.id;\n        if(typeof cursorId == 'number') cursorId = Long.fromNumber(cursorId);\n        // Get the first batch results\n        items = result.cursor.firstBatch;\n        // We have items return the first one\n        if(items.length > 0) {\n          callback(null, items.shift());\n        } else {\n          state = 'closed';\n          callback(null, null);\n        }\n      });\n    } else if(items.length > 0) {\n      callback(null, items.shift());\n    } else if(items.length == 0 && cursorId.equals(zeroCursor)) {\n      state = 'closed';\n      callback(null, null);\n    } else {\n      // Execute a getMore\n      getMore(function(err, result) {\n        if(err) {\n          state = 'closed';\n          return callback(err, null);\n        }\n\n        // Set the cursor id\n        cursorId = result.cursorId;\n        if(typeof cursorId == 'number') cursorId = Long.fromNumber(cursorId);\n\n        // Add the items\n        items = items.concat(result.documents);\n        // If no more items\n        if(items.length == 0) {\n          state = 'closed';\n          return callback(null, null);\n        }\n\n        // Return the item\n        return callback(null, items.shift());\n      })\n    }\n  }\n\n  // Validate if the cursor is closed\n  this.isClosed = function() {\n    return state == 'closed';\n  }\n\n  // Allow us to set the MaxTimeMS\n  this.maxTimeMS = function(_maxTimeMS) {\n    maxTimeMS = _maxTimeMS;\n  }\n\n  // Close the cursor sending a kill cursor command if needed\n  this.close = function(callback) {\n    // Close the cursor if not needed\n    if(cursorId instanceof Long && cursorId.greaterThan(Long.fromInt(0))) {\n      try {\n        var command = new KillCursorCommand(this.db, [cursorId]);\n        // Added an empty callback to ensure we don't throw any null exceptions\n        db._executeQueryCommand(command, {connection:connection});\n      } catch(err) {}\n    }\n\n    // Null out the connection\n    connection = null;\n    // Reset cursor id\n    cursorId = Long.fromInt(0);\n    // Set to closed status\n    state = 'closed';\n    // Clear out all the items\n    items = null;\n\n    if(callback) {\n      callback(null, null);\n    }    \n  }\n\n  //\n  // Stream method\n  //\n  this._read = function(n) {\n    var self = this;\n    // Read the next command cursor doc\n    self.next(function(err, result) {\n      if(err) {\n        self.emit('error', err);\n        return self.push(null);\n      }\n\n      self.push(result);\n    });\n  }\n}\n\n// Inherit from Readable\nif(Readable != null) {\n  inherits(CommandCursor, Readable);  \n}\n\nexports.CommandCursor = CommandCursor;"]}