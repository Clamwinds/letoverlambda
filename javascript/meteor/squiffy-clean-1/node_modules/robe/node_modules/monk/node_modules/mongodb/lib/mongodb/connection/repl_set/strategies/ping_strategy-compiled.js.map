{"version":3,"sources":["ping_strategy.js"],"names":[],"mappings":"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","file":"ping_strategy-compiled.js","sourcesContent":["var Server = require(\"../../server\").Server\n  , format = require('util').format;\n\n// The ping strategy uses pings each server and records the\n// elapsed time for the server so it can pick a server based on lowest\n// return time for the db command {ping:true}\nvar PingStrategy = exports.PingStrategy = function(replicaset, secondaryAcceptableLatencyMS) {\n  this.replicaset = replicaset;\n  this.secondaryAcceptableLatencyMS = secondaryAcceptableLatencyMS;\n  this.state = 'disconnected';\n  // Interval of ping attempts\n  this.pingInterval = replicaset.options.socketOptions.pingInterval || 5000;\n  // Timeout for ping response, default - no timeout\n  this.pingTimeout = replicaset.options.socketOptions.pingTimeout || null;\n  // Class instance\n  this.Db = require(\"../../../db\").Db;\n  // Active db connections\n  this.dbs = {};\n  // Current server index\n  this.index = 0;\n  // Logger api\n  this.Logger = null;\n}\n\n// Starts any needed code\nPingStrategy.prototype.start = function(callback) {\n  // already running?\n  if ('connected' == this.state) return;\n\n  this.state = 'connected';\n\n  // Start ping server\n  this._pingServer(callback);\n}\n\n// Stops and kills any processes running\nPingStrategy.prototype.stop = function(callback) {\n  // Stop the ping process\n  this.state = 'disconnected';\n\n  // Stop all the server instances\n  for(var key in this.dbs) {\n    this.dbs[key].close();\n  }\n\n  // optional callback\n  callback && callback(null, null);\n}\n\nPingStrategy.prototype.checkoutConnection = function(tags, secondaryCandidates) {\n  // Servers are picked based on the lowest ping time and then servers that lower than that + secondaryAcceptableLatencyMS\n  // Create a list of candidat servers, containing the primary if available\n  var candidateServers = [];\n  var self = this;\n\n  // If we have not provided a list of candidate servers use the default setup\n  if(!Array.isArray(secondaryCandidates)) {\n    candidateServers = this.replicaset._state.master != null ? [this.replicaset._state.master] : [];\n    // Add all the secondaries\n    var keys = Object.keys(this.replicaset._state.secondaries);\n    for(var i = 0; i < keys.length; i++) {\n      candidateServers.push(this.replicaset._state.secondaries[keys[i]])\n    }\n  } else {\n    candidateServers = secondaryCandidates;\n  }\n\n  // Final list of eligable server\n  var finalCandidates = [];\n\n  // If we have tags filter by tags\n  if(tags != null && typeof tags == 'object') {\n    // If we have an array or single tag selection\n    var tagObjects = Array.isArray(tags) ? tags : [tags];\n    // Iterate over all tags until we find a candidate server\n    for(var _i = 0; _i < tagObjects.length; _i++) {\n      // Grab a tag object\n      var tagObject = tagObjects[_i];\n      // Matching keys\n      var matchingKeys = Object.keys(tagObject);\n      // Remove any that are not tagged correctly\n      for(var i = 0; i < candidateServers.length; i++) {\n        var server = candidateServers[i];\n        // If we have tags match\n        if(server.tags != null) {\n          var matching = true;\n\n          // Ensure we have all the values\n          for(var j = 0; j < matchingKeys.length; j++) {\n            if(server.tags[matchingKeys[j]] != tagObject[matchingKeys[j]]) {\n              matching = false;\n              break;\n            }\n          }\n\n          // If we have a match add it to the list of matching servers\n          if(matching) {\n            finalCandidates.push(server);\n          }\n        }\n      }\n    }\n  } else {\n    // Final array candidates\n    var finalCandidates = candidateServers;\n  }\n\n  // Filter out any non-connected servers\n  finalCandidates = finalCandidates.filter(function(s) {\n    return s.isConnected();\n  })\n\n  // Sort by ping time\n  finalCandidates.sort(function(a, b) {\n    return a.runtimeStats['pingMs'] > b.runtimeStats['pingMs'];\n  });\n\n  if(0 === finalCandidates.length)\n    return new Error(\"No replica set members available for query\");\n\n  // find lowest server with a ping time\n  var lowest = finalCandidates.filter(function (server) {\n    return undefined != server.runtimeStats.pingMs;\n  })[0];\n\n  if(!lowest) {\n    lowest = finalCandidates[0];\n  }\n\n  // convert to integer\n  var lowestPing = lowest.runtimeStats.pingMs | 0;\n  \n  // determine acceptable latency\n  var acceptable = lowestPing + this.secondaryAcceptableLatencyMS;\n\n  // remove any server responding slower than acceptable\n  var len = finalCandidates.length;\n  while(len--) {\n    if(finalCandidates[len].runtimeStats['pingMs'] > acceptable) {\n      finalCandidates.splice(len, 1);\n    }\n  }\n\n  if(self.logger && self.logger.debug) {    \n    self.logger.debug(\"Ping strategy selection order for tags\", tags);\n    finalCandidates.forEach(function(c) {\n      self.logger.debug(format(\"%s:%s = %s ms\", c.host, c.port, c.runtimeStats['pingMs']), null);\n    })    \n  }\n\n  // If no candidates available return an error\n  if(finalCandidates.length == 0)\n    return new Error(\"No replica set members available for query\");\n\n  // Ensure no we don't overflow\n  this.index = this.index % finalCandidates.length\n  // Pick a random acceptable server  \n  var connection = finalCandidates[this.index].checkoutReader();\n  // Point to next candidate (round robin style)\n  this.index = this.index + 1;\n\n  if(self.logger && self.logger.debug) {    \n    if(connection)\n      self.logger.debug(\"picked server %s:%s\", connection.socketOptions.host, connection.socketOptions.port);\n  }\n\n  return connection;\n}\n\nPingStrategy.prototype._pingServer = function(callback) {\n  var self = this;\n\n  // Ping server function\n  var pingFunction = function() {\n    // Our state changed to disconnected or destroyed return\n    if(self.state == 'disconnected' || self.state == 'destroyed') return;\n    // If the replicaset is destroyed return\n    if(self.replicaset.isDestroyed() || self.replicaset._serverState == 'disconnected') return\n\n    // Create a list of all servers we can send the ismaster command to\n    var allServers = self.replicaset._state.master != null ? [self.replicaset._state.master] : [];\n\n    // Secondary keys\n    var keys = Object.keys(self.replicaset._state.secondaries);\n    // Add all secondaries\n    for(var i = 0; i < keys.length; i++) {\n      allServers.push(self.replicaset._state.secondaries[keys[i]]);\n    }\n\n    // Number of server entries\n    var numberOfEntries = allServers.length;\n\n    // We got keys\n    for(var i = 0; i < allServers.length; i++) {\n\n      // We got a server instance\n      var server = allServers[i];\n\n      // Create a new server object, avoid using internal connections as they might\n      // be in an illegal state\n      new function(serverInstance) {\n        var _db = self.dbs[serverInstance.host + \":\" + serverInstance.port];\n        // If we have a db\n        if(_db != null) {\n          // Startup time of the command\n          var startTime = Date.now();\n\n          // Execute ping command in own scope\n          var _ping = function(__db, __serverInstance) {\n\n            // Server unavailable. Checks only if pingTimeout defined & greater than 0\n            var _failTimer = self.pingTimeout ? setTimeout(function () {\n              if(null != __serverInstance.runtimeStats && __serverInstance.isConnected()) {\n                __serverInstance.close();\n              }\n            }, self.pingTimeout) : null;\n\n            // Execute ping on this connection\n            __db.executeDbCommand({ping:1}, {failFast:true}, function(err) {\n\n              // Server available\n              clearTimeout(_failTimer);\n\n              // Emit the ping\n              self.replicaset.emit(\"ping\", err, serverInstance);\n\n              if(err) {\n                delete self.dbs[__db.serverConfig.host + \":\" + __db.serverConfig.port];\n                __db.close();\n                return done();\n              }\n\n              if(null != __serverInstance.runtimeStats && __serverInstance.isConnected()) {\n                __serverInstance.runtimeStats['pingMs'] = Date.now() - startTime;\n              }\n\n              __db.executeDbCommand({ismaster:1}, {failFast:true}, function(err, result) {\n                // Emit the ping\n                self.replicaset.emit(\"ping_ismaster\", err, result, serverInstance);\n\n                if(err) {\n                  delete self.dbs[__db.serverConfig.host + \":\" + __db.serverConfig.port];\n                  __db.close();\n                  return done();\n                }\n\n                // Process the ismaster for the server\n                if(result && result.documents && self.replicaset.processIsMaster) {\n                  self.replicaset.processIsMaster(__serverInstance, result.documents[0]);\n                }\n\n                // Done with the pinging\n                done();\n              });\n            });            \n          };\n          // Ping\n          _ping(_db, serverInstance);\n        } else {\n          var connectTimeoutMS = self.replicaset.options.socketOptions \n            ? self.replicaset.options.socketOptions.connectTimeoutMS : 0\n\n          // Create a new master connection\n          var _server = new Server(serverInstance.host, serverInstance.port, {\n            auto_reconnect: false,\n            returnIsMasterResults: true,\n            slaveOk: true,\n            poolSize: 1,\n            socketOptions: { connectTimeoutMS: connectTimeoutMS },\n            ssl: self.replicaset.options.ssl,\n            sslValidate: self.replicaset.options.sslValidate,\n            sslCA: self.replicaset.options.sslCA,\n            sslCert: self.replicaset.options.sslCert,\n            sslKey: self.replicaset.options.sslKey,\n            sslPass: self.replicaset.options.sslPass\n          });\n\n          // Create Db instance        \n          var _db = new self.Db('local', _server, { safe: true });\n          _db.on(\"close\", function() {\n            delete self.dbs[this.serverConfig.host + \":\" + this.serverConfig.port];\n          })\n\n          var _ping = function(__db, __serverInstance) {\n            if(self.state == 'disconnected') {\n              self.stop();\n              return;\n            }\n\n            __db.open(function(err, db) {  \n              // Emit ping connect\n              self.replicaset.emit(\"ping_connect\", err, __serverInstance);\n\n              if(self.state == 'disconnected' && __db != null) {\n                return __db.close();\n              }\n\n              if(err) {\n                delete self.dbs[__db.serverConfig.host + \":\" + __db.serverConfig.port];\n                __db.close();\n                return done();\n              }\n\n              // Save instance\n              self.dbs[__db.serverConfig.host + \":\" + __db.serverConfig.port] = __db;\n\n              // Startup time of the command\n              var startTime = Date.now();\n\n              // Execute ping on this connection\n              __db.executeDbCommand({ping:1}, {failFast:true}, function(err) {\n                self.replicaset.emit(\"ping\", err, __serverInstance);\n                \n                if(err) {\n                  delete self.dbs[__db.serverConfig.host + \":\" + __db.serverConfig.port];\n                  __db.close();\n                  return done();\n                }\n\n                if(null != __serverInstance.runtimeStats && __serverInstance.isConnected()) {\n                  __serverInstance.runtimeStats['pingMs'] = Date.now() - startTime;\n                }\n\n                __db.executeDbCommand({ismaster:1}, {failFast:true}, function(err, result) {\n                  self.replicaset.emit(\"ping_ismaster\", err, result, __serverInstance);\n\n                  if(err) {\n                    delete self.dbs[__db.serverConfig.host + \":\" + __db.serverConfig.port];\n                    __db.close();\n                    return done();\n                  }\n    \n                  // Process the ismaster for the server\n                  if(result && result.documents && self.replicaset.processIsMaster) {\n                    self.replicaset.processIsMaster(__serverInstance, result.documents[0]);\n                  }\n\n                  // Done with the pinging\n                  done();\n                });\n              });\n            });            \n          };\n\n          // Ping the server\n          _ping(_db, serverInstance);\n        }\n\n        function done() {\n          // Adjust the number of checks\n          numberOfEntries--;\n\n          // If we are done with all results coming back trigger ping again\n          if(0 === numberOfEntries && 'connected' == self.state) {\n            setTimeout(pingFunction, self.pingInterval);\n          }\n        }\n      }(server);\n    }\n  }\n\n  // Start pingFunction\n  pingFunction();\n\n  callback && callback(null);\n}\n"]}