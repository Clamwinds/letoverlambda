{"version":3,"sources":["statistics_strategy.js"],"names":[],"mappings":"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","file":"statistics_strategy-compiled.js","sourcesContent":["// The Statistics strategy uses the measure of each end-start time for each\n// query executed against the db to calculate the mean, variance and standard deviation\n// and pick the server which the lowest mean and deviation\nvar StatisticsStrategy = exports.StatisticsStrategy = function(replicaset) {\n  this.replicaset = replicaset;\n  // Logger api\n  this.Logger = null;  \n}\n\n// Starts any needed code\nStatisticsStrategy.prototype.start = function(callback) {\n  callback && callback(null, null);\n}\n\nStatisticsStrategy.prototype.stop = function(callback) {\n  callback && callback(null, null);\n}\n\nStatisticsStrategy.prototype.checkoutConnection = function(tags, secondaryCandidates) {\n  // Servers are picked based on the lowest ping time and then servers that lower than that + secondaryAcceptableLatencyMS\n  // Create a list of candidat servers, containing the primary if available\n  var candidateServers = [];\n\n  // If we have not provided a list of candidate servers use the default setup\n  if(!Array.isArray(secondaryCandidates)) {\n    candidateServers = this.replicaset._state.master != null ? [this.replicaset._state.master] : [];\n    // Add all the secondaries\n    var keys = Object.keys(this.replicaset._state.secondaries);\n    for(var i = 0; i < keys.length; i++) {\n      candidateServers.push(this.replicaset._state.secondaries[keys[i]])\n    }\n  } else {\n    candidateServers = secondaryCandidates;\n  }\n\n  // Final list of eligable server\n  var finalCandidates = [];\n\n  // If we have tags filter by tags\n  if(tags != null && typeof tags == 'object') {\n    // If we have an array or single tag selection\n    var tagObjects = Array.isArray(tags) ? tags : [tags];\n    // Iterate over all tags until we find a candidate server\n    for(var _i = 0; _i < tagObjects.length; _i++) {\n      // Grab a tag object\n      var tagObject = tagObjects[_i];\n      // Matching keys\n      var matchingKeys = Object.keys(tagObject);\n      // Remove any that are not tagged correctly\n      for(var i = 0; i < candidateServers.length; i++) {\n        var server = candidateServers[i];\n        // If we have tags match\n        if(server.tags != null) {\n          var matching = true;\n\n          // Ensure we have all the values\n          for(var j = 0; j < matchingKeys.length; j++) {\n            if(server.tags[matchingKeys[j]] != tagObject[matchingKeys[j]]) {\n              matching = false;\n              break;\n            }\n          }\n\n          // If we have a match add it to the list of matching servers\n          if(matching) {\n            finalCandidates.push(server);\n          }\n        }\n      }\n    }\n  } else {\n    // Final array candidates\n    var finalCandidates = candidateServers;\n  }\n\n  finalCandidates.sort(function(a, b) {\n    return a.runtimeStats.queryStats.sScore > b.runtimeStats.queryStats.sScore;\n  });\n\n  // If no candidates available return an error\n  if(finalCandidates.length == 0) return new Error(\"No replica set members available for query\");\n\n  var bestCandidates = [finalCandidates[0]];\n  for (var i = 1; i < finalCandidates.length; ++i) {\n    if (finalCandidates[i].runtimeStats.queryStats.sScore > finalCandidates[i - 1].runtimeStats.queryStats.sScore) {\n      break;\n    } else {\n      bestCandidates.push(finalCandidates[i]);\n    }\n  }\n\n  return bestCandidates[Math.floor(Math.random() * bestCandidates.length)].checkoutReader();\n}\n"]}