{"version":3,"sources":["chunk.js"],"names":[],"mappings":"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","file":"chunk-compiled.js","sourcesContent":["var Binary = require('bson').Binary,\n  ObjectID = require('bson').ObjectID;\n\n/**\n * Class for representing a single chunk in GridFS.\n *\n * @class\n *\n * @param file {GridStore} The {@link GridStore} object holding this chunk.\n * @param mongoObject {object} The mongo object representation of this chunk.\n *\n * @throws Error when the type of data field for {@link mongoObject} is not\n *     supported. Currently supported types for data field are instances of\n *     {@link String}, {@link Array}, {@link Binary} and {@link Binary}\n *     from the bson module\n *\n * @see Chunk#buildMongoObject\n */\nvar Chunk = exports.Chunk = function(file, mongoObject, writeConcern) {\n  if(!(this instanceof Chunk)) return new Chunk(file, mongoObject);\n\n  this.file = file;\n  var self = this;\n  var mongoObjectFinal = mongoObject == null ? {} : mongoObject;\n  this.writeConcern = writeConcern || {w:1};\n  this.objectId = mongoObjectFinal._id == null ? new ObjectID() : mongoObjectFinal._id;\n  this.chunkNumber = mongoObjectFinal.n == null ? 0 : mongoObjectFinal.n;\n  this.data = new Binary();\n\n  if(mongoObjectFinal.data == null) {\n  } else if(typeof mongoObjectFinal.data == \"string\") {\n    var buffer = new Buffer(mongoObjectFinal.data.length);\n    buffer.write(mongoObjectFinal.data, 'binary', 0);\n    this.data = new Binary(buffer);\n  } else if(Array.isArray(mongoObjectFinal.data)) {\n    var buffer = new Buffer(mongoObjectFinal.data.length);\n    buffer.write(mongoObjectFinal.data.join(''), 'binary', 0);\n    this.data = new Binary(buffer);\n  } else if(mongoObjectFinal.data instanceof Binary || Object.prototype.toString.call(mongoObjectFinal.data) == \"[object Binary]\") {\n    this.data = mongoObjectFinal.data;\n  } else if(Buffer.isBuffer(mongoObjectFinal.data)) {\n  } else {\n    throw Error(\"Illegal chunk format\");\n  }\n  \n  // Update position\n  this.internalPosition = 0;\n};\n\n/**\n * Writes a data to this object and advance the read/write head.\n *\n * @param data {string} the data to write \n * @param callback {function(*, GridStore)} This will be called after executing\n *     this method. The first parameter will contain null and the second one\n *     will contain a reference to this object.\n */\nChunk.prototype.write = function(data, callback) {\n  this.data.write(data, this.internalPosition);\n  this.internalPosition = this.data.length();\n  if(callback != null) return callback(null, this);\n  return this;\n};\n\n/**\n * Reads data and advances the read/write head.\n *\n * @param length {number} The length of data to read.\n *\n * @return {string} The data read if the given length will not exceed the end of\n *     the chunk. Returns an empty String otherwise.\n */\nChunk.prototype.read = function(length) {\n  // Default to full read if no index defined\n  length = length == null || length == 0 ? this.length() : length;\n\n  if(this.length() - this.internalPosition + 1 >= length) {\n    var data = this.data.read(this.internalPosition, length);\n    this.internalPosition = this.internalPosition + length;\n    return data;\n  } else {\n    return '';\n  }\n};\n\nChunk.prototype.readSlice = function(length) {\n  if ((this.length() - this.internalPosition) >= length) {\n    var data = null;\n    if (this.data.buffer != null) { //Pure BSON\n      data = this.data.buffer.slice(this.internalPosition, this.internalPosition + length);\n    } else { //Native BSON\n      data = new Buffer(length);\n      length = this.data.readInto(data, this.internalPosition);\n    }\n    this.internalPosition = this.internalPosition + length;\n    return data;\n  } else {\n    return null;\n  }\n};\n\n/**\n * Checks if the read/write head is at the end.\n *\n * @return {boolean} Whether the read/write head has reached the end of this\n *     chunk.\n */\nChunk.prototype.eof = function() {\n  return this.internalPosition == this.length() ? true : false;\n};\n\n/**\n * Reads one character from the data of this chunk and advances the read/write\n * head.\n *\n * @return {string} a single character data read if the the read/write head is\n *     not at the end of the chunk. Returns an empty String otherwise.\n */\nChunk.prototype.getc = function() {\n  return this.read(1);\n};\n\n/**\n * Clears the contents of the data in this chunk and resets the read/write head\n * to the initial position.\n */\nChunk.prototype.rewind = function() {\n  this.internalPosition = 0;\n  this.data = new Binary();\n};\n\n/**\n * Saves this chunk to the database. Also overwrites existing entries having the\n * same id as this chunk.\n *\n * @param callback {function(*, GridStore)} This will be called after executing\n *     this method. The first parameter will contain null and the second one\n *     will contain a reference to this object.\n */\nChunk.prototype.save = function(options, callback) {\n  var self = this;\n  if(typeof options == 'function') {\n    callback = options;\n    options = {};\n  }\n\n  self.file.chunkCollection(function(err, collection) {\n    if(err) return callback(err);\n\n    // Merge the options\n    var writeOptions = {};\n    for(var name in options) writeOptions[name] = options[name];\n    for(var name in self.writeConcern) writeOptions[name] = self.writeConcern[name];    \n\n    // collection.remove({'_id':self.objectId}, self.writeConcern, function(err, result) {\n    collection.remove({'_id':self.objectId}, writeOptions, function(err, result) {\n      if(err) return callback(err);\n\n      if(self.data.length() > 0) {\n        self.buildMongoObject(function(mongoObject) {\n          var options = {forceServerObjectId:true};\n          for(var name in self.writeConcern) {\n            options[name] = self.writeConcern[name];\n          }\n\n          collection.insert(mongoObject, writeOptions, function(err, collection) {\n            callback(err, self);\n          });\n        });\n      } else {\n        callback(null, self);\n      }\n    });\n  });\n};\n\n/**\n * Creates a mongoDB object representation of this chunk.\n *\n * @param callback {function(Object)} This will be called after executing this \n *     method. The object will be passed to the first parameter and will have\n *     the structure:\n *        \n *        <pre><code>\n *        {\n *          '_id' : , // {number} id for this chunk\n *          'files_id' : , // {number} foreign key to the file collection\n *          'n' : , // {number} chunk number\n *          'data' : , // {bson#Binary} the chunk data itself\n *        }\n *        </code></pre>\n *\n * @see <a href=\"http://www.mongodb.org/display/DOCS/GridFS+Specification#GridFSSpecification-{{chunks}}\">MongoDB GridFS Chunk Object Structure</a>\n */\nChunk.prototype.buildMongoObject = function(callback) {\n  var mongoObject = {\n    'files_id': this.file.fileId,\n    'n': this.chunkNumber,\n    'data': this.data};\n  // If we are saving using a specific ObjectId\n  if(this.objectId != null) mongoObject._id = this.objectId;\n\n  callback(mongoObject);\n};\n\n/**\n * @return {number} the length of the data\n */\nChunk.prototype.length = function() {\n  return this.data.length();\n};\n\n/**\n * The position of the read/write head\n * @name position\n * @lends Chunk#\n * @field\n */\nObject.defineProperty(Chunk.prototype, \"position\", { enumerable: true\n  , get: function () {\n      return this.internalPosition;\n    }\n  , set: function(value) {\n      this.internalPosition = value;\n    }\n});\n\n/**\n * The default chunk size\n * @constant\n */\nChunk.DEFAULT_CHUNK_SIZE = 1024 * 255;\n"]}