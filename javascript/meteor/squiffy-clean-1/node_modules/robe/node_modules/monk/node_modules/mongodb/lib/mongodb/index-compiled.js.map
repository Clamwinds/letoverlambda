{"version":3,"sources":["index.js"],"names":[],"mappings":"AAAA,IAAI;AACF,SAAO,CAAC,QAAQ,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC;AAC5C,SAAO,CAAC,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,UAAU,CAAC;CACjD,CAAC,OAAM,GAAG,EAAE;;;;AAEZ,AAGD,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC,OAAO,CAAC;;AAEnD,CAAE,uBAAuB,EACrB,OAAO,EACP,YAAY,EACZ,4BAA4B,EAC5B,uBAAuB,EACvB,mBAAmB,EACnB,mBAAmB,EACnB,8BAA8B,EAC9B,cAAc,EACd,QAAQ,EACR,IAAI,EACJ,cAAc,EACd,aAAa,EACb,cAAc,EACd,kBAAkB,CAAC,CAAC,OAAO,CAAC,UAAU,IAAI,EAAE;AAC7C,MAAI,MAAM,GAAG,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC;AAClC,OAAK,IAAI,CAAC,IAAI,MAAM,EAAE;AACrB,WAAO,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;GACtB;CACJ,CAAC;;;AAAC,AAGH,OAAO,CAAC,cAAc,GAAG,OAAO,CAAC,OAAO;;AAAC,AAEzC,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC;AACxC,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC;AACpC,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC;AACtC,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC;AACxC,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC;AACpC,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC;AACxC,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC;AACxC,OAAO,CAAC,QAAQ,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC;AAC5C,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC;AACxC,OAAO,CAAC,SAAS,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,SAAS;;AAAC,AAE9C,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,IAAI;;;AAAC,AAG7C,IAAI,OAAO,GAAG,OAAO,CAAC,EAAE,CAAC,OAAO;;;AAAC,AAGjC,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,MAAM,GAAG,YAAW;AACzC,SAAO,OAAO,CAAC;CAChB;;;AAAA,AAGD,KAAI,IAAI,IAAI,IAAI,OAAO,EAAE;AACvB,SAAO,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;CAC/B;;;AAAA,AAGD,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC","file":"index-compiled.js","sourcesContent":["try {\n  exports.BSONPure = require('bson').BSONPure;\n  exports.BSONNative = require('bson').BSONNative;\n} catch(err) {\n  // do nothing\n}\n\n// export the driver version\nexports.version = require('../../package').version;\n\n[ 'commands/base_command'\n  , 'admin'\n  , 'collection'\n  , 'connection/read_preference'\n  , 'connection/connection'\n  , 'connection/server'\n  , 'connection/mongos'\n  , 'connection/repl_set/repl_set'\n  , 'mongo_client'\n  , 'cursor'\n  , 'db'\n  , 'mongo_client'\n  , 'gridfs/grid'\n  ,\t'gridfs/chunk'\n  , 'gridfs/gridstore'].forEach(function (path) {\n  \tvar module = require('./' + path);\n  \tfor (var i in module) {\n  \t\texports[i] = module[i];\n    }\n});\n\n// backwards compat\nexports.ReplSetServers = exports.ReplSet;\n// Add BSON Classes\nexports.Binary = require('bson').Binary;\nexports.Code = require('bson').Code;\nexports.DBRef = require('bson').DBRef;\nexports.Double = require('bson').Double;\nexports.Long = require('bson').Long;\nexports.MinKey = require('bson').MinKey;\nexports.MaxKey = require('bson').MaxKey;\nexports.ObjectID = require('bson').ObjectID;\nexports.Symbol = require('bson').Symbol;\nexports.Timestamp = require('bson').Timestamp;  \n// Add BSON Parser\nexports.BSON = require('bson').BSONPure.BSON;\n\n// Set up the connect function\nvar connect = exports.Db.connect;\n\n// Add the pure and native backward compatible functions\nexports.pure = exports.native = function() {\n  return connect;\n}\n\n// Map all values to the exports value\nfor(var name in exports) {\n  connect[name] = exports[name];\n}\n\n// Set our exports to be the connect function\nmodule.exports = connect;\n"]}