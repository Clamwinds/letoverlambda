{"version":3,"sources":["cursor.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAGb,IAAI,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC;IACvB,KAAK,GAAG,OAAO,CAAC,cAAc,CAAC;IAC/B,YAAY,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,YAAY;IAC7C,CAAC,GAAG,OAAO,CAAC,UAAU,CAAC,CAAA;;AAGzB,IAAI,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;;;;;;;;;AAAC,AAWnC,MAAM,MAAM,SAAS,YAAY,CAAC;;;;;;;;;AAShC,aAAW,CAAE,UAAU,EAAE,OAAO,EAAE,OAAO,GAAG,EAAE,EAAE;AAC9C,QAAI,CAAC,UAAU,GAAG,UAAU,CAAC;AAC7B,QAAI,CAAC,OAAO,GAAG,OAAO,CAAC;AACvB,QAAI,CAAC,OAAO,GAAG,CAAC,CAAC,QAAQ,CAAC,OAAO,EAAE;AACjC,aAAO,EAAE,KAAK;KACf,CAAC,CAAC;;AAEH,QAAI,CAAC,KAAK,EAAE,CAAC;GACd;;;;;;AAAA,AAOD,OAAK,GAAI;AACP,QAAI,IAAI,GAAG,IAAI,CAAC;;AAEhB,QAAI,CAAC,OAAO,CAAC,EAAE,CAAC,MAAM,EAAE,UAAS,GAAG,EAAE;AACpC,SAAG,GAAG,IAAI,CAAC,UAAU,CAAC,8BAA8B,CAAC,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;;AAExE,UAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;KAC1B,CAAC,CAAC;;AAEH,QAAI,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,EAAE,UAAS,GAAG,EAAE;AACrC,UAAI,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;KACzB,CAAC,CAAC;;AAEH,QAAI,CAAC,OAAO,CAAC,EAAE,CAAC,SAAS,EAAE,YAAW;AACpC,UAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;KACtB,CAAC,CAAC;GACJ;;;;;AAAA,AAMD,GAAE,KAAK,GAAI;AACT,QAAI,IAAI,GAAG,IAAI,CAAC;;AAEhB,UAAM,IAAI,CAAC,CAAC,UAAS,OAAO,EAAE,MAAM,EAAE;AACpC,UAAI,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;;AAE9B,UAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;KACxB,CAAC,CAAC;GACJ;CACF;;AAGD,MAAM,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;;AAE7B,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC","file":"cursor-compiled.js","sourcesContent":["\"use strict\";\n\n\nvar _ = require('lodash'),\n  Class = require('class-extend'),\n  EventEmitter = require('events').EventEmitter,\n  Q = require('bluebird')\n\n\nvar RobeUtils = require('./utils');\n\n\n\n/**\n * Represents a cursor which streams results.\n *\n * A `result` event will be emitted for each result.\n * An `error` event will be emitted for any errors.\n * A `success` event will be emitted once cursor completes.\n */\nclass Cursor extends EventEmitter {\n  /**\n   * Constructor.\n   *\n   * @param  {Collection} collection Collection being queried.\n   * @param  {Promise} promise Promise returned from a monk `find()` call.\n   * @param  {Object} [options] Additional options.\n   * @param  {Boolean} [options.rawMode] Whether to enable raw query mode by default. Default is false.\n   */\n  constructor (collection, promise, options = {}) {\n    this.collection = collection;\n    this.promise = promise;\n    this.options = _.defaults(options, {\n      rawMode: false\n    });\n\n    this._init();\n  }\n\n\n  /**\n   * Initialize events.\n   * @private\n   */\n  _init () {\n    var self = this;\n\n    self.promise.on('each', function(doc) {\n      doc = self.collection._createDocumentFromQueryResult(doc, self.options);\n\n      self.emit('result', doc);\n    });\n\n    self.promise.on('error', function(err) {\n      self.emit('error', err);\n    });\n\n    self.promise.on('success', function() {\n      self.emit('success');\n    });\n  }\n\n\n  /**\n   * Close this cursor without waiting for it to finish.\n   */\n  * close () {\n    var self = this;\n\n    yield new Q(function(resolve, reject) {\n      self.once('success', resolve);\n\n      self.promise.destroy();\n    });\n  }\n}\n\n\nCursor.extend = Class.extend;\n\nmodule.exports = Cursor;\n\n\n"]}