{"version":3,"sources":["database.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAGb,IAAI,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC;IACvB,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC;IACnC,KAAK,GAAG,OAAO,CAAC,cAAc,CAAC;IAC/B,CAAC,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;;AAE1B,IAAI,UAAU,GAAG,OAAO,CAAC,cAAc,CAAC;IACtC,KAAK,GAAG,OAAO,CAAC,SAAS,CAAC;;;;;AAAC,AAO7B,MAAM,QAAQ,CAAC;;;;;AAKb,aAAW,CAAE,EAAE,EAAE;AACf,QAAI,CAAC,EAAE,GAAG,EAAE,CAAC;GACd;;;;;;;AAAA,AAQD,GAAE,KAAK,GAAI;AACT,QAAI,CAAC,IAAI,CAAC,MAAM,EAAE;AAChB,UAAI,CAAC,MAAM,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC;KAC/B;;AAED,WAAO,IAAI,CAAC,MAAM,CAAC;GACpB;;;;;;AAAA,AAQD,OAAK,GAAI;AACP,QAAI,IAAI,GAAG,IAAI,CAAC;;AAEhB,SAAK,CAAC,OAAO,CAAC,CAAC;;AAEf,WAAO,CAAC,CAAC,GAAG,CAAC,YAAW;AACtB,UAAI,IAAI,CAAC,MAAM,EAAE;AACf,eAAO,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;OAC3B;KACF,CAAC,CACC,IAAI,CAAC,SAAS,OAAO,GAAG;AACvB,UAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,eAAe,CAAC,EAAE;AAC7C,eAAO,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC;OAC9C;KACF,CAAC,CAAC;GACN;;;;;;;;;;AAAA,AAWD,YAAU,CAAE,IAAI,EAAE,OAAO,GAAG,EAAE,EAAE;AAC9B,WAAO,IAAI,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,OAAO,CAAC,CAAC;GACzD;;CAEF;;AAED,QAAQ,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;;AAI/B,MAAM,CAAC,OAAO,GAAG,QAAQ,CAAC","file":"database-compiled.js","sourcesContent":["\"use strict\";\n\n\nvar _ = require('lodash'),\n  debug = require('debug')('robe-db'),\n  Class = require('class-extend'),\n  Q = require('bluebird');\n\nvar Collection = require('./collection'),\n  Oplog = require('./oplog');\n\n\n\n/**\n * Represents a database connection.\n */\nclass Database {\n  /**\n   * Constructor.\n   * @param  {Object} db Mongoskin db connection.\n   */\n  constructor (db) {\n    this.db = db;\n  }\n\n\n  /**\n   * Get oplog watcher.\n   *\n   * This will create and start the watcher if not already done so.\n   */\n  * oplog () {\n    if (!this._oplog) {\n      this._oplog = new Oplog(this);\n    }\n\n    return this._oplog;\n  }\n\n\n\n  /**\n   * Close this database connection.\n   * @return {Promise}\n   */\n  close () {\n    var self = this;\n    \n    debug('close');\n\n    return Q.try(function() {\n      if (self._oplog) {\n        return self._oplog.stop();\n      }\n    })\n      .then(function closeDb() {\n        if (2 === _.deepGet(self.db, 'driver._state')) {\n          return Q.promisify(self.db.close, self.db)();\n        }\n      });\n  }\n\n\n  /**\n   * Fetch a collection from the db.\n   *\n   * @param {Object} [options] Additional options.\n   * @param {Object} [options.schema] Collection schema.\n   * \n   * @return {Collection}\n   */\n  collection (name, options = {}) {\n    return new Collection(this, this.db.get(name), options);\n  }\n\n}\n\nDatabase.extend = Class.extend;\n\n\n\nmodule.exports = Database;\n"]}