{"version":3,"sources":["manager.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAGb,IAAI,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC;IACvB,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC;IAChC,KAAK,GAAG,OAAO,CAAC,cAAc,CAAC;IAC/B,CAAC,GAAG,OAAO,CAAC,UAAU,CAAC;IACvB,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC;IACtB,QAAQ,GAAG,OAAO,CAAC,YAAY,CAAC;;;;;;AAAC,AAQnC,IAAI,aAAa,GAAG,EAAE;;;;;AAAC,AAMvB,MAAM,OAAO,CAAC;;;;;;;;AAQZ,SAAO,OAAO,CAAE,GAAG,EAAE,OAAO,GAAG,EAAE,EAAE;AACjC,QAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;AACvB,SAAG,GAAG,CAAC,GAAG,CAAC,CAAC;KACb;;AAED,KAAC,CAAC,QAAQ,CAAC,OAAO,EAAE,OAAO,CAAC,0BAA0B,CAAC,CAAC;;AAExD,SAAK,CAAC,aAAa,GAAG,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;;AAEtC,QAAI,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;;AAE/B,WAAO,IAAI,CAAC,CAAC,SAAS,eAAe,CAAC,OAAO,EAAE,MAAM,EAAE;AACrD,UAAI,iBAAiB,GAAG,UAAU,CAAC,YAAW;AAC5C,cAAM,CAAC,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC,CAAC;OACjD,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC;;AAEpB,QAAE,CAAC,IAAI,CAAC,MAAM,EAAE,YAAW;AACzB,oBAAY,CAAC,iBAAiB,CAAC;;;;AAAC,AAIhC,YAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,EAAE,EAAE,eAAe,CAAC,EAAE;AACxC,gBAAM,CAAC,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC,CAAC;SAC9C,MAAM;AACL,cAAI,QAAQ,GAAG,IAAI,QAAQ,CAAC,EAAE,CAAC,CAAC;;AAEhC,uBAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;;AAE7B,iBAAO,CAAC,QAAQ,CAAC,CAAC;SACnB;OACF,CAAC,CAAC;KACJ,CAAC,CAAC;GACJ;;;;;;AAAA,AAOD,SAAO,QAAQ,GAAI;AACjB,SAAK,CAAC,yBAAyB,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;;AAExD,WAAO,CAAC,CAAC,GAAG,CAAC,aAAa,EAAE,UAAS,EAAE,EAAE;AACvC,aAAO,EAAE,CAAC,KAAK,EAAE,CAAC;KACnB,CAAC,CACC,IAAI,CAAC,YAAW;AACf,mBAAa,GAAG,EAAE,CAAC;KACpB,CAAC,CAAC;GACN;CACF;;;;;;AAAA,AAMD,OAAO,CAAC,0BAA0B,GAAG;AACnC,SAAO,EAAE,IAAI;CACd,CAAC;;AAEF,OAAO,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;;AAI9B,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC","file":"manager-compiled.js","sourcesContent":["\"use strict\";\n\n\nvar _ = require('lodash'),\n  debug = require('debug')('robe'),\n  Class = require('class-extend'),\n  Q = require('bluebird'),\n  monk = require('monk'),\n  Database = require('./database');\n\n\n\n/**\n * All db connections.\n * @type {Array}\n */\nvar dbConnections = [];\n\n\n/**\n * Overall database manager and entry point to Robe.\n */\nclass Manager {\n  /**\n   * Connect to given database.\n   * @param {String|Array} url Either db URL or array of replica set URLs.\n   * @param {Object} options Connection options.\n   * @param {Number} options.timeout Connection timeout in milliseconds. Default is 3000.\n   * @return {Promise} which resolves to a database connection if successful.\n   */\n  static connect (url, options = {}) {\n    if (!Array.isArray(url)) {\n      url = [url];\n    }\n\n    _.defaults(options, Manager.DEFAULT_CONNECTION_OPTIONS);\n\n    debug('connect to ' + url.join(', '));\n\n    let db = monk.apply(null, url);\n\n    return new Q(function checkConnection(resolve, reject) {\n      var connectionTimeout = setTimeout(function() {\n        reject(new Error('Timed out connecting to db'));\n      }, options.timeout);\n\n      db.once('open', function() {\n        clearTimeout(connectionTimeout);\n\n        // until https://github.com/Automattic/monk/issues/24 is resolve we \n        // manually check, see http://stackoverflow.com/questions/27547979/db-connection-error-handling-with-monk \n        if (2 !== _.deepGet(db, 'driver._state')) {\n          reject(new Error('Failed to connect to db'));\n        } else {\n          var instance = new Database(db);\n\n          dbConnections.push(instance);\n\n          resolve(instance);\n        }\n      });\n    });\n  }\n\n\n  /**\n   * Close all opened db connections.\n   * @return {Promise}\n   */\n  static closeAll () {\n    debug('close all connections: ' + dbConnections.length);\n\n    return Q.map(dbConnections, function(db) {\n      return db.close();\n    })\n      .then(function() {\n        dbConnections = [];\n      });\n  }\n}\n\n/**\n * Default connection options.\n * @type {Object}\n */\nManager.DEFAULT_CONNECTION_OPTIONS = {\n  timeout: 3000\n};\n\nManager.extend = Class.extend;\n\n\n\nmodule.exports = Manager;\n"]}