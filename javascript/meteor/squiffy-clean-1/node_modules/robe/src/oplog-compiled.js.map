{"version":3,"sources":["oplog.js"],"names":[],"mappings":"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","file":"oplog-compiled.js","sourcesContent":["\"use strict\";\n\n\nvar _ = require('lodash'),\n  mongo = require('mongoskin'),\n  debug = require('debug')('robe-oplog'),\n  EventEmitter2 = require('eventemitter2').EventEmitter2,\n  Class = require('class-extend'),\n  Q = require('bluebird');\n\n\n\n/**\n * Represents the oplog.\n */\nclass Oplog extends EventEmitter2 {\n  /**\n   * Constructor.\n   *\n   * @param  {Database} robeDb The underlying db.\n   */\n  constructor (robeDb) {\n    super({\n      wildcard: true,\n      delimiter: ':'\n    });\n\n    this.robeDb = robeDb;\n    this.paused = false;\n    this.active = false;\n    this.watchers = [];\n\n    var self = this;\n    ['_onData', '_onError', '_onEnded'].forEach(function(m) {\n      self[m] = _.bind(self[m], self);\n    })\n  }\n\n\n\n  /**\n   * Stop watching oplog.\n   *\n   * @return {Promise}\n   */\n  stop () {\n    var self = this;\n\n    debug('Stop oplog');\n\n    self.active = false;\n\n    return new Q(function(resolve, reject) {\n      if (!self.cursor) {\n        return resolve();\n      }\n      \n      self.cursor.close(function(err) {\n        if (err) return reject(err);\n\n        resolve();\n      });  \n    })\n      .then(function() {\n        self.cursor = null;\n\n        if (self.db) {\n          debug('Close db connection');\n\n          return new Q(function(resolve, reject){\n            self.db.close(function(err) {\n              if (err) return reject(err);\n\n              self.db = null;\n\n              resolve();\n            }); \n          });\n        }\n      });\n  }\n\n\n  _resolveServerDb() {\n    var self = this;\n\n    // find out master server\n    var serverConfig = _.get(self.robeDb.db, 'driver._native.serverConfig', {});\n\n    var masterServer = _.find(serverConfig.servers || [], function(s) {\n      return _.deepGet(s, 'isMasterDoc.ismaster');\n    });\n\n    if (!masterServer) {\n      throw new Error('No MASTER server found for oplog');\n    }\n\n    self.databaseName = masterServer.db.databaseName;\n    self.hostPort = masterServer.host + ':' + masterServer.port;\n\n    debug('Resolved db: ' + self.hostPort + '/' + self.databaseName);\n  }\n\n\n\n  /**\n   * Connect to master server.\n   * @return {Promise}\n   */\n  _connectToServer () {\n    var self = this;\n\n    return Q.try(function() {\n      if (self.db) {\n        return;\n      } else {\n        self._resolveServerDb();\n\n        debug('Connect to db ' + self.hostPort);\n\n        self.db = mongo.db(\"mongodb://\"  + self.hostPort + \"/local\", {\n          native_parser:true\n        });\n\n        return new Q(function(resolve, reject) {\n          self.db.open(function(err) {\n            if (err) return reject(err);\n\n            resolve();\n          });\n        });\n      }\n    });\n  }\n\n\n  /**\n   * Pause the oplog.\n   */\n  pause () {\n    debug('Pause oplog');\n\n    this.paused = true;\n  }\n\n\n\n  /**\n   * Resume the oplog.\n   */\n  resume () {\n    debug('Resume oplog');\n\n    this.paused = false;\n  }\n\n\n\n  /**\n   * Start watching the oplog.\n   *\n   * @see  https://blog.compose.io/the-mongodb-oplog-and-node-js/\n   *\n   * @return {Promise}\n   */\n  start () {\n    var self = this;\n\n    // already started?\n    if (self.active) {\n      return Q.resolve();\n    } else {\n      self.active = true;\n    }\n\n    return self._connectToServer()\n      .then(function() {\n        debug('Start watching oplog');\n\n        var oplog = self.db.collection('oplog.rs');\n\n        // get highest current timestamp\n        return Q.promisify(oplog.find, oplog)({}, {\n          fields: { \n            ts: 1\n          },\n          sort: {\n            '$natural': -1\n          },\n          limit: 1\n        })\n          .then(function(results) {\n            var lastOplogTime = _.deepGet(results, '0.ts');\n\n            // if last ts not available then set to current time\n            if (!lastOplogTime) {\n              lastOplogTime = new mongo.Timestamp(0, Math.floor(Date.now() / 1000 - 1));\n            }\n\n            debug('Watching for events newer than ' + lastOplogTime.toString());\n\n            // use oplog.col._native to access lower-level native collection object\n            var cursor = self.cursor = oplog.find({\n              ts: {\n                $gte: lastOplogTime\n              }\n            }, {\n              tailable: true,\n              awaitdata: true,\n              oplogReplay: true,\n              numberOfRetries: -1,\n              timeout: false,\n            });\n\n            var stream = self.cursor.stream();\n\n            stream.on('data', self._onData);\n            stream.on('error', self._onError);\n            stream.on('end', self._onEnded);\n\n            debug('Cursor started');\n          });\n      });\n  }  \n\n\n  /**\n   * Handle error\n   */\n  _onError (err) {\n    debug('Cursor error: ' + err.message);\n\n    this.emit('error', err);\n  }\n\n\n  /** \n   * Handle oplog stream ended.\n   */\n  _onEnded () {\n    var self = this;\n\n    debug('Cursor ended');\n\n    // if cursor still active\n    if (self.active) {\n      this.cursor = null;\n\n      Q.delay(1000)\n        .then(function() {\n          debug('Restarting cursor');\n\n          self.start().catch(console.error);\n        });\n    }\n  }\n\n\n  /**\n   * Handle new oplog data.\n   */\n  _onData (data) {\n    debug('Cursor data: ' + JSON.stringify(data));\n\n    if (this.paused) {\n      debug('Ignore data because oplog is paused');\n\n      return;\n    }\n\n    var ns = data.ns.split('.'),\n      dbName = ns[0],\n      colName = ns[1];\n\n    // only want events for this db\n    if (this.databaseName !== dbName) {\n      debug('Ignoring data for db: ' + dbName);\n      \n      return;\n    }\n\n    var opType = null;\n    switch (data.op) {\n      case 'i':\n        opType = 'insert';\n        break;\n      case 'd':\n        opType = 'delete';\n        break;\n      case 'u':\n        opType = 'update';\n        break;\n      default:\n        debug('Ignoring op: ' + data.op);\n        return;\n    }\n\n    this.emit([colName, opType], colName, opType, data.o);\n  }\n}\n\n\nOplog.extend = Class.extend;\n\nmodule.exports = Oplog;\n\n\n"]}