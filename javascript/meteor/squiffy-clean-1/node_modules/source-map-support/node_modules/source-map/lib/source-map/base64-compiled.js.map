{"version":3,"sources":["base64.js"],"names":[],"mappings":";;;;;;;;AAMA,IAAI,OAAO,MAAM,KAAK,UAAU,EAAE;AAC9B,MAAI,MAAM,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;CACrD;AACD,MAAM,CAAC,UAAU,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE;;AAEzC,MAAI,YAAY,GAAG,EAAE,CAAC;AACtB,MAAI,YAAY,GAAG,EAAE,CAAC;;AAEtB,oEAAkE,CAC/D,KAAK,CAAC,EAAE,CAAC,CACT,OAAO,CAAC,UAAU,EAAE,EAAE,KAAK,EAAE;AAC5B,gBAAY,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC;AACzB,gBAAY,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;GAC1B,CAAC;;;;;AAAC,AAKL,SAAO,CAAC,MAAM,GAAG,SAAS,aAAa,CAAC,OAAO,EAAE;AAC/C,QAAI,OAAO,IAAI,YAAY,EAAE;AAC3B,aAAO,YAAY,CAAC,OAAO,CAAC,CAAC;KAC9B;AACD,UAAM,IAAI,SAAS,CAAC,4BAA4B,GAAG,OAAO,CAAC,CAAC;GAC7D;;;;;AAAC,AAKF,SAAO,CAAC,MAAM,GAAG,SAAS,aAAa,CAAC,KAAK,EAAE;AAC7C,QAAI,KAAK,IAAI,YAAY,EAAE;AACzB,aAAO,YAAY,CAAC,KAAK,CAAC,CAAC;KAC5B;AACD,UAAM,IAAI,SAAS,CAAC,6BAA6B,GAAG,KAAK,CAAC,CAAC;GAC5D,CAAC;CAEH,CAAC,CAAC","file":"base64-compiled.js","sourcesContent":["/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nif (typeof define !== 'function') {\n    var define = require('amdefine')(module, require);\n}\ndefine(function (require, exports, module) {\n\n  var charToIntMap = {};\n  var intToCharMap = {};\n\n  'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n    .split('')\n    .forEach(function (ch, index) {\n      charToIntMap[ch] = index;\n      intToCharMap[index] = ch;\n    });\n\n  /**\n   * Encode an integer in the range of 0 to 63 to a single base 64 digit.\n   */\n  exports.encode = function base64_encode(aNumber) {\n    if (aNumber in intToCharMap) {\n      return intToCharMap[aNumber];\n    }\n    throw new TypeError(\"Must be between 0 and 63: \" + aNumber);\n  };\n\n  /**\n   * Decode a single base 64 digit to an integer.\n   */\n  exports.decode = function base64_decode(aChar) {\n    if (aChar in charToIntMap) {\n      return charToIntMap[aChar];\n    }\n    throw new TypeError(\"Not a valid base 64 digit: \" + aChar);\n  };\n\n});\n"]}