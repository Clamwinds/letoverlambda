{"version":3,"sources":["run-tests.js"],"names":[],"mappings":";;;;;;;;AAOA,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC/B,IAAI,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AACvB,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC3B,IAAI,IAAI,GAAG,OAAO,CAAC,mBAAmB,CAAC,CAAC;;AAExC,SAAS,GAAG,CAAC,KAAK,EAAE;AAClB,MAAI,KAAK,GAAG,CAAC,CAAC;AACd,MAAI,MAAM,GAAG,CAAC,CAAC;;AAEf,OAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACrC,SAAK,IAAI,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;AAC/B,UAAI,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;AACnB,aAAK,EAAE,CAAC;AACR,YAAI;AACF,eAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;AACnC,gBAAM,EAAE,CAAC;SACV,CACD,OAAO,CAAC,EAAE;AACR,iBAAO,CAAC,GAAG,CAAC,SAAS,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,IAAI,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;AACxD,iBAAO,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;SACtB;OACF;KACF;GACF;;AAED,SAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;AAChB,SAAO,CAAC,GAAG,CAAC,MAAM,GAAG,KAAK,GAAG,KAAK,GAAG,gBAAgB,CAAC,CAAC;AACvD,SAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;;AAEhB,SAAO,KAAK,GAAG,MAAM,CAAC;CACvB;;AAED,SAAS,UAAU,CAAC,CAAC,EAAE;AACrB,MAAI,SAAS,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAChC,SAAO,SAAS,GACZ,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC,GAC9B,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;CAC9B;;AAED,SAAS,QAAQ,CAAC,CAAC,EAAE;AACnB,SAAO,eAAe,GAAG,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;CACjD;;AAED,IAAI,QAAQ,GAAG,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC,CAC9D,MAAM,CAAC,UAAU,CAAC,CAClB,GAAG,CAAC,QAAQ,CAAC,CAAC;;AAEjB,IAAI,IAAI,GAAG,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,UAAU,GAAG,EAAE,CAAC,EAAE;AACzD,SAAO;AACL,QAAI,EAAE,QAAQ,CAAC,CAAC,CAAC;AACjB,YAAQ,EAAE,GAAG;GACd,CAAC;CACH,CAAC,CAAC,CAAC;;AAEJ,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC","file":"run-tests-compiled.js","sourcesContent":["#!/usr/bin/env node\n/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nvar assert = require('assert');\nvar fs = require('fs');\nvar path = require('path');\nvar util = require('./source-map/util');\n\nfunction run(tests) {\n  var total = 0;\n  var passed = 0;\n\n  for (var i = 0; i < tests.length; i++) {\n    for (var k in tests[i].testCase) {\n      if (/^test/.test(k)) {\n        total++;\n        try {\n          tests[i].testCase[k](assert, util);\n          passed++;\n        }\n        catch (e) {\n          console.log('FAILED ' + tests[i].name + ': ' + k + '!');\n          console.log(e.stack);\n        }\n      }\n    }\n  }\n\n  console.log('');\n  console.log(passed + ' / ' + total + ' tests passed.');\n  console.log('');\n\n  return total - passed;\n}\n\nfunction isTestFile(f) {\n  var testToRun = process.argv[2];\n  return testToRun\n    ? path.basename(testToRun) === f\n    : /^test\\-.*?\\.js/.test(f);\n}\n\nfunction toModule(f) {\n  return './source-map/' + f.replace(/\\.js$/, '');\n}\n\nvar requires = fs.readdirSync(path.join(__dirname, 'source-map'))\n  .filter(isTestFile)\n  .map(toModule);\n\nvar code = run(requires.map(require).map(function (mod, i) {\n  return {\n    name: requires[i],\n    testCase: mod\n  };\n}));\n\nprocess.exit(code);\n"]}