{"version":3,"sources":["test-source-node.js"],"names":[],"mappings":"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","file":"test-source-node-compiled.js","sourcesContent":["/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nif (typeof define !== 'function') {\n    var define = require('amdefine')(module, require);\n}\ndefine(function (require, exports, module) {\n\n  var SourceMapGenerator = require('../../lib/source-map/source-map-generator').SourceMapGenerator;\n  var SourceMapConsumer = require('../../lib/source-map/source-map-consumer').SourceMapConsumer;\n  var SourceNode = require('../../lib/source-map/source-node').SourceNode;\n\n  exports['test .add()'] = function (assert, util) {\n    var node = new SourceNode(null, null, null);\n\n    // Adding a string works.\n    node.add('function noop() {}');\n\n    // Adding another source node works.\n    node.add(new SourceNode(null, null, null));\n\n    // Adding an array works.\n    node.add(['function foo() {',\n              new SourceNode(null, null, null,\n                             'return 10;'),\n              '}']);\n\n    // Adding other stuff doesn't.\n    assert.throws(function () {\n      node.add({});\n    });\n    assert.throws(function () {\n      node.add(function () {});\n    });\n  };\n\n  exports['test .prepend()'] = function (assert, util) {\n    var node = new SourceNode(null, null, null);\n\n    // Prepending a string works.\n    node.prepend('function noop() {}');\n    assert.equal(node.children[0], 'function noop() {}');\n    assert.equal(node.children.length, 1);\n\n    // Prepending another source node works.\n    node.prepend(new SourceNode(null, null, null));\n    assert.equal(node.children[0], '');\n    assert.equal(node.children[1], 'function noop() {}');\n    assert.equal(node.children.length, 2);\n\n    // Prepending an array works.\n    node.prepend(['function foo() {',\n              new SourceNode(null, null, null,\n                             'return 10;'),\n              '}']);\n    assert.equal(node.children[0], 'function foo() {');\n    assert.equal(node.children[1], 'return 10;');\n    assert.equal(node.children[2], '}');\n    assert.equal(node.children[3], '');\n    assert.equal(node.children[4], 'function noop() {}');\n    assert.equal(node.children.length, 5);\n\n    // Prepending other stuff doesn't.\n    assert.throws(function () {\n      node.prepend({});\n    });\n    assert.throws(function () {\n      node.prepend(function () {});\n    });\n  };\n\n  exports['test .toString()'] = function (assert, util) {\n    assert.equal((new SourceNode(null, null, null,\n                                 ['function foo() {',\n                                  new SourceNode(null, null, null, 'return 10;'),\n                                  '}'])).toString(),\n                 'function foo() {return 10;}');\n  };\n\n  exports['test .join()'] = function (assert, util) {\n    assert.equal((new SourceNode(null, null, null,\n                                 ['a', 'b', 'c', 'd'])).join(', ').toString(),\n                 'a, b, c, d');\n  };\n\n  exports['test .walk()'] = function (assert, util) {\n    var node = new SourceNode(null, null, null,\n                              ['(function () {\\n',\n                               '  ', new SourceNode(1, 0, 'a.js', ['someCall()']), ';\\n',\n                               '  ', new SourceNode(2, 0, 'b.js', ['if (foo) bar()']), ';\\n',\n                               '}());']);\n    var expected = [\n      { str: '(function () {\\n', source: null,   line: null, column: null },\n      { str: '  ',               source: null,   line: null, column: null },\n      { str: 'someCall()',       source: 'a.js', line: 1,    column: 0    },\n      { str: ';\\n',              source: null,   line: null, column: null },\n      { str: '  ',               source: null,   line: null, column: null },\n      { str: 'if (foo) bar()',   source: 'b.js', line: 2,    column: 0    },\n      { str: ';\\n',              source: null,   line: null, column: null },\n      { str: '}());',            source: null,   line: null, column: null },\n    ];\n    var i = 0;\n    node.walk(function (chunk, loc) {\n      assert.equal(expected[i].str, chunk);\n      assert.equal(expected[i].source, loc.source);\n      assert.equal(expected[i].line, loc.line);\n      assert.equal(expected[i].column, loc.column);\n      i++;\n    });\n  };\n\n  exports['test .replaceRight'] = function (assert, util) {\n    var node;\n\n    // Not nested\n    node = new SourceNode(null, null, null, 'hello world');\n    node.replaceRight(/world/, 'universe');\n    assert.equal(node.toString(), 'hello universe');\n\n    // Nested\n    node = new SourceNode(null, null, null,\n                          [new SourceNode(null, null, null, 'hey sexy mama, '),\n                           new SourceNode(null, null, null, 'want to kill all humans?')]);\n    node.replaceRight(/kill all humans/, 'watch Futurama');\n    assert.equal(node.toString(), 'hey sexy mama, want to watch Futurama?');\n  };\n\n  exports['test .toStringWithSourceMap()'] = function (assert, util) {\n    var node = new SourceNode(null, null, null,\n                              ['(function () {\\n',\n                               '  ',\n                                 new SourceNode(1, 0, 'a.js', 'someCall', 'originalCall'),\n                                 new SourceNode(1, 8, 'a.js', '()'),\n                                 ';\\n',\n                               '  ', new SourceNode(2, 0, 'b.js', ['if (foo) bar()']), ';\\n',\n                               '}());']);\n    var map = node.toStringWithSourceMap({\n      file: 'foo.js'\n    }).map;\n\n    assert.ok(map instanceof SourceMapGenerator, 'map instanceof SourceMapGenerator');\n    map = new SourceMapConsumer(map.toString());\n\n    var actual;\n\n    actual = map.originalPositionFor({\n      line: 1,\n      column: 4\n    });\n    assert.equal(actual.source, null);\n    assert.equal(actual.line, null);\n    assert.equal(actual.column, null);\n\n    actual = map.originalPositionFor({\n      line: 2,\n      column: 2\n    });\n    assert.equal(actual.source, 'a.js');\n    assert.equal(actual.line, 1);\n    assert.equal(actual.column, 0);\n    assert.equal(actual.name, 'originalCall');\n\n    actual = map.originalPositionFor({\n      line: 3,\n      column: 2\n    });\n    assert.equal(actual.source, 'b.js');\n    assert.equal(actual.line, 2);\n    assert.equal(actual.column, 0);\n\n    actual = map.originalPositionFor({\n      line: 3,\n      column: 16\n    });\n    assert.equal(actual.source, null);\n    assert.equal(actual.line, null);\n    assert.equal(actual.column, null);\n\n    actual = map.originalPositionFor({\n      line: 4,\n      column: 2\n    });\n    assert.equal(actual.source, null);\n    assert.equal(actual.line, null);\n    assert.equal(actual.column, null);\n  };\n\n  exports['test .fromStringWithSourceMap()'] = function (assert, util) {\n    var node = SourceNode.fromStringWithSourceMap(\n                              util.testGeneratedCode,\n                              new SourceMapConsumer(util.testMap));\n\n    var result = node.toStringWithSourceMap({\n      file: 'min.js'\n    });\n    var map = result.map;\n    var code = result.code;\n\n    assert.equal(code, util.testGeneratedCode);\n    assert.ok(map instanceof SourceMapGenerator, 'map instanceof SourceMapGenerator');\n    map = map.toJSON();\n    assert.equal(map.version, util.testMap.version);\n    assert.equal(map.file, util.testMap.file);\n    assert.equal(map.mappings, util.testMap.mappings);\n  };\n\n  exports['test .fromStringWithSourceMap() empty map'] = function (assert, util) {\n    var node = SourceNode.fromStringWithSourceMap(\n                              util.testGeneratedCode,\n                              new SourceMapConsumer(util.emptyMap));\n    var result = node.toStringWithSourceMap({\n      file: 'min.js'\n    });\n    var map = result.map;\n    var code = result.code;\n\n    assert.equal(code, util.testGeneratedCode);\n    assert.ok(map instanceof SourceMapGenerator, 'map instanceof SourceMapGenerator');\n    map = map.toJSON();\n    assert.equal(map.version, util.emptyMap.version);\n    assert.equal(map.file, util.emptyMap.file);\n    assert.equal(map.mappings.length, util.emptyMap.mappings.length);\n    assert.equal(map.mappings, util.emptyMap.mappings);\n  };\n\n  exports['test .fromStringWithSourceMap() complex version'] = function (assert, util) {\n    var input = new SourceNode(null, null, null, [\n      \"(function() {\\n\",\n        \"  var Test = {};\\n\",\n        \"  \", new SourceNode(1, 0, \"a.js\", \"Test.A = { value: 1234 };\\n\"),\n        \"  \", new SourceNode(2, 0, \"a.js\", \"Test.A.x = 'xyz';\"), \"\\n\",\n        \"}());\\n\",\n        \"/* Generated Source */\"]);\n    input = input.toStringWithSourceMap({\n      file: 'foo.js'\n    });\n\n    var node = SourceNode.fromStringWithSourceMap(\n                              input.code,\n                              new SourceMapConsumer(input.map.toString()));\n\n    var result = node.toStringWithSourceMap({\n      file: 'foo.js'\n    });\n    var map = result.map;\n    var code = result.code;\n\n    assert.equal(code, input.code);\n    assert.ok(map instanceof SourceMapGenerator, 'map instanceof SourceMapGenerator');\n    map = map.toJSON();\n    var inputMap = input.map.toJSON();\n    util.assertEqualMaps(assert, map, inputMap);\n  };\n\n  exports['test .fromStringWithSourceMap() merging duplicate mappings'] = function (assert, util) {\n    var input = new SourceNode(null, null, null, [\n      new SourceNode(1, 0, \"a.js\", \"(function\"),\n      new SourceNode(1, 0, \"a.js\", \"() {\\n\"),\n      \"  \",\n      new SourceNode(1, 0, \"a.js\", \"var Test = \"),\n      new SourceNode(1, 0, \"b.js\", \"{};\\n\"),\n      new SourceNode(2, 0, \"b.js\", \"Test\"),\n      new SourceNode(2, 0, \"b.js\", \".A\", \"A\"),\n      new SourceNode(2, 20, \"b.js\", \" = { value: 1234 };\\n\", \"A\"),\n      \"}());\\n\",\n      \"/* Generated Source */\"\n    ]);\n    input = input.toStringWithSourceMap({\n      file: 'foo.js'\n    });\n\n    var correctMap = new SourceMapGenerator({\n      file: 'foo.js'\n    });\n    correctMap.addMapping({\n      generated: { line: 1, column: 0 },\n      source: 'a.js',\n      original: { line: 1, column: 0 }\n    });\n    correctMap.addMapping({\n      generated: { line: 2, column: 0 }\n    });\n    correctMap.addMapping({\n      generated: { line: 2, column: 2 },\n      source: 'a.js',\n      original: { line: 1, column: 0 }\n    });\n    correctMap.addMapping({\n      generated: { line: 2, column: 13 },\n      source: 'b.js',\n      original: { line: 1, column: 0 }\n    });\n    correctMap.addMapping({\n      generated: { line: 3, column: 0 },\n      source: 'b.js',\n      original: { line: 2, column: 0 }\n    });\n    correctMap.addMapping({\n      generated: { line: 3, column: 4 },\n      source: 'b.js',\n      name: 'A',\n      original: { line: 2, column: 0 }\n    });\n    correctMap.addMapping({\n      generated: { line: 3, column: 6 },\n      source: 'b.js',\n      name: 'A',\n      original: { line: 2, column: 20 }\n    });\n    correctMap.addMapping({\n      generated: { line: 4, column: 0 }\n    });\n\n    var inputMap = input.map.toJSON();\n    correctMap = correctMap.toJSON();\n    util.assertEqualMaps(assert, correctMap, inputMap);\n  };\n\n  exports['test setSourceContent with toStringWithSourceMap'] = function (assert, util) {\n    var aNode = new SourceNode(1, 1, 'a.js', 'a');\n    aNode.setSourceContent('a.js', 'someContent');\n    var node = new SourceNode(null, null, null,\n                              ['(function () {\\n',\n                               '  ', aNode,\n                               '  ', new SourceNode(1, 1, 'b.js', 'b'),\n                               '}());']);\n    node.setSourceContent('b.js', 'otherContent');\n    var map = node.toStringWithSourceMap({\n      file: 'foo.js'\n    }).map;\n\n    assert.ok(map instanceof SourceMapGenerator, 'map instanceof SourceMapGenerator');\n    map = new SourceMapConsumer(map.toString());\n\n    assert.equal(map.sources.length, 2);\n    assert.equal(map.sources[0], 'a.js');\n    assert.equal(map.sources[1], 'b.js');\n    assert.equal(map.sourcesContent.length, 2);\n    assert.equal(map.sourcesContent[0], 'someContent');\n    assert.equal(map.sourcesContent[1], 'otherContent');\n  };\n\n  exports['test walkSourceContents'] = function (assert, util) {\n    var aNode = new SourceNode(1, 1, 'a.js', 'a');\n    aNode.setSourceContent('a.js', 'someContent');\n    var node = new SourceNode(null, null, null,\n                              ['(function () {\\n',\n                               '  ', aNode,\n                               '  ', new SourceNode(1, 1, 'b.js', 'b'),\n                               '}());']);\n    node.setSourceContent('b.js', 'otherContent');\n    var results = [];\n    node.walkSourceContents(function (sourceFile, sourceContent) {\n      results.push([sourceFile, sourceContent]);\n    });\n    assert.equal(results.length, 2);\n    assert.equal(results[0][0], 'a.js');\n    assert.equal(results[0][1], 'someContent');\n    assert.equal(results[1][0], 'b.js');\n    assert.equal(results[1][1], 'otherContent');\n  };\n});\n"]}