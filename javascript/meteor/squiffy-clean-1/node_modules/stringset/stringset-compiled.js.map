{"version":3,"sources":["stringset.js"],"names":[],"mappings":"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","file":"stringset-compiled.js","sourcesContent":["// stringset.js\n// MIT licensed, see LICENSE file\n// Copyright (c) 2013 Olov Lassus <olov.lassus@gmail.com>\n\nvar StringSet = (function() {\n    \"use strict\";\n\n    // to save us a few characters\n    var hasOwnProperty = Object.prototype.hasOwnProperty;\n\n    var create = (function() {\n        function hasOwnEnumerableProps(obj) {\n            for (var prop in obj) {\n                if (hasOwnProperty.call(obj, prop)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        // FF <= 3.6:\n        // o = {}; o.hasOwnProperty(\"__proto__\" or \"__count__\" or \"__parent__\") => true\n        // o = {\"__proto__\": null}; Object.prototype.hasOwnProperty.call(o, \"__proto__\" or \"__count__\" or \"__parent__\") => false\n        function hasOwnPollutedProps(obj) {\n            return hasOwnProperty.call(obj, \"__count__\") || hasOwnProperty.call(obj, \"__parent__\");\n        }\n\n        var useObjectCreate = false;\n        if (typeof Object.create === \"function\") {\n            if (!hasOwnEnumerableProps(Object.create(null))) {\n                useObjectCreate = true;\n            }\n        }\n        if (useObjectCreate === false) {\n            if (hasOwnEnumerableProps({})) {\n                throw new Error(\"StringSet environment error 0, please file a bug at https://github.com/olov/stringset/issues\");\n            }\n        }\n        // no throw yet means we can create objects without own enumerable props (safe-guard against VMs and shims)\n\n        var o = (useObjectCreate ? Object.create(null) : {});\n        var useProtoClear = false;\n        if (hasOwnPollutedProps(o)) {\n            o.__proto__ = null;\n            if (hasOwnEnumerableProps(o) || hasOwnPollutedProps(o)) {\n                throw new Error(\"StringSet environment error 1, please file a bug at https://github.com/olov/stringset/issues\");\n            }\n            useProtoClear = true;\n        }\n        // no throw yet means we can create objects without own polluted props (safe-guard against VMs and shims)\n\n        return function() {\n            var o = (useObjectCreate ? Object.create(null) : {});\n            if (useProtoClear) {\n                o.__proto__ = null;\n            }\n            return o;\n        };\n    })();\n\n    // stringset ctor\n    function stringset(optional_array) {\n        // use with or without new\n        if (!(this instanceof stringset)) {\n            return new stringset(optional_array);\n        }\n        this.obj = create();\n        this.hasProto = false; // false (no __proto__ item) or true (has __proto__ item)\n\n        if (optional_array) {\n            this.addMany(optional_array);\n        }\n    };\n\n    // primitive methods that deals with data representation\n    stringset.prototype.has = function(item) {\n        // The type-check of item in has, get, set and delete is important because otherwise an object\n        // {toString: function() { return \"__proto__\"; }} can avoid the item === \"__proto__\" test.\n        // The alternative to type-checking would be to force string conversion, i.e. item = String(item);\n        if (typeof item !== \"string\") {\n            throw new Error(\"StringSet expected string item\");\n        }\n        return (item === \"__proto__\" ?\n            this.hasProto :\n            hasOwnProperty.call(this.obj, item));\n    };\n\n    stringset.prototype.add = function(item) {\n        if (typeof item !== \"string\") {\n            throw new Error(\"StringSet expected string item\");\n        }\n        if (item === \"__proto__\") {\n            this.hasProto = true;\n        } else {\n            this.obj[item] = true;\n        }\n    };\n\n    stringset.prototype.remove = function(item) {\n        if (typeof item !== \"string\") {\n            throw new Error(\"StringSet expected string item\");\n        }\n        var didExist = this.has(item);\n        if (item === \"__proto__\") {\n            this.hasProto = false;\n        } else {\n            delete this.obj[item];\n        }\n        return didExist;\n    };\n\n    // alias remove to delete but beware:\n    // ss.delete(\"key\"); // OK in ES5 and later\n    // ss['delete'](\"key\"); // OK in all ES versions\n    // ss.remove(\"key\"); // OK in all ES versions\n    stringset.prototype['delete'] = stringset.prototype.remove;\n\n    stringset.prototype.isEmpty = function() {\n        for (var item in this.obj) {\n            if (hasOwnProperty.call(this.obj, item)) {\n                return false;\n            }\n        }\n        return !this.hasProto;\n    };\n\n    stringset.prototype.size = function() {\n        var len = 0;\n        for (var item in this.obj) {\n            if (hasOwnProperty.call(this.obj, item)) {\n                ++len;\n            }\n        }\n        return (this.hasProto ? len + 1 : len);\n    };\n\n    stringset.prototype.items = function() {\n        var items = [];\n        for (var item in this.obj) {\n            if (hasOwnProperty.call(this.obj, item)) {\n                items.push(item);\n            }\n        }\n        if (this.hasProto) {\n            items.push(\"__proto__\");\n        }\n        return items;\n    };\n\n\n    // methods that rely on the above primitives\n    stringset.prototype.addMany = function(items) {\n        if (!Array.isArray(items)) {\n            throw new Error(\"StringSet expected array\");\n        }\n        for (var i = 0; i < items.length; i++) {\n            this.add(items[i]);\n        }\n        return this;\n    };\n\n    stringset.prototype.merge = function(other) {\n        this.addMany(other.items());\n        return this;\n    };\n\n    stringset.prototype.clone = function() {\n        var other = stringset();\n        return other.merge(this);\n    };\n\n    stringset.prototype.toString = function() {\n        return \"{\" + this.items().map(JSON.stringify).join(\",\") + \"}\";\n    };\n\n    return stringset;\n})();\n\nif (typeof module !== \"undefined\" && typeof module.exports !== \"undefined\") {\n    module.exports = StringSet;\n}\n"]}