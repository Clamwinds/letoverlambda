{"version":3,"sources":["squiffymongorito.js"],"names":[],"mappings":";AACA,IAAI,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AACvB,IAAI,SAAS,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;AACrC,MAAM,SAAS,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;AACvC,MAAM,KAAK,GAAG,SAAS,CAAC,KAAK;;;;AAAC,AAI9B,IAAI,MAAM,GAAG,OAAO;;AAAC,AAErB,IAAI,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC;IAC9B,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC;IACtB,IAAI,GAAG,QAAQ,CAAC;;AAMtB,EAAE,CAAC,WAAW,MAAM,EAAC;AACjB,QAAI,YAAY,GAAG,KAAK,CAAC,MAAM,CAAC;AAC5B,kBAAU,EAAE,UAAU;;AAEtB,kBAAU,EAAE,YAAY;AACpB,mBAAO,UAAU,CAAC;SACrB;KACJ,CAAC,CAAC;AACH,QAAI,YAAY,GAAG,IAAI,YAAY,CAAC;AAChC,eAAO,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAC1D,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;KACvF,CAAC,CAAC;AACH,UAAM,SAAS,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;;AAE1C,QAAI,MAAM,GAAG,MAAM,YAAY,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;AACvE,UAAM,SAAS,CAAC,UAAU,EAAE,CAAC;AAC7B,QAAI,MAAM,GAAG,MAAM,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;AAC3C,WAAO,MAAM,CAAC;CAEjB,CAAC,CAAC,IAAI,CAAC,UAAU,MAAM,EAAC;AACrB,QAAG,MAAM,IAAI,CAAC,EAAC;AACX,YAAI,GAAG,GAAG,yBAAyB,CAAA;KACtC,MACG;AACA,YAAI,GAAG,GAAG,iBAAiB,CAAA;KAC9B;AACD,WAAO,GAAG,CAAC;AACX,WAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;CACvB,EAAE,UAAS,GAAG,EAAC;AACZ,WAAO,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;CAC5B,CAAC,CAAC,IAAI,CAAC,UAAS,GAAG,EACpB;AACI,WAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;CACpB,CAAC;;;;;;;;;;;;AAAC","file":"squiffymongorito-compiled.js","sourcesContent":["/*** Created by calmwinds on 1/3/16.*/\nvar co = require('co');\nvar mongorito = require('mongorito');\nconst Mongorito = require('mongorito');\nconst Model = Mongorito.Model;\n//var monk = require('monk');\n//var wrap = require('co-monk');\n//var Promise = require('bluebird');\nvar string = \"94022\";\n//Robe = require('robe');\nvar debug = require('debug')('http')\n    , http = require('http')\n    , name = 'My App';\n\n\n\n\n\nco(function* (result){\n    var zipcodeClass = Model.extend({\n        collection: 'zipcodes',\n\n        collection: function () {\n            return 'zipcodes';\n        }\n    });\n    var zipcodeclass = new zipcodeClass({\n        zipcode: [\"94025\", \"94027\", \"94301\", \"94305\", \"94303\", \"94306\",\n            \"94306\", \"94085\", \"94043\", \"94035\", \"94041\", \"94040\", \"94022\", \"94049\", \"94086\"]\n    });\n    yield Mongorito.connect('localhost/test');\n\n    var posts1 = yield zipcodeClass.where('zipcode').in([\"94022\"]).count();\n    yield Mongorito.disconnect();\n    var result = yield Promise.resolve(posts1);\n    return result;\n\n}).then(function (result){\n    if(result == 1){\n        var str = \"This is a valid zipcode\"\n    }\n    else{\n        var str = \"Invalid zipcode\"\n    }\n    return str;\n    console.log(result);\n}, function(err){\n    console.error(err.stack);\n}).then(function(str)\n{\n    console.log(str);\n});\n\n\n\n\n// var var1 = yield zipcodeClass.where('zipcode.', '94022').find();\n     //Doing .find().count() gave me a process\n    // that ran forever, but merely doing .count() did not\n\n    // I need to return a string based on if it finds the relevant string inside the zipcode document\n    //Now we are going to find all posts in the database. The returned array contains documents wrapped into Post model.\n\n   // yield console.log(var1);\n    // returns one\n //   console.log(typeof(posts1));\n\n\n\n"]}