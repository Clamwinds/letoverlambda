{"version":3,"sources":["index.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,IAAI,YAAY,GAAG,OAAO,CAAC,oCAAoC,CAAC,CAAC,SAAS,CAAC,CAAC;;AAE5E,OAAO,CAAC,UAAU,GAAG,IAAI,CAAC;;AAE1B,OAAO,CAAC,SAAS,CAAC,GAAG,UAAU,KAAK,EAAE;AACpC,MAAI,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC;;AAEpB,WAAS,aAAa,CAAC,GAAG,EAAE,IAAI,EAAE;AAChC,QAAI,iBAAK,GAAe,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;;AAEtC,SAAK,IAAI,SAAS,GAAG,KAAK,EAAE,QAAQ,GAAG,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,SAAS,GAAG,QAAQ,GAAG,SAAS,GAAG,YAAY,CAAC,SAAS,CAAC,IAAI;AACrI,UAAI,IAAI,CAAC;;AAET,UAAI,QAAQ,EAAE;AACZ,YAAI,EAAE,IAAI,SAAS,CAAC,MAAM,EAAE,MAAM;AAClC,YAAI,GAAG,SAAS,CAAC,EAAE,EAAE,CAAC,CAAC;OACxB,MAAM;AACL,UAAE,GAAG,SAAS,CAAC,IAAI,EAAE,CAAC;AACtB,YAAI,EAAE,CAAC,IAAI,EAAE,MAAM;AACnB,YAAI,GAAG,EAAE,CAAC,KAAK,CAAC;OACjB;;AAED,UAAI,KAAK,GAAG,IAAI,CAAC;;AAEjB,UAAI,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;AACtB,UAAI,CAAC,KAAK,CAAC,qBAAqB,EAAE,EAAE,SAAS;;AAE7C,UAAI,MAAM,GAAG,CAAC,CAAC,mBAAmB,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,kBAAkB,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;;;AAAC,AAGjG,YAAM,CAAC,WAAW,GAAG,CAAC;;;AAAC,AAGvB,UAAI,CAAC,EAAE,GAAG,IAAI,CAAC;;AAEf,WAAK,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;KAC3B;GACF;;AAED,SAAO;AACL,WAAO,EAAE;AACP,oBAAc,EAAE,SAAS,cAAc,CAAC,IAAI,EAAE;AAC5C,YAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;AACrB,YAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;;AAEzB,YAAI,CAAC,CAAC,UAAU,CAAC,MAAM,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC,mBAAmB,CAAC,MAAM,CAAC,EAAE;AACzE,iBAAO;SACR;;AAED,qBAAa,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;OAC7B;;AAED,gBAAU,EAAE,SAAS,UAAU,CAAC,IAAI,EAAE;AACpC,qBAAa,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;OACnC;KACF;GACF,CAAC;CACH,CAAC;;AAEF,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC","file":"index-compiled.js","sourcesContent":["\"use strict\";\n\nvar _getIterator = require(\"babel-runtime/core-js/get-iterator\")[\"default\"];\n\nexports.__esModule = true;\n\nexports[\"default\"] = function (_ref2) {\n  var t = _ref2.types;\n\n  function statementList(key, path) {\n    var paths /*: Array*/ = path.get(key);\n\n    for (var _iterator = paths, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var _path = _ref;\n\n      var func = _path.node;\n      if (!_path.isFunctionDeclaration()) continue;\n\n      var declar = t.variableDeclaration(\"let\", [t.variableDeclarator(func.id, t.toExpression(func))]);\n\n      // hoist it up above everything else\n      declar._blockHoist = 2;\n\n      // todo: name this\n      func.id = null;\n\n      _path.replaceWith(declar);\n    }\n  }\n\n  return {\n    visitor: {\n      BlockStatement: function BlockStatement(path) {\n        var node = path.node;\n        var parent = path.parent;\n\n        if (t.isFunction(parent, { body: node }) || t.isExportDeclaration(parent)) {\n          return;\n        }\n\n        statementList(\"body\", path);\n      },\n\n      SwitchCase: function SwitchCase(path) {\n        statementList(\"consequent\", path);\n      }\n    }\n  };\n};\n\nmodule.exports = exports[\"default\"];"]}