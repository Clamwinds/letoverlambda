{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\n\nexports[\"default\"] = function (_ref) {\n  var messages = _ref.messages;\n  var template = _ref.template;\n  var t = _ref.types;\n\n  var buildForOfArray = template(\"\\n    for (var KEY = 0; KEY < ARR.length; KEY++) BODY;\\n  \");\n\n  var buildForOfLoose = template(\"\\n    for (var LOOP_OBJECT = OBJECT,\\n             IS_ARRAY = Array.isArray(LOOP_OBJECT),\\n             INDEX = 0,\\n             LOOP_OBJECT = IS_ARRAY ? LOOP_OBJECT : LOOP_OBJECT[Symbol.iterator]();;) {\\n      var ID;\\n      if (IS_ARRAY) {\\n        if (INDEX >= LOOP_OBJECT.length) break;\\n        ID = LOOP_OBJECT[INDEX++];\\n      } else {\\n        INDEX = LOOP_OBJECT.next();\\n        if (INDEX.done) break;\\n        ID = INDEX.value;\\n      }\\n    }\\n  \");\n\n  var buildForOf = template(\"\\n    var ITERATOR_COMPLETION = true;\\n    var ITERATOR_HAD_ERROR_KEY = false;\\n    var ITERATOR_ERROR_KEY = undefined;\\n    try {\\n      for (var ITERATOR_KEY = OBJECT[Symbol.iterator](), STEP_KEY; !(ITERATOR_COMPLETION = (STEP_KEY = ITERATOR_KEY.next()).done); ITERATOR_COMPLETION = true) {\\n      }\\n    } catch (err) {\\n      ITERATOR_HAD_ERROR_KEY = true;\\n      ITERATOR_ERROR_KEY = err;\\n    } finally {\\n      try {\\n        if (!ITERATOR_COMPLETION && ITERATOR_KEY.return) {\\n          ITERATOR_KEY.return();\\n        }\\n      } finally {\\n        if (ITERATOR_HAD_ERROR_KEY) {\\n          throw ITERATOR_ERROR_KEY;\\n        }\\n      }\\n    }\\n  \");\n\n  function _ForOfStatementArray(path) {\n    var node = path.node;\n    var scope = path.scope;\n\n    var nodes = [];\n    var right = node.right;\n\n    if (!t.isIdentifier(right) || !scope.hasBinding(right.name)) {\n      var uid = scope.generateUidIdentifier(\"arr\");\n      nodes.push(t.variableDeclaration(\"var\", [t.variableDeclarator(uid, right)]));\n      right = uid;\n    }\n\n    var iterationKey = scope.generateUidIdentifier(\"i\");\n\n    var loop = buildForOfArray({\n      BODY: node.body,\n      KEY: iterationKey,\n      ARR: right\n    });\n\n    t.inherits(loop, node);\n    t.ensureBlock(loop);\n\n    var iterationValue = t.memberExpression(right, iterationKey, true);\n\n    var left = node.left;\n    if (t.isVariableDeclaration(left)) {\n      left.declarations[0].init = iterationValue;\n      loop.body.body.unshift(left);\n    } else {\n      loop.body.body.unshift(t.expressionStatement(t.assignmentExpression(\"=\", left, iterationValue)));\n    }\n\n    if (path.parentPath.isLabeledStatement()) {\n      loop = t.labeledStatement(path.parentPath.node.label, loop);\n    }\n\n    nodes.push(loop);\n\n    return nodes;\n  }\n\n  return {\n    visitor: {\n      ForOfStatement: function ForOfStatement(path, state) {\n        if (path.get(\"right\").isArrayExpression()) {\n          return path.replaceWithMultiple(_ForOfStatementArray.call(this, path, state));\n        }\n\n        var callback = spec;\n        if (state.opts.loose) callback = loose;\n\n        var node = path.node;\n\n        var build = callback(path, state);\n        var declar = build.declar;\n        var loop = build.loop;\n        var block = loop.body;\n\n        // ensure that it's a block so we can take all its statements\n        path.ensureBlock();\n\n        // add the value declaration to the new loop body\n        if (declar) {\n          block.body.push(declar);\n        }\n\n        // push the rest of the original loop body onto our new body\n        block.body = block.body.concat(node.body.body);\n\n        t.inherits(loop, node);\n        t.inherits(loop.body, node.body);\n\n        if (build.replaceParent) {\n          path.parentPath.replaceWithMultiple(build.node);\n          path.remove();\n        } else {\n          path.replaceWithMultiple(build.node);\n        }\n      }\n    }\n  };\n\n  function loose(path, file) {\n    var node = path.node;\n    var scope = path.scope;\n\n    var left = node.left;\n    var declar = undefined,\n        id = undefined;\n\n    if (t.isIdentifier(left) || t.isPattern(left) || t.isMemberExpression(left)) {\n      // for (i of test), for ({ i } of test)\n      id = left;\n    } else if (t.isVariableDeclaration(left)) {\n      // for (let i of test)\n      id = scope.generateUidIdentifier(\"ref\");\n      declar = t.variableDeclaration(left.kind, [t.variableDeclarator(left.declarations[0].id, id)]);\n    } else {\n      throw file.buildCodeFrameError(left, messages.get(\"unknownForHead\", left.type));\n    }\n\n    var iteratorKey = scope.generateUidIdentifier(\"iterator\");\n    var isArrayKey = scope.generateUidIdentifier(\"isArray\");\n\n    var loop = buildForOfLoose({\n      LOOP_OBJECT: iteratorKey,\n      IS_ARRAY: isArrayKey,\n      OBJECT: node.right,\n      INDEX: scope.generateUidIdentifier(\"i\"),\n      ID: id\n    });\n\n    if (!declar) {\n      // no declaration so we need to remove the variable declaration at the top of\n      // the for-of-loose template\n      loop.body.body.shift();\n    }\n\n    //\n\n    return {\n      declar: declar,\n      node: loop,\n      loop: loop\n    };\n  }\n\n  function spec(path, file) {\n    var node = path.node;\n    var scope = path.scope;\n    var parent = path.parent;\n\n    var left = node.left;\n    var declar = undefined;\n\n    var stepKey = scope.generateUidIdentifier(\"step\");\n    var stepValue = t.memberExpression(stepKey, t.identifier(\"value\"));\n\n    if (t.isIdentifier(left) || t.isPattern(left) || t.isMemberExpression(left)) {\n      // for (i of test), for ({ i } of test)\n      declar = t.expressionStatement(t.assignmentExpression(\"=\", left, stepValue));\n    } else if (t.isVariableDeclaration(left)) {\n      // for (let i of test)\n      declar = t.variableDeclaration(left.kind, [t.variableDeclarator(left.declarations[0].id, stepValue)]);\n    } else {\n      throw file.buildCodeFrameError(left, messages.get(\"unknownForHead\", left.type));\n    }\n\n    //\n\n    var iteratorKey = scope.generateUidIdentifier(\"iterator\");\n\n    var template = buildForOf({\n      ITERATOR_HAD_ERROR_KEY: scope.generateUidIdentifier(\"didIteratorError\"),\n      ITERATOR_COMPLETION: scope.generateUidIdentifier(\"iteratorNormalCompletion\"),\n      ITERATOR_ERROR_KEY: scope.generateUidIdentifier(\"iteratorError\"),\n      ITERATOR_KEY: iteratorKey,\n      STEP_KEY: stepKey,\n      OBJECT: node.right,\n      BODY: null\n    });\n\n    var isLabeledParent = t.isLabeledStatement(parent);\n\n    var tryBody = template[3].block.body;\n    var loop = tryBody[0];\n\n    if (isLabeledParent) {\n      tryBody[0] = t.labeledStatement(parent.label, loop);\n    }\n\n    //\n\n    return {\n      replaceParent: isLabeledParent,\n      declar: declar,\n      loop: loop,\n      node: template\n    };\n  }\n};\n\nmodule.exports = exports[\"default\"];"]}