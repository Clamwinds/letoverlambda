{"version":3,"sources":["index.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,IAAI,YAAY,GAAG,OAAO,CAAC,oCAAoC,CAAC,CAAC,SAAS,CAAC,CAAC;;AAE5E,OAAO,CAAC,UAAU,GAAG,IAAI,CAAC;;AAE1B,OAAO,CAAC,SAAS,CAAC,GAAG,UAAU,KAAK,EAAE;AACpC,MAAI,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC;;AAEpB,MAAI,cAAc,GAAG,OAAO,CAAC;;AAE7B,SAAO;AACL,YAAQ,EAAE,OAAO,CAAC,0BAA0B,CAAC;;AAE7C,WAAO,EAAE;AACP,aAAO,EAAE,SAAS,OAAO,CAAC,IAAI,EAAE,KAAK,EAAE;AACrC,YAAI,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC;;AAEvC,aAAK,IAAI,SAAS,GAAI,4BAAQ,AAAqB,EAAE,QAAQ,GAAG,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,SAAS,GAAG,QAAQ,GAAG,SAAS,GAAG,YAAY,CAAC,SAAS,CAAC,IAAI;AAC9J,cAAI,IAAI,CAAC;;AAET,cAAI,QAAQ,EAAE;AACZ,gBAAI,EAAE,IAAI,SAAS,CAAC,MAAM,EAAE,MAAM;AAClC,gBAAI,GAAG,SAAS,CAAC,EAAE,EAAE,CAAC,CAAC;WACxB,MAAM;AACL,cAAE,GAAG,SAAS,CAAC,IAAI,EAAE,CAAC;AACtB,gBAAI,EAAE,CAAC,IAAI,EAAE,MAAM;AACnB,gBAAI,GAAG,EAAE,CAAC,KAAK,CAAC;WACjB;;AAED,cAAI,OAAO,GAAG,IAAI,CAAC;;AAEnB,cAAI,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE;;AAE9C,mBAAO,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC;;;AAAC,AAG1D,gBAAI,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,IAAI,EAAE,EAAE,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC;WACrE;SACF;OACF;;AAED,UAAI,EAAE,SAAS,IAAI,CAAC,IAAI,EAAE;AACxB,YAAI,CAAC,MAAM,EAAE,CAAC;OACf;;AAED,mBAAa,EAAE,SAAS,aAAa,CAAC,IAAI,EAAE;AAC1C,YAAI,CAAC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;AAChC,YAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC;OACrC;;AAED,WAAK,EAAE,SAAS,KAAK,CAAC,KAAK,EAAE;AAC3B,YAAI,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;;AAEtB,YAAI,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC;OAC3B;;AAED,cAAQ,EAAE,SAAS,QAAQ,CAAC,KAAK,EAAE;AACjC,YAAI,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;;AAEtB,aAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC3C,cAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;AAC3B,eAAK,CAAC,QAAQ,GAAG,KAAK,CAAC;SACxB;OACF;;AAED,wBAAkB,EAAE,SAAS,kBAAkB,CAAC,IAAI,EAAE;AACpD,YAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;;AAErB,WAAG;AACD,cAAI,GAAG,IAAI,CAAC,UAAU,CAAC;SACxB,QAAQ,CAAC,CAAC,oBAAoB,CAAC,IAAI,CAAC,EAAE;AACvC,YAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;OACxB;KACF;GACF,CAAC;CACH,CAAC;;AAEF,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC","file":"index-compiled.js","sourcesContent":["\"use strict\";\n\nvar _getIterator = require(\"babel-runtime/core-js/get-iterator\")[\"default\"];\n\nexports.__esModule = true;\n\nexports[\"default\"] = function (_ref2) {\n  var t = _ref2.types;\n\n  var FLOW_DIRECTIVE = \"@flow\";\n\n  return {\n    inherits: require(\"babel-plugin-syntax-flow\"),\n\n    visitor: {\n      Program: function Program(path, _ref3) {\n        var comments = _ref3.file.ast.comments;\n\n        for (var _iterator = (comments /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {\n          var _ref;\n\n          if (_isArray) {\n            if (_i >= _iterator.length) break;\n            _ref = _iterator[_i++];\n          } else {\n            _i = _iterator.next();\n            if (_i.done) break;\n            _ref = _i.value;\n          }\n\n          var comment = _ref;\n\n          if (comment.value.indexOf(FLOW_DIRECTIVE) >= 0) {\n            // remove flow directive\n            comment.value = comment.value.replace(FLOW_DIRECTIVE, \"\");\n\n            // remove the comment completely if it only consists of whitespace and/or stars\n            if (!comment.value.replace(/\\*/g, \"\").trim()) comment.ignore = true;\n          }\n        }\n      },\n\n      Flow: function Flow(path) {\n        path.remove();\n      },\n\n      ClassProperty: function ClassProperty(path) {\n        path.node.typeAnnotation = null;\n        if (!path.node.value) path.remove();\n      },\n\n      Class: function Class(_ref4) {\n        var node = _ref4.node;\n\n        node[\"implements\"] = null;\n      },\n\n      Function: function Function(_ref5) {\n        var node = _ref5.node;\n\n        for (var i = 0; i < node.params.length; i++) {\n          var param = node.params[i];\n          param.optional = false;\n        }\n      },\n\n      TypeCastExpression: function TypeCastExpression(path) {\n        var node = path.node;\n\n        do {\n          node = node.expression;\n        } while (t.isTypeCastExpression(node));\n        path.replaceWith(node);\n      }\n    }\n  };\n};\n\nmodule.exports = exports[\"default\"];"]}