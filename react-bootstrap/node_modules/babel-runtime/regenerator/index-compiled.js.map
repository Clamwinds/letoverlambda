{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;AAEA,IAAI,CAAC,GACH,QAAO,MAAM,yCAAN,MAAM,OAAK,QAAQ,GAAG,MAAM,GACnC,QAAO,MAAM,yCAAN,MAAM,OAAK,QAAQ,GAAG,MAAM,GACnC,QAAO,IAAI,yCAAJ,IAAI,OAAK,QAAQ,GAAG,IAAI,YAAO;;;;AAAC,AAIzC,IAAI,UAAU,GAAG,CAAC,CAAC,kBAAkB,IACnC,MAAM,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,oBAAoB,CAAC,IAAI,CAAC;;;AAAC,AAGnE,IAAI,UAAU,GAAG,UAAU,IAAI,CAAC,CAAC,kBAAkB;;;AAAC,AAGpD,CAAC,CAAC,kBAAkB,GAAG,SAAS,CAAC;;AAEjC,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;;AAEtC,IAAI,UAAU,EAAE;;AAEd,GAAC,CAAC,kBAAkB,GAAG,UAAU,CAAC;CACnC,MAAM;;AAEL,MAAI;AACF,WAAO,CAAC,CAAC,kBAAkB,CAAC;GAC7B,CAAC,OAAM,CAAC,EAAE;AACT,KAAC,CAAC,kBAAkB,GAAG,SAAS,CAAC;GAClC;CACF;;AAED,MAAM,CAAC,OAAO,GAAG,EAAE,SAAS,EAAE,MAAM,CAAC,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC","file":"index-compiled.js","sourcesContent":["// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g =\n  typeof global === \"object\" ? global :\n  typeof window === \"object\" ? window :\n  typeof self === \"object\" ? self : this;\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = require(\"./runtime\");\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n\nmodule.exports = { \"default\": module.exports, __esModule: true };\n"]}