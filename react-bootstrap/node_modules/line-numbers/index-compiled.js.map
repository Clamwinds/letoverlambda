{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;AAGA,IAAI,OAAO,GAAG,OAAO,CAAC,UAAU,CAAC,CAAA;;AAEjC,SAAS,GAAG,CAAC,OAAO,EAAE,GAAG,EAAE,YAAY,EAAE;AACvC,SAAQ,GAAG,IAAI,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,YAAY,CAAC;CACtD;;AAED,SAAS,WAAW,CAAC,IAAI,EAAE,OAAO,EAAE;AAClC,MAAI,SAAS,GAAG,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,IAAI,EAAE,CAAC,CAAA;AAC7C,MAAI,SAAS,GAAG,SAAS,CAAC,WAAW,EAAE,QAAQ,CAAC,SAAS,CAAC,CAAA;AAC1D,MAAI,OAAO,GAAK,SAAS,CAAC,SAAS,EAAE,GAAG,CAAC,CAAA;AACzC,MAAI,MAAM,GAAM,SAAS,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAA;AACxC,MAAI,KAAK,GAAO,SAAS,CAAC,OAAO,EAAE,KAAK,CAAC,CAAA;AACzC,MAAI,KAAK,GAAO,SAAS,CAAC,OAAO,EAAE,CAAC,CAAC,CAAA;AACrC,MAAI,OAAO,GAAK,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;AACnC,MAAI,KAAK,GAAQ,OAAO,GAAG,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,AAAC,CAAA;AACnD,MAAI,GAAG,GAAS,KAAK,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,CAAA;AACxC,MAAI,KAAK,GAAO,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,CAAA;AAClC,MAAI,QAAQ,GAAI,KAAK,CAAC,GAAG,CAAC,UAAS,IAAI,EAAE,KAAK,EAAE;AAC9C,QAAI,MAAM,GAAI,KAAK,GAAG,KAAK,CAAA;AAC3B,QAAI,MAAM,GAAI,EAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK;AAC1D,UAAI,EAAE,IAAI,EAAC,CAAA;AAC1B,aAAS,CAAC,MAAM,CAAC,CAAA;AACjB,WAAO,MAAM,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO,CAAC,GACtD,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,IAAI,CAAA;GAClC,CAAC,CAAA;AACF,SAAQ,OAAO,GAAG,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;CAClD;;AAED,MAAM,CAAC,OAAO,GAAG,WAAW,CAAA","file":"index-compiled.js","sourcesContent":["// Copyright 2014, 2015 Simon Lydell\n// X11 (“MIT”) Licensed. (See LICENSE.)\n\nvar leftPad = require(\"left-pad\")\n\nfunction get(options, key, defaultValue) {\n  return (key in options ? options[key] : defaultValue)\n}\n\nfunction lineNumbers(code, options) {\n  var getOption = get.bind(null, options || {})\n  var transform = getOption(\"transform\", Function.prototype)\n  var padding   = getOption(\"padding\", \" \")\n  var before    = getOption(\"before\", \" \")\n  var after     = getOption(\"after\", \" | \")\n  var start     = getOption(\"start\", 1)\n  var isArray   = Array.isArray(code)\n  var lines     = (isArray ? code : code.split(\"\\n\"))\n  var end       = start + lines.length - 1\n  var width     = String(end).length\n  var numbered  = lines.map(function(line, index) {\n    var number  = start + index\n    var params  = {before: before, number: number, width: width, after: after,\n                   line: line}\n    transform(params)\n    return params.before + leftPad(params.number, width, padding) +\n           params.after + params.line\n  })\n  return (isArray ? numbered : numbered.join(\"\\n\"))\n}\n\nmodule.exports = lineNumbers\n"]}