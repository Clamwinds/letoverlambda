{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["// Copyright 2014, 2015 Simon Lydell\n// X11 (“MIT”) Licensed. (See LICENSE.)\n\nvar fs     = require(\"fs\")\nvar assert = require(\"assert\")\n\nvar lineNumbers = require(\"../\")\n\nvar sumJS = [\n  \"/**\",\n  \" * Sums two numbers.\",\n  \" *\",\n  \" * @param a Number\",\n  \" * @param b Number\",\n  \" * @returns Number\",\n  \" */\",\n  \"\",\n  \"function sum(a, b) {\",\n  \"  return a + b\",\n  \"}\"\n]\n\nvar defaultOutput = [\n  \"  1 | /**\",\n  \"  2 |  * Sums two numbers.\",\n  \"  3 |  *\",\n  \"  4 |  * @param a Number\",\n  \"  5 |  * @param b Number\",\n  \"  6 |  * @returns Number\",\n  \"  7 |  */\",\n  \"  8 | \",\n  \"  9 | function sum(a, b) {\",\n  \" 10 |   return a + b\",\n  \" 11 | }\"\n]\n\nsuite(\"lineNumbers\", function() {\n\n  test(\"is a function\", function() {\n    assert.equal(typeof lineNumbers, \"function\")\n  })\n\n\n  test(\"defaults\", function() {\n    assert.equal(lineNumbers(sumJS.join(\"\\n\")), defaultOutput.join(\"\\n\"))\n  })\n\n\n  test(\"array of lines\", function() {\n    assert.deepEqual(lineNumbers(sumJS), defaultOutput)\n  })\n\n\n  test(\"options\", function() {\n    assert.equal(lineNumbers(sumJS.join(\"\\n\"), {\n      start: 5,\n      padding: \"0\",\n      before: \"  \",\n      after: \": \",\n      transform: function(params) {\n        if (params.number === 13) {\n          params.line = params.line + \"\\n\" + params.before +\n                        Array(params.width + 1).join(\" \") + params.after +\n                        Array(params.line.indexOf(\"(\") + 1).join(\" \") + \"^\"\n          params.before = params.before.replace(/^./, \">\")\n        }\n      }\n    }), [\n      \"  05: /**\",\n      \"  06:  * Sums two numbers.\",\n      \"  07:  *\",\n      \"  08:  * @param a Number\",\n      \"  09:  * @param b Number\",\n      \"  10:  * @returns Number\",\n      \"  11:  */\",\n      \"  12: \",\n      \"> 13: function sum(a, b) {\",\n      \"    :             ^\",\n      \"  14:   return a + b\",\n      \"  15: }\"\n    ].join(\"\\n\"))\n  })\n\n\n  test(\"Windows-style newlines\", function() {\n    assert.equal(lineNumbers(\"a\\r\\nb\"), \" 1 | a\\r\\n 2 | b\")\n  })\n\n\n  test(\"trailing newline\", function() {\n    assert.equal(lineNumbers(\"single line\\n\"), \" 1 | single line\\n 2 | \")\n  })\n\n\n  test(\"no newline\", function() {\n    assert.equal(lineNumbers(\"single line\"), \" 1 | single line\")\n  })\n\n\n  test(\"one more digit\", function() {\n    assert.equal(lineNumbers(\"a\", {start: 9}), \" 9 | a\")\n    assert.equal(lineNumbers(\"a\\nb\", {start: 9}), \"  9 | a\\n 10 | b\")\n  })\n\n})\n"]}