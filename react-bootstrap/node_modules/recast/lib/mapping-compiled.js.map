{"version":3,"sources":["mapping.js"],"names":[],"mappings":"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","file":"mapping-compiled.js","sourcesContent":["var assert = require(\"assert\");\nvar types = require(\"./types\");\nvar isString = types.builtInTypes.string;\nvar isNumber = types.builtInTypes.number;\nvar SourceLocation = types.namedTypes.SourceLocation;\nvar Position = types.namedTypes.Position;\nvar linesModule = require(\"./lines\");\nvar comparePos = require(\"./util\").comparePos;\n\nfunction Mapping(sourceLines, sourceLoc, targetLoc) {\n    assert.ok(this instanceof Mapping);\n    assert.ok(sourceLines instanceof linesModule.Lines);\n    SourceLocation.assert(sourceLoc);\n\n    if (targetLoc) {\n        // In certain cases it's possible for targetLoc.{start,end}.column\n        // values to be negative, which technically makes them no longer\n        // valid SourceLocation nodes, so we need to be more forgiving.\n        assert.ok(\n            isNumber.check(targetLoc.start.line) &&\n            isNumber.check(targetLoc.start.column) &&\n            isNumber.check(targetLoc.end.line) &&\n            isNumber.check(targetLoc.end.column)\n        );\n    } else {\n        // Assume identity mapping if no targetLoc specified.\n        targetLoc = sourceLoc;\n    }\n\n    Object.defineProperties(this, {\n        sourceLines: { value: sourceLines },\n        sourceLoc: { value: sourceLoc },\n        targetLoc: { value: targetLoc }\n    });\n}\n\nvar Mp = Mapping.prototype;\nmodule.exports = Mapping;\n\nMp.slice = function(lines, start, end) {\n    assert.ok(lines instanceof linesModule.Lines);\n    Position.assert(start);\n\n    if (end) {\n        Position.assert(end);\n    } else {\n        end = lines.lastPos();\n    }\n\n    var sourceLines = this.sourceLines;\n    var sourceLoc = this.sourceLoc;\n    var targetLoc = this.targetLoc;\n\n    function skip(name) {\n        var sourceFromPos = sourceLoc[name];\n        var targetFromPos = targetLoc[name];\n        var targetToPos = start;\n\n        if (name === \"end\") {\n            targetToPos = end;\n        } else {\n            assert.strictEqual(name, \"start\");\n        }\n\n        return skipChars(\n            sourceLines, sourceFromPos,\n            lines, targetFromPos, targetToPos\n        );\n    }\n\n    if (comparePos(start, targetLoc.start) <= 0) {\n        if (comparePos(targetLoc.end, end) <= 0) {\n            targetLoc = {\n                start: subtractPos(targetLoc.start, start.line, start.column),\n                end: subtractPos(targetLoc.end, start.line, start.column)\n            };\n\n            // The sourceLoc can stay the same because the contents of the\n            // targetLoc have not changed.\n\n        } else if (comparePos(end, targetLoc.start) <= 0) {\n            return null;\n\n        } else {\n            sourceLoc = {\n                start: sourceLoc.start,\n                end: skip(\"end\")\n            };\n\n            targetLoc = {\n                start: subtractPos(targetLoc.start, start.line, start.column),\n                end: subtractPos(end, start.line, start.column)\n            };\n        }\n\n    } else {\n        if (comparePos(targetLoc.end, start) <= 0) {\n            return null;\n        }\n\n        if (comparePos(targetLoc.end, end) <= 0) {\n            sourceLoc = {\n                start: skip(\"start\"),\n                end: sourceLoc.end\n            };\n\n            targetLoc = {\n                // Same as subtractPos(start, start.line, start.column):\n                start: { line: 1, column: 0 },\n                end: subtractPos(targetLoc.end, start.line, start.column)\n            };\n\n        } else {\n            sourceLoc = {\n                start: skip(\"start\"),\n                end: skip(\"end\")\n            };\n\n            targetLoc = {\n                // Same as subtractPos(start, start.line, start.column):\n                start: { line: 1, column: 0 },\n                end: subtractPos(end, start.line, start.column)\n            };\n        }\n    }\n\n    return new Mapping(this.sourceLines, sourceLoc, targetLoc);\n};\n\nMp.add = function(line, column) {\n    return new Mapping(this.sourceLines, this.sourceLoc, {\n        start: addPos(this.targetLoc.start, line, column),\n        end: addPos(this.targetLoc.end, line, column)\n    });\n};\n\nfunction addPos(toPos, line, column) {\n    return {\n        line: toPos.line + line - 1,\n        column: (toPos.line === 1)\n            ? toPos.column + column\n            : toPos.column\n    };\n}\n\nMp.subtract = function(line, column) {\n    return new Mapping(this.sourceLines, this.sourceLoc, {\n        start: subtractPos(this.targetLoc.start, line, column),\n        end: subtractPos(this.targetLoc.end, line, column)\n    });\n};\n\nfunction subtractPos(fromPos, line, column) {\n    return {\n        line: fromPos.line - line + 1,\n        column: (fromPos.line === line)\n            ? fromPos.column - column\n            : fromPos.column\n    };\n}\n\nMp.indent = function(by, skipFirstLine, noNegativeColumns) {\n    if (by === 0) {\n        return this;\n    }\n\n    var targetLoc = this.targetLoc;\n    var startLine = targetLoc.start.line;\n    var endLine = targetLoc.end.line;\n\n    if (skipFirstLine && startLine === 1 && endLine === 1) {\n        return this;\n    }\n\n    targetLoc = {\n        start: targetLoc.start,\n        end: targetLoc.end\n    };\n\n    if (!skipFirstLine || startLine > 1) {\n        var startColumn = targetLoc.start.column + by;\n        targetLoc.start = {\n            line: startLine,\n            column: noNegativeColumns\n                ? Math.max(0, startColumn)\n                : startColumn\n        };\n    }\n\n    if (!skipFirstLine || endLine > 1) {\n        var endColumn = targetLoc.end.column + by;\n        targetLoc.end = {\n            line: endLine,\n            column: noNegativeColumns\n                ? Math.max(0, endColumn)\n                : endColumn\n        };\n    }\n\n    return new Mapping(this.sourceLines, this.sourceLoc, targetLoc);\n};\n\nfunction skipChars(\n    sourceLines, sourceFromPos,\n    targetLines, targetFromPos, targetToPos\n) {\n    assert.ok(sourceLines instanceof linesModule.Lines);\n    assert.ok(targetLines instanceof linesModule.Lines);\n    Position.assert(sourceFromPos);\n    Position.assert(targetFromPos);\n    Position.assert(targetToPos);\n\n    var targetComparison = comparePos(targetFromPos, targetToPos);\n    if (targetComparison === 0) {\n        // Trivial case: no characters to skip.\n        return sourceFromPos;\n    }\n\n    if (targetComparison < 0) {\n        // Skipping forward.\n\n        var sourceCursor = sourceLines.skipSpaces(sourceFromPos);\n        var targetCursor = targetLines.skipSpaces(targetFromPos);\n\n        var lineDiff = targetToPos.line - targetCursor.line;\n        sourceCursor.line += lineDiff;\n        targetCursor.line += lineDiff;\n\n        if (lineDiff > 0) {\n            // If jumping to later lines, reset columns to the beginnings\n            // of those lines.\n            sourceCursor.column = 0;\n            targetCursor.column = 0;\n        } else {\n            assert.strictEqual(lineDiff, 0);\n        }\n\n        while (comparePos(targetCursor, targetToPos) < 0 &&\n               targetLines.nextPos(targetCursor, true)) {\n            assert.ok(sourceLines.nextPos(sourceCursor, true));\n            assert.strictEqual(\n                sourceLines.charAt(sourceCursor),\n                targetLines.charAt(targetCursor)\n            );\n        }\n\n    } else {\n        // Skipping backward.\n\n        var sourceCursor = sourceLines.skipSpaces(sourceFromPos, true);\n        var targetCursor = targetLines.skipSpaces(targetFromPos, true);\n\n        var lineDiff = targetToPos.line - targetCursor.line;\n        sourceCursor.line += lineDiff;\n        targetCursor.line += lineDiff;\n\n        if (lineDiff < 0) {\n            // If jumping to earlier lines, reset columns to the ends of\n            // those lines.\n            sourceCursor.column = sourceLines.getLineLength(sourceCursor.line);\n            targetCursor.column = targetLines.getLineLength(targetCursor.line);\n        } else {\n            assert.strictEqual(lineDiff, 0);\n        }\n\n        while (comparePos(targetToPos, targetCursor) < 0 &&\n               targetLines.prevPos(targetCursor, true)) {\n            assert.ok(sourceLines.prevPos(sourceCursor, true));\n            assert.strictEqual(\n                sourceLines.charAt(sourceCursor),\n                targetLines.charAt(targetCursor)\n            );\n        }\n    }\n\n    return sourceCursor;\n}\n"]}