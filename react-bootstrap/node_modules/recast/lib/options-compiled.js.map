{"version":3,"sources":["options.js"],"names":[],"mappings":";;AAAA,IAAI,QAAQ,GAAG;;;;AAIX,UAAM,EAAE,OAAO,CAAC,YAAY,CAAC;;;;;AAK7B,YAAQ,EAAE,CAAC;;;;AAIX,WAAO,EAAE,KAAK;;;;AAId,mBAAe,EAAE,IAAI;;;AAGrB,kBAAc,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG;;;;;;AAMjC,cAAU,EAAE,EAAE;;;;;AAKd,kBAAc,EAAE,IAAI;;;;;;AAMpB,iBAAa,EAAE,IAAI;;;;AAInB,cAAU,EAAE,IAAI;;;;;AAKhB,kBAAc,EAAE,IAAI;;;;AAIpB,SAAK,EAAE,KAAK;;;;AAIZ,YAAQ,EAAE,IAAI;;;;;;AAMd,SAAK,EAAE,IAAI;;;;;AAKX,iBAAa,EAAE,KAAK;CACvB;IAAE,MAAM,GAAG,QAAQ,CAAC,cAAc;;;AAAC,AAGpC,OAAO,CAAC,SAAS,GAAG,UAAS,OAAO,EAAE;AAClC,WAAO,GAAG,OAAO,IAAI,QAAQ,CAAC;;AAE9B,aAAS,GAAG,CAAC,GAAG,EAAE;AACd,eAAO,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,GAC1B,OAAO,CAAC,GAAG,CAAC,GACZ,QAAQ,CAAC,GAAG,CAAC,CAAC;KACvB;;AAED,WAAO;AACH,gBAAQ,EAAE,CAAC,GAAG,CAAC,UAAU,CAAC;AAC1B,eAAO,EAAE,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC;AACzB,uBAAe,EAAE,CAAC,CAAC,GAAG,CAAC,iBAAiB,CAAC;AACzC,sBAAc,EAAE,GAAG,CAAC,gBAAgB,CAAC;AACrC,kBAAU,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;AAC1C,sBAAc,EAAE,GAAG,CAAC,gBAAgB,CAAC;AACrC,qBAAa,EAAE,GAAG,CAAC,eAAe,CAAC;AACnC,kBAAU,EAAE,GAAG,CAAC,YAAY,CAAC;AAC7B,sBAAc,EAAE,GAAG,CAAC,gBAAgB,CAAC;AACrC,cAAM,EAAE,GAAG,CAAC,SAAS,CAAC,IAAI,GAAG,CAAC,QAAQ,CAAC;AACvC,aAAK,EAAE,GAAG,CAAC,OAAO,CAAC;AACnB,gBAAQ,EAAE,GAAG,CAAC,UAAU,CAAC;AACzB,aAAK,EAAE,GAAG,CAAC,OAAO,CAAC;AACnB,qBAAa,EAAE,GAAG,CAAC,eAAe,CAAC;KACtC,CAAC;CACL,CAAC","file":"options-compiled.js","sourcesContent":["var defaults = {\n    // If you want to use a different branch of esprima, or any other\n    // module that supports a .parse function, pass that module object to\n    // recast.parse as options.parser (legacy synonym: options.esprima).\n    parser: require(\"esprima-fb\"),\n\n    // Number of spaces the pretty-printer should use per tab for\n    // indentation. If you do not pass this option explicitly, it will be\n    // (quite reliably!) inferred from the original code.\n    tabWidth: 4,\n\n    // If you really want the pretty-printer to use tabs instead of\n    // spaces, make this option true.\n    useTabs: false,\n\n    // The reprinting code leaves leading whitespace untouched unless it\n    // has to reindent a line, or you pass false for this option.\n    reuseWhitespace: true,\n\n    // Override this option to use a different line terminator, e.g. \\r\\n.\n    lineTerminator: require(\"os\").EOL,\n\n    // Some of the pretty-printer code (such as that for printing function\n    // parameter lists) makes a valiant attempt to prevent really long\n    // lines. You can adjust the limit by changing this option; however,\n    // there is no guarantee that line length will fit inside this limit.\n    wrapColumn: 74, // Aspirational for now.\n\n    // Pass a string as options.sourceFileName to recast.parse to tell the\n    // reprinter to keep track of reused code so that it can construct a\n    // source map automatically.\n    sourceFileName: null,\n\n    // Pass a string as options.sourceMapName to recast.print, and\n    // (provided you passed options.sourceFileName earlier) the\n    // PrintResult of recast.print will have a .map property for the\n    // generated source map.\n    sourceMapName: null,\n\n    // If provided, this option will be passed along to the source map\n    // generator as a root directory for relative source file paths.\n    sourceRoot: null,\n\n    // If you provide a source map that was generated from a previous call\n    // to recast.print as options.inputSourceMap, the old source map will\n    // be composed with the new source map.\n    inputSourceMap: null,\n\n    // If you want esprima to generate .range information (recast only\n    // uses .loc internally), pass true for this option.\n    range: false,\n\n    // If you want esprima not to throw exceptions when it encounters\n    // non-fatal errors, keep this option true.\n    tolerant: true,\n\n    // If you want to override the quotes used in string literals, specify\n    // either \"single\", \"double\", or \"auto\" here (\"auto\" will select the one\n    // which results in the shorter literal)\n    // Otherwise, double quotes are used.\n    quote: null,\n\n    // If you want to print trailing commas in object literals,\n    // array expressions, functions calls and function definitions pass true\n    // for this option.\n    trailingComma: false,\n}, hasOwn = defaults.hasOwnProperty;\n\n// Copy options and fill in default values.\nexports.normalize = function(options) {\n    options = options || defaults;\n\n    function get(key) {\n        return hasOwn.call(options, key)\n            ? options[key]\n            : defaults[key];\n    }\n\n    return {\n        tabWidth: +get(\"tabWidth\"),\n        useTabs: !!get(\"useTabs\"),\n        reuseWhitespace: !!get(\"reuseWhitespace\"),\n        lineTerminator: get(\"lineTerminator\"),\n        wrapColumn: Math.max(get(\"wrapColumn\"), 0),\n        sourceFileName: get(\"sourceFileName\"),\n        sourceMapName: get(\"sourceMapName\"),\n        sourceRoot: get(\"sourceRoot\"),\n        inputSourceMap: get(\"inputSourceMap\"),\n        parser: get(\"esprima\") || get(\"parser\"),\n        range: get(\"range\"),\n        tolerant: get(\"tolerant\"),\n        quote: get(\"quote\"),\n        trailingComma: get(\"trailingComma\"),\n    };\n};\n"]}