{"version":3,"sources":["rewrite-pattern.js"],"names":[],"mappings":"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","file":"rewrite-pattern-compiled.js","sourcesContent":["var generate = require('regjsgen').generate;\nvar parse = require('regjsparser').parse;\nvar regenerate = require('regenerate');\nvar iuMappings = require('./data/iu-mappings.json');\nvar ESCAPE_SETS = require('./data/character-class-escape-sets.js');\n\nfunction getCharacterClassEscapeSet(character) {\n\tif (unicode) {\n\t\tif (ignoreCase) {\n\t\t\treturn ESCAPE_SETS.UNICODE_IGNORE_CASE[character];\n\t\t}\n\t\treturn ESCAPE_SETS.UNICODE[character];\n\t}\n\treturn ESCAPE_SETS.REGULAR[character];\n}\n\nvar object = {};\nvar hasOwnProperty = object.hasOwnProperty;\nfunction has(object, property) {\n\treturn hasOwnProperty.call(object, property);\n}\n\n// Prepare a Regenerate set containing all code points, used for negative\n// character classes (if any).\nvar UNICODE_SET = regenerate().addRange(0x0, 0x10FFFF);\n// Without the `u` flag, the range stops at 0xFFFF.\n// https://mths.be/es6#sec-pattern-semantics\nvar BMP_SET = regenerate().addRange(0x0, 0xFFFF);\n\n// Prepare a Regenerate set containing all code points that are supposed to be\n// matched by `/./u`. https://mths.be/es6#sec-atom\nvar DOT_SET_UNICODE = UNICODE_SET.clone() // all Unicode code points\n\t.remove(\n\t\t// minus `LineTerminator`s (https://mths.be/es6#sec-line-terminators):\n\t\t0x000A, // Line Feed <LF>\n\t\t0x000D, // Carriage Return <CR>\n\t\t0x2028, // Line Separator <LS>\n\t\t0x2029  // Paragraph Separator <PS>\n\t);\n// Prepare a Regenerate set containing all code points that are supposed to be\n// matched by `/./` (only BMP code points).\nvar DOT_SET = DOT_SET_UNICODE.clone()\n\t.intersection(BMP_SET);\n\n// Add a range of code points + any case-folded code points in that range to a\n// set.\nregenerate.prototype.iuAddRange = function(min, max) {\n\tvar $this = this;\n\tdo {\n\t\tvar folded = caseFold(min);\n\t\tif (folded) {\n\t\t\t$this.add(folded);\n\t\t}\n\t} while (++min <= max);\n\treturn $this;\n};\n\nfunction assign(target, source) {\n\tfor (var key in source) {\n\t\t// Note: `hasOwnProperty` is not needed here.\n\t\ttarget[key] = source[key];\n\t}\n}\n\nfunction update(item, pattern) {\n\t// TODO: Test if memoizing `pattern` here is worth the effort.\n\tif (!pattern) {\n\t\treturn;\n\t}\n\tvar tree = parse(pattern, '');\n\tswitch (tree.type) {\n\t\tcase 'characterClass':\n\t\tcase 'group':\n\t\tcase 'value':\n\t\t\t// No wrapping needed.\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t// Wrap the pattern in a non-capturing group.\n\t\t\ttree = wrap(tree, pattern);\n\t}\n\tassign(item, tree);\n}\n\nfunction wrap(tree, pattern) {\n\t// Wrap the pattern in a non-capturing group.\n\treturn {\n\t\t'type': 'group',\n\t\t'behavior': 'ignore',\n\t\t'body': [tree],\n\t\t'raw': '(?:' + pattern + ')'\n\t};\n}\n\nfunction caseFold(codePoint) {\n\treturn has(iuMappings, codePoint) ? iuMappings[codePoint] : false;\n}\n\nvar ignoreCase = false;\nvar unicode = false;\nfunction processCharacterClass(characterClassItem) {\n\tvar set = regenerate();\n\tvar body = characterClassItem.body.forEach(function(item) {\n\t\tswitch (item.type) {\n\t\t\tcase 'value':\n\t\t\t\tset.add(item.codePoint);\n\t\t\t\tif (ignoreCase && unicode) {\n\t\t\t\t\tvar folded = caseFold(item.codePoint);\n\t\t\t\t\tif (folded) {\n\t\t\t\t\t\tset.add(folded);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'characterClassRange':\n\t\t\t\tvar min = item.min.codePoint;\n\t\t\t\tvar max = item.max.codePoint;\n\t\t\t\tset.addRange(min, max);\n\t\t\t\tif (ignoreCase && unicode) {\n\t\t\t\t\tset.iuAddRange(min, max);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'characterClassEscape':\n\t\t\t\tset.add(getCharacterClassEscapeSet(item.value));\n\t\t\t\tbreak;\n\t\t\t// The `default` clause is only here as a safeguard; it should never be\n\t\t\t// reached. Code coverage tools should ignore it.\n\t\t\t/* istanbul ignore next */\n\t\t\tdefault:\n\t\t\t\tthrow Error('Unknown term type: ' + item.type);\n\t\t}\n\t});\n\tif (characterClassItem.negative) {\n\t\tset = (unicode ? UNICODE_SET : BMP_SET).clone().remove(set);\n\t}\n\tupdate(characterClassItem, set.toString());\n\treturn characterClassItem;\n}\n\nfunction processTerm(item) {\n\tswitch (item.type) {\n\t\tcase 'dot':\n\t\t\tupdate(\n\t\t\t\titem,\n\t\t\t\t(unicode ? DOT_SET_UNICODE : DOT_SET).toString()\n\t\t\t);\n\t\t\tbreak;\n\t\tcase 'characterClass':\n\t\t\titem = processCharacterClass(item);\n\t\t\tbreak;\n\t\tcase 'characterClassEscape':\n\t\t\tupdate(\n\t\t\t\titem,\n\t\t\t\tgetCharacterClassEscapeSet(item.value).toString()\n\t\t\t);\n\t\t\tbreak;\n\t\tcase 'alternative':\n\t\tcase 'disjunction':\n\t\tcase 'group':\n\t\tcase 'quantifier':\n\t\t\titem.body = item.body.map(processTerm);\n\t\t\tbreak;\n\t\tcase 'value':\n\t\t\tvar codePoint = item.codePoint;\n\t\t\tvar set = regenerate(codePoint);\n\t\t\tif (ignoreCase && unicode) {\n\t\t\t\tvar folded = caseFold(codePoint);\n\t\t\t\tif (folded) {\n\t\t\t\t\tset.add(folded);\n\t\t\t\t}\n\t\t\t}\n\t\t\tupdate(item, set.toString());\n\t\t\tbreak;\n\t\tcase 'anchor':\n\t\tcase 'empty':\n\t\tcase 'group':\n\t\tcase 'reference':\n\t\t\t// Nothing to do here.\n\t\t\tbreak;\n\t\t// The `default` clause is only here as a safeguard; it should never be\n\t\t// reached. Code coverage tools should ignore it.\n\t\t/* istanbul ignore next */\n\t\tdefault:\n\t\t\tthrow Error('Unknown term type: ' + item.type);\n\t}\n\treturn item;\n};\n\nmodule.exports = function(pattern, flags) {\n\tvar tree = parse(pattern, flags);\n\tignoreCase = flags ? flags.indexOf('i') > -1 : false;\n\tunicode = flags ? flags.indexOf('u') > -1 : false;\n\tassign(tree, processTerm(tree));\n\treturn generate(tree);\n};\n"]}