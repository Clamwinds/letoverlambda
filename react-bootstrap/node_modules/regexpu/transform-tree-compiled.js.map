{"version":3,"sources":["transform-tree.js"],"names":[],"mappings":";;AAAA,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC/B,IAAI,cAAc,GAAG,OAAO,CAAC,sBAAsB,CAAC,CAAC;AACrD,IAAI,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;;AAEzB,IAAI,OAAO,GAAG,KAAK,CAAC,WAAW,CAAC,iBAAiB,CAAC;;AAEjD,eAAc,EAAE,sBAAS,IAAI,EAAE;AAC9B,MAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;;AAEtB,MAAI,CAAC,IAAI,CAAC,KAAK,EAAE;AAChB,UAAO,KAAK,CAAC;GACb;;AAED,MAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;AAC7B,MAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,EAAE;AAC7B,UAAO,KAAK,CAAC;GACb;;AAED,MAAI,UAAU,GAAG,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;AAC3D,MAAI,QAAQ,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;AACtC,MAAI,MAAM,GAAG,GAAG,GAAG,UAAU,GAAG,GAAG,GAAG,QAAQ,CAAC;AAC/C,MAAI,CAAC,KAAK,GAAG;AACZ,YAAS,EAAE,UAAU;AACrB,UAAO,EAAE,QAAQ;GACjB,CAAA;AACD,MAAI,CAAC,GAAG,GAAG,MAAM,CAAC;AAClB,MAAI,CAAC,KAAK,GAAG;AACZ,aAAU,EAAE,oBAAW;AACtB,WAAO,MAAM,CAAC;IACd;GACD;;;;AAAC,AAIF,SAAO,KAAK,CAAC;EACb;CACD,CAAC,CAAC;;AAEH,MAAM,CAAC,OAAO,GAAG,UAAS,IAAI,EAAE;AAC/B,QAAO,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;CAClC,CAAC","file":"transform-tree-compiled.js","sourcesContent":["var recast = require('recast');\nvar rewritePattern = require('./rewrite-pattern.js');\nvar types = recast.types;\n\nvar visitor = types.PathVisitor.fromMethodsObject({\n\t// This method is called for any AST node whose `type` is `Literal`.\n\t'visitLiteral': function(path) {\n\t\tvar node = path.value;\n\n\t\tif (!node.regex) {\n\t\t\treturn false;\n\t\t}\n\n\t\tvar flags = node.regex.flags;\n\t\tif (flags.indexOf('u') == -1) {\n\t\t\treturn false;\n\t\t}\n\n\t\tvar newPattern = rewritePattern(node.regex.pattern, flags);\n\t\tvar newFlags = flags.replace('u', '');\n\t\tvar result = '/' + newPattern + '/' + newFlags;\n\t\tnode.regex = {\n\t\t\t'pattern': newPattern,\n\t\t\t'flags': newFlags\n\t\t}\n\t\tnode.raw = result;\n\t\tnode.value = {\n\t\t\t'toString': function() {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t};\n\n\t\t// Return `false` to indicate that the traversal need not continue any\n\t\t// further down this subtree. (`Literal`s donâ€™t have descendants anyway.)\n\t\treturn false;\n\t}\n});\n\nmodule.exports = function(node) {\n\treturn types.visit(node, visitor);\n};\n"]}