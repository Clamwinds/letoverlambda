{"version":3,"sources":["parser"],"names":[],"mappings":";;AACA,AAAC,CAAA,YAAW;;AAEV,MAAI,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AACvB,MAAI,KAAK,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC,KAAK,CAAC;AACvC,MAAI,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;AAC7B,MAAI,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;AACrC,MAAI,KAAK,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;AACvB,MAAI,IAAI,CAAC;AACT,MAAI,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC;AACtB,MAAI,IAAI,GAAG,SAAP,IAAI,GAAc;AACpB,QAAI,2BAA2B,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;AAC3C,SAAG,CAAC,CACF,YAAY,EACZ,2BAA2B,EAC3B,6BAA6B,EAC7B,eAAe,EACf,6BAA6B,EAC7B,+BAA+B,CAChC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;AACd,aAAO,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;KACxB;;AAED,WAAO,CAAC,OAAO,CAAC,UAAS,OAAO,EAAE;AAChC,UAAI,MAAM,CAAC;AACX,UAAI;AACF,cAAM,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC;AACxB,WAAG,CAAC,KAAK,CAAC,MAAM,EAAE;AAChB,gBAAM,EAAE,IAAI;AACZ,mBAAS,EAAE,KAAK;AAChB,kBAAQ,EAAE,IAAI;SACf,CAAC,CAAC,CAAC;OACL,CAAC,OAAM,KAAK,EAAE;AACb,WAAG,CAAC,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,CAAC;AAC1B,WAAG,CAAC,oEAAoE,CAAC,CAAC;AAC1E,WAAG,CAAC,8DAA8D,CAAC,CAAC;AACpE,WAAG,CAAC,sDAAsD,CAAC,CAAC;AAC5D,WAAG,CAAC,kBAAkB,CAAC,CAAC;AACxB,WAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;AACjB,eAAO,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;OACxB;KACF,CAAC;;;AAAC,AAGH,WAAO,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;GACxB,CAAC;;AAEF,MAAI,EAAE,CAAC;CAER,CAAA,EAAE,CAAE","file":"parser-compiled.js","sourcesContent":["#!/usr/bin/env node\n(function() {\n\n  var fs = require('fs');\n  var parse = require('../parser').parse;\n  var jsesc = require('jsesc');\n  var regexes = process.argv.splice(2);\n  var first = regexes[0];\n  var data;\n  var log = console.log;\n  var main = function() {\n    if (/^(?:-h|--help|undefined)$/.test(first)) {\n      log([\n        '\\nUsage:\\n',\n        '\\tregjsparser [regex ...]',\n        '\\tregjsparser [-h | --help]',\n        '\\nExamples:\\n',\n        '\\tregjsparser \\'^foo.bar$\\'',\n        '\\tregjsparser \\'[a-zA-Z0-9]\\''\n      ].join('\\n'));\n      return process.exit(1);\n    }\n\n    regexes.forEach(function(snippet) {\n      var result;\n      try {\n        result = parse(snippet);\n        log(jsesc(result, {\n          'json': true,\n          'compact': false,\n          'indent': '\\t'\n        }));\n      } catch(error) {\n        log(error.message + '\\n');\n        log('Error: failed to parse. Make sure the regular expression is valid.');\n        log('If you think this is a bug in regjsparser, please report it:');\n        log('\\thttps://github.com/jviereck/regjsparser/issues/new');\n        log('\\nStack trace:\\n');\n        log(error.stack);\n        return process.exit(1);\n      }\n    });\n    // Return with exit status 0 outside of the `forEach` loop, in case\n    // multiple regular expressions were passed in.\n    return process.exit(0);\n  };\n\n  main();\n\n}());\n"]}